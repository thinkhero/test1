{
    "docs": [
        {
            "location": "/",
            "text": "Overview\n\u00b6\n\n\n\n\n What is Coolsnady?\n\u00b6\n\n\nCoolsnady is a cryptocurrency, similar to Bitcoin, with a strong focus on community input, open governance and sustainable funding and development. It utilizes a hybrid \u201cproof-of-work\u201d and \u201cproof-of-stake\u201d mining system to ensure that a small group cannot dominate the flow of transactions or make changes to Coolsnady without the input of the community. A unit of currency is called a \u2018coolsnady\u2019 (DCR). To ensure the integrity of the currency and prevent people from making fraudulent transactions or creating their own coins, Coolsnady uses a method of recording transactions known as a blockchain.\n\n\n\n\n\n\n What is a cryptocurrency?\n\u00b6\n\n\nA cryptocurrency is a system of \u2018value exchange\u2019, just like any real world currency you may be familiar with. Its main difference is that it is not controlled by a central government or group and thus cannot be manipulated or restricted in the way those currencies can be.\n\n\nAs an example, you may buy Coolsnady from a fiat currency exchange and use it to directly purchase a product in a different country without having to pay high exchange rates.\nCoolsnady uses a wallet to store, transfer and receive DCR. This wallet signs every transaction in and out with a special private key that is unique to you. This is how the network knows that the address sending the transaction is the correct one. Think of your bank account and PIN. When you use your card (wallet), you also enter your PIN (private key), so the bank knows it was you that authorized the transaction. When you first start using Coolsnady, your wallet will generate a private key that you must not give to anyone.\n\n\n\n\n What is the blockchain?\n\u00b6\n\n\nThe blockchain is the heart of Coolsnady. It is where all transactions that take place are stored. It is similar to a bank ledger in that it records all the activity that happens when DCR are transferred. This ledger is able to confirm that new transactions are valid and that no fraud is taking place.\n\n\nEach block in the blockchain is a record of transactions that have occurred since the last block (about 5 minutes). Every computer (node) in the Coolsnady network shares this blockchain. Nodes in the network run an algorithm many times over a block looking for a solution with a known difficulty. This process is known as \u201cproof-of-work\u201d mining. Once the solution is found it is broadcast to the network. The network then verifies the solution (finding the solution is very hard, but verifying it is easy). Coolsnady uses an extra step of verification known as \u201cproof-of-stake\u201d mining. Stakeholders who have purchased tickets now have the chance to vote on the block. 5 tickets are chosen randomly from the ticket pool and if at least 3 of them vote \u2018yes\u2019 the block is permanently added to the blockchain and the transactions are cleared. Both PoS and PoW miners are compensated with DCR for the resources used to mine the block.",
            "title": "Home"
        },
        {
            "location": "/#overview",
            "text": "",
            "title": "Overview"
        },
        {
            "location": "/#what-is-coolsnady",
            "text": "Coolsnady is a cryptocurrency, similar to Bitcoin, with a strong focus on community input, open governance and sustainable funding and development. It utilizes a hybrid \u201cproof-of-work\u201d and \u201cproof-of-stake\u201d mining system to ensure that a small group cannot dominate the flow of transactions or make changes to Coolsnady without the input of the community. A unit of currency is called a \u2018coolsnady\u2019 (DCR). To ensure the integrity of the currency and prevent people from making fraudulent transactions or creating their own coins, Coolsnady uses a method of recording transactions known as a blockchain.",
            "title": " What is Coolsnady?"
        },
        {
            "location": "/#what-is-a-cryptocurrency",
            "text": "A cryptocurrency is a system of \u2018value exchange\u2019, just like any real world currency you may be familiar with. Its main difference is that it is not controlled by a central government or group and thus cannot be manipulated or restricted in the way those currencies can be.  As an example, you may buy Coolsnady from a fiat currency exchange and use it to directly purchase a product in a different country without having to pay high exchange rates.\nCoolsnady uses a wallet to store, transfer and receive DCR. This wallet signs every transaction in and out with a special private key that is unique to you. This is how the network knows that the address sending the transaction is the correct one. Think of your bank account and PIN. When you use your card (wallet), you also enter your PIN (private key), so the bank knows it was you that authorized the transaction. When you first start using Coolsnady, your wallet will generate a private key that you must not give to anyone.",
            "title": " What is a cryptocurrency?"
        },
        {
            "location": "/#what-is-the-blockchain",
            "text": "The blockchain is the heart of Coolsnady. It is where all transactions that take place are stored. It is similar to a bank ledger in that it records all the activity that happens when DCR are transferred. This ledger is able to confirm that new transactions are valid and that no fraud is taking place.  Each block in the blockchain is a record of transactions that have occurred since the last block (about 5 minutes). Every computer (node) in the Coolsnady network shares this blockchain. Nodes in the network run an algorithm many times over a block looking for a solution with a known difficulty. This process is known as \u201cproof-of-work\u201d mining. Once the solution is found it is broadcast to the network. The network then verifies the solution (finding the solution is very hard, but verifying it is easy). Coolsnady uses an extra step of verification known as \u201cproof-of-stake\u201d mining. Stakeholders who have purchased tickets now have the chance to vote on the block. 5 tickets are chosen randomly from the ticket pool and if at least 3 of them vote \u2018yes\u2019 the block is permanently added to the blockchain and the transactions are cleared. Both PoS and PoW miners are compensated with DCR for the resources used to mine the block.",
            "title": " What is the blockchain?"
        },
        {
            "location": "/getting-started/beginner-guide/",
            "text": "Beginner\u2019s Guide\n\u00b6\n\n\nLast updated for v1.0.1\n\n\n\n\nWelcome To Coolsnady\n\u00b6\n\n\nWelcome to Coolsnady! We are very glad to have you. As you may or may not already know, Coolsnady is different. There\u2019s a lot of new things to learn to fully grasp how things work. This documentation will attempt to make things a bit easier to understand.\n\n\nThis beginner\u2019s guide is a path to getting the Coolsnady software up and running. You can choose from multiple clients to get a node on the network and Coolsnady in your wallet. Specifically, you\u2019ll learn how to install, setup, and use the Coolsnady applications; how to obtain hc; how to vote via Proof-of-Stake; and how to use the block explorer.\n\n\nYou\u2019ll need to follow an \nInstallation Guide\n, and then follow the path for the application of your choice below. After your application is set-up, go through the \nGeneral Guides\n at the bottom of this page. If you have any questions along the way, join us in our \nSlack\n.\n\n\nNOTE: Using Testnet is highly recommended for learning how to use the Coolsnady software without the fear of making a mistake and losing real money. After following the guides to setup your choice of software, please visit the \nUsing Testnet guide\n to learn how to launch your application onto Coolsnady\u2019s testnet.\n\n\n\n\nApplications\n\u00b6\n\n\nBelow you\u2019ll find a list of currently available applications, with a chart showing their compatibility with different operating systems.\n\n\n\n\n\n\nhcgui\n: Cross-platform GUI client as of v1.1.1.\n\n\n\n\n\n\nhcd\n: The node daemon, this command-line application handles block management and consensus.\n\n\n\n\n\n\nhcwallet\n: The wallet daemon, this command-line application handles address and transaction management.\n\n\n\n\n\n\nhcctl\n: The remote procedure call (RPC) client, this command-line application is used to control hcd and hcwallet via RPC commands.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nhcd\n\n\nhcwallet\n\n\nhcctl\n\n\nhcgui\n\n\n\n\n\n\n\n\n\n\nWindows\n\n\nX\n\n\nX\n\n\nX\n\n\nX\n\n\n\n\n\n\nmacOS\n\n\nX\n\n\nX\n\n\nX\n\n\nX\n\n\n\n\n\n\nLinux\n\n\nX\n\n\nX\n\n\nX\n\n\nX\n\n\n\n\n\n\nOther UNIX\n\n\nX\n\n\nX\n\n\nX\n\n\n\n\n\n\n\n\n\n\n\u201cOther UNIX\u201d currently includes various *BSDs and Solaris/illumos.\n\n\nNote: You might soon notice one of the many differences between Coolsnady and other \npopular cryptocurrencies: the wallet daemon and node daemon are separate.\nA lot of other coins run these functions together in a single daemon.\nFor those who choose to use the command line interfaces, this means you must\nrun \nhcd\n for full node functionality, and \nhcwallet\n to store your hc,\ncreate transactions and participate in Proof-of-Stake mining/voting.\n\n\n\n\nInstallation Guides\n\u00b6\n\n\nTo get started, choose an option for installations available for your operating system below:\n\n\n\n\nCommand Line Suite \nvia hcinstall\n - NOTE: The \nhcinstall\n method is the fastest and easiest way to get a command-line node and wallet running. It is recommended and the command-line path setup guides below will assume you\u2019ve used this method.\n\n\nhcgui\n\n\n\n\n\n\nNOTE:\n All of the following guides can be found in the navigation menu with the same names.\n\n\nhcgui Path\n\u00b6\n\n\nThe following guide will help you load hcgui:\n\n\n\n\nhcgui Setup\n\n\nUsing hcgui\n\n\n\n\nCommand-Line Path\n\u00b6\n\n\nThe following guides, in order, will get you started with the Command-Line Applications (\nhcd\n, \nhcwallet\n, \nhcctl\n):\n\n\n\n\nCommand-Line Differences\n\n\nStartup Option Basics\n\n\nhcd Setup\n\n\nhcwallet Setup\n\n\nhcctl Basic Usage\n\n\n\n\nGeneral Guides\n\u00b6\n\n\nThe following guides are independent of the different applications:\n\n\n\n\nUsing Testnet\n\n\nObtaining HC\n\n\nUsing the Block Explorer\n\n\nProof-of-Stake Guide\n\n\nMainnet Voting Guide",
            "title": "Beginner's Guide"
        },
        {
            "location": "/getting-started/beginner-guide/#beginners-guide",
            "text": "Last updated for v1.0.1",
            "title": " Beginner's Guide"
        },
        {
            "location": "/getting-started/beginner-guide/#welcome-to-coolsnady",
            "text": "Welcome to Coolsnady! We are very glad to have you. As you may or may not already know, Coolsnady is different. There\u2019s a lot of new things to learn to fully grasp how things work. This documentation will attempt to make things a bit easier to understand.  This beginner\u2019s guide is a path to getting the Coolsnady software up and running. You can choose from multiple clients to get a node on the network and Coolsnady in your wallet. Specifically, you\u2019ll learn how to install, setup, and use the Coolsnady applications; how to obtain hc; how to vote via Proof-of-Stake; and how to use the block explorer.  You\u2019ll need to follow an  Installation Guide , and then follow the path for the application of your choice below. After your application is set-up, go through the  General Guides  at the bottom of this page. If you have any questions along the way, join us in our  Slack .  NOTE: Using Testnet is highly recommended for learning how to use the Coolsnady software without the fear of making a mistake and losing real money. After following the guides to setup your choice of software, please visit the  Using Testnet guide  to learn how to launch your application onto Coolsnady\u2019s testnet.",
            "title": "Welcome To Coolsnady"
        },
        {
            "location": "/getting-started/beginner-guide/#applications",
            "text": "Below you\u2019ll find a list of currently available applications, with a chart showing their compatibility with different operating systems.    hcgui : Cross-platform GUI client as of v1.1.1.    hcd : The node daemon, this command-line application handles block management and consensus.    hcwallet : The wallet daemon, this command-line application handles address and transaction management.    hcctl : The remote procedure call (RPC) client, this command-line application is used to control hcd and hcwallet via RPC commands.        hcd  hcwallet  hcctl  hcgui      Windows  X  X  X  X    macOS  X  X  X  X    Linux  X  X  X  X    Other UNIX  X  X  X      \u201cOther UNIX\u201d currently includes various *BSDs and Solaris/illumos.  Note: You might soon notice one of the many differences between Coolsnady and other \npopular cryptocurrencies: the wallet daemon and node daemon are separate.\nA lot of other coins run these functions together in a single daemon.\nFor those who choose to use the command line interfaces, this means you must\nrun  hcd  for full node functionality, and  hcwallet  to store your hc,\ncreate transactions and participate in Proof-of-Stake mining/voting.",
            "title": "Applications"
        },
        {
            "location": "/getting-started/beginner-guide/#installation-guides",
            "text": "To get started, choose an option for installations available for your operating system below:   Command Line Suite  via hcinstall  - NOTE: The  hcinstall  method is the fastest and easiest way to get a command-line node and wallet running. It is recommended and the command-line path setup guides below will assume you\u2019ve used this method.  hcgui    NOTE:  All of the following guides can be found in the navigation menu with the same names.",
            "title": "Installation Guides"
        },
        {
            "location": "/getting-started/beginner-guide/#hcgui-path",
            "text": "The following guide will help you load hcgui:   hcgui Setup  Using hcgui",
            "title": "hcgui Path"
        },
        {
            "location": "/getting-started/beginner-guide/#command-line-path",
            "text": "The following guides, in order, will get you started with the Command-Line Applications ( hcd ,  hcwallet ,  hcctl ):   Command-Line Differences  Startup Option Basics  hcd Setup  hcwallet Setup  hcctl Basic Usage",
            "title": "Command-Line Path"
        },
        {
            "location": "/getting-started/beginner-guide/#general-guides",
            "text": "The following guides are independent of the different applications:   Using Testnet  Obtaining HC  Using the Block Explorer  Proof-of-Stake Guide  Mainnet Voting Guide",
            "title": "General Guides"
        },
        {
            "location": "/getting-started/obtaining-hc/",
            "text": "Obtaining HC\n\u00b6\n\n\n\n\n Overview\n\u00b6\n\n\nThis article discusses some of the ways a user can acquire Coolsnady.\n\n\nThe five basic ways are:\n\n\n\n\nPurchase Coolsnady using BTC or fiat currency\n\n\nPoW mine for Coolsnady\n\n\nPoS mine for Coolsnady (this requires you to already have some Coolsnady)\n\n\nContribute to Coolsnady\n\n\nSell or trade goods or services with someone who already has Coolsnady\n\n\n\n\n\n\n Purchasing Coolsnady\n\u00b6\n\n\nThere is a variety of ways to purchase Coolsnady listed on the \nCoolsnady website\n.\n\n\n\n\nCryptocurrency exchanges enable swapping another cryptocurrency for Coolsnady\n\n\nDirect exchanges allow Coolsnady to be purchased with fiat currency\n\n\nOTC (Over The Counter) traders allows large purchases of Coolsnady at a fixed price\n\n\n\n\n\n\n Mine for Coolsnady (PoW)\n\u00b6\n\n\nProof-of-Work (PoW) is a measure of using computational power to create and verify the cryptographically secure blockchain.  This is similar to traditional Bitcoin mining. PoW mining is described in more detail \nhere\n.\n\n\n\n\n Stake Mine for Coolsnady / Proof-of-Stake (PoS)\n\u00b6\n\n\nProof-of-Stake (PoS) mining is performed by stakeholders who lock a certain amount of their HC in return for voting rights and a monetary reward. PoS mining is described in more detail \nhere\n.\n\n\n\n\n Contribute to Coolsnady\n\u00b6\n\n\nCoolsnady is currently recruiting contractors - members of the community who are paid in Coolsnady for their contributions. Check out \nthis blog post\n for the details and how to get involved.\n\n\n\n\n Sell/Trade Goods or Services for Coolsnady\n\u00b6\n\n\nIf you are an online merchant, there are some payment processors listed on the \nCoolsnady website\n which can help you accept Coolsnady payments. Some of these payment processors can also provide integration with major e-commerce platforms.\n\n\nAn alternative way to obtain Coolsnady is to use your skills, knowledge, or experience by exchanging services for Coolsnady as payment.  Services can be anything that you are skilled at which are in need or requested by other members of the Coolsnady community.",
            "title": "Obtaining HC"
        },
        {
            "location": "/getting-started/obtaining-hc/#obtaining-hc",
            "text": "",
            "title": " Obtaining HC"
        },
        {
            "location": "/getting-started/obtaining-hc/#overview",
            "text": "This article discusses some of the ways a user can acquire Coolsnady.  The five basic ways are:   Purchase Coolsnady using BTC or fiat currency  PoW mine for Coolsnady  PoS mine for Coolsnady (this requires you to already have some Coolsnady)  Contribute to Coolsnady  Sell or trade goods or services with someone who already has Coolsnady",
            "title": " Overview"
        },
        {
            "location": "/getting-started/obtaining-hc/#purchasing-coolsnady",
            "text": "There is a variety of ways to purchase Coolsnady listed on the  Coolsnady website .   Cryptocurrency exchanges enable swapping another cryptocurrency for Coolsnady  Direct exchanges allow Coolsnady to be purchased with fiat currency  OTC (Over The Counter) traders allows large purchases of Coolsnady at a fixed price",
            "title": " Purchasing Coolsnady"
        },
        {
            "location": "/getting-started/obtaining-hc/#mine-for-coolsnady-pow",
            "text": "Proof-of-Work (PoW) is a measure of using computational power to create and verify the cryptographically secure blockchain.  This is similar to traditional Bitcoin mining. PoW mining is described in more detail  here .",
            "title": " Mine for Coolsnady (PoW)"
        },
        {
            "location": "/getting-started/obtaining-hc/#stake-mine-for-coolsnady-proof-of-stake-pos",
            "text": "Proof-of-Stake (PoS) mining is performed by stakeholders who lock a certain amount of their HC in return for voting rights and a monetary reward. PoS mining is described in more detail  here .",
            "title": " Stake Mine for Coolsnady / Proof-of-Stake (PoS)"
        },
        {
            "location": "/getting-started/obtaining-hc/#contribute-to-coolsnady",
            "text": "Coolsnady is currently recruiting contractors - members of the community who are paid in Coolsnady for their contributions. Check out  this blog post  for the details and how to get involved.",
            "title": " Contribute to Coolsnady"
        },
        {
            "location": "/getting-started/obtaining-hc/#selltrade-goods-or-services-for-coolsnady",
            "text": "If you are an online merchant, there are some payment processors listed on the  Coolsnady website  which can help you accept Coolsnady payments. Some of these payment processors can also provide integration with major e-commerce platforms.  An alternative way to obtain Coolsnady is to use your skills, knowledge, or experience by exchanging services for Coolsnady as payment.  Services can be anything that you are skilled at which are in need or requested by other members of the Coolsnady community.",
            "title": " Sell/Trade Goods or Services for Coolsnady"
        },
        {
            "location": "/getting-started/using-the-block-explorer/",
            "text": "Using the Block Explorer\n\u00b6\n\n\n\n\n Overview\n\u00b6\n\n\nThere are two block explorers available for Coolsnady. All blocks and transactions on the Coolsnady blockchain\nare visible through the use of these block explorers.\n\n\n\n\nThe explorer based on \n\nhcexplore\n is located at\n\nhttps://explorer.hcexplore.org\n or\n\nhttps://testnet.hcexplore.org\n.\n\n\nThe explorer based on\n\ninsight\n is located at\n\nhttps://mainnet.Coolsnady.org\n or \n\nhttps://testnet.Coolsnady.org\n.\n\n\n\n\nBelow is a quick review of some of the information on them.\n\n\n\n\n\n\n\n\nOption\n\n\nExplanation\n\n\n\n\n\n\n\n\n\n\nHeight\n\n\nThe block number.\n\n\n\n\n\n\nAge\n\n\nHow long ago the block was added to the blockchain.\n\n\n\n\n\n\nTransactions\n\n\nThe number of transactions included in the block.\n\n\n\n\n\n\nVotes\n\n\nThe number of proof-of-stake votes included in the block.\n\n\n\n\n\n\nFresh Stake\n\n\nThe number of new tickets purchased in this block.\n\n\n\n\n\n\nSize\n\n\nThe size (in bytes) of the block.\n\n\n\n\n\n\n\n\nUnder \nLatest Transactions\n, you can see the transaction ID (txid) and\nthe value (in HC) transmitted across the network.\n\n\n\n\n Blocks\n\u00b6\n\n\nBlocks can be found by searching for their block height number,\nclicking on a \nHeight\n value from the home page, or from their\n\nBlockHash\n value. Older blocks will have lower block numbers. The top\nhalf of a block overview shows relevant information about this\nspecific block. This information includes: the block height, the block\nhash, and several key network parameters, described below:\n\n\n\n\n\n\n\n\nOption\n\n\nExplanation\n\n\n\n\n\n\n\n\n\n\nNumber of Transactions\n\n\nThe number of standard transactions (HC sent from one user to another).\n\n\n\n\n\n\nHeight\n\n\nThe height of the blockchain in which this block resides.\n\n\n\n\n\n\nBlock Reward\n\n\nThe amount of new HC minted in this block.\n\n\n\n\n\n\nTimestamp\n\n\nThe time this block was created by a miner and was included in the blockchain.\n\n\n\n\n\n\nMerkle Root\n\n\nA hash value of all the transaction hashes included in this block.\n\n\n\n\n\n\nStake Root\n\n\nA hash value of all the stake related transaction hashes in this block. This includes ticket purchases, votes, and ticket revocations.\n\n\n\n\n\n\nVoteBits\n\n\n(1) Block was approved by proof-of-stake voters. (2) Block was vetoed by proof-of-stake voters and all non-stake transactions in the block were invalidated, along with the proof-of-work miner and development subsidy.\n\n\n\n\n\n\nFinal State\n\n\nThe final state of the pseudo random number generator used for ticket selection.\n\n\n\n\n\n\nVoters\n\n\nThe number of successful proof-of-stake votes cast in this block. The maximum value is 5.\n\n\n\n\n\n\nFresh Stake\n\n\nThe number of stake ticket purchases confirmed in this block.\n\n\n\n\n\n\nRevocations\n\n\nThe number of tickets that failed to vote and were revoked.\n\n\n\n\n\n\nPoolSize\n\n\nThe total number of active proof-of-stake tickets.\n\n\n\n\n\n\nDifficulty\n\n\nThe proof-of-work network difficulty.\n\n\n\n\n\n\nSBits\n\n\nThe price of one proof-of-stake ticket.\n\n\n\n\n\n\nBits\n\n\nA compact version of the network difficulty at the time the block was mined.\n\n\n\n\n\n\nSize\n\n\nThe size of the block (in bytes).\n\n\n\n\n\n\nVersion\n\n\nThe version of the block.\n\n\n\n\n\n\nNonce\n\n\nThe value used by a miner to find the correct solution for this block.\n\n\n\n\n\n\n\n\n Transactions\n\u00b6\n\n\nThis section lists all the transactions that were mined into this\nblock. Transactions are chosen from the network mempool in order of\nhighest fee first. All transactions in the block overview follow this\norder: Standard transactions (peer-to-peer transfer), proof-of-stake\nvotes, proof-of-stake ticket purchases. The following sections will\nreview each type of transaction.\n\n\n\n\nStandard transactions\n\u00b6\n\n\nHere\u2019s the information included in standard Coolsnady transactions.\n\n\n\n\n\n\n\n\nOption\n\n\nExplanation\n\n\n\n\n\n\n\n\n\n\nSize\n\n\nThe size of the transaction in bytes.\n\n\n\n\n\n\nFee rate\n\n\nThe rate of fees collected by the network (per kB).\n\n\n\n\n\n\nReceived Time\n\n\nThe time the network confirmed the transaction.\n\n\n\n\n\n\nMined Time\n\n\nThe time a miner included the transaction in a block.\n\n\n\n\n\n\nIncluded in Block\n\n\nThe block number that the transaction became a part of.\n\n\n\n\n\n\n\n\nNote \nReceived Time\n, \nMined Time\n, and \nIncluded in Block\n will not have a value until a miner validates the transaction and includes it in a Coolsnady block. After being confirmed in a block, the transaction is considered complete.\n\n\n\n\n Ticket purchases\n\u00b6\n\n\nFor a ticket purchase (stake submission) there are a few differences\nfrom a standard transaction shown.\n\n\nNote the difference under details: The word \nTicket\n appears above the\nsender\u2019s wallet address on the left, and the words \nSubsidy\nCommitment\n appear on the right. This particular user purchased a\nstake ticket for 8.75411638 HC and received change in the amount\nof 7.15994209 HC. The address listed on the left under \nTicket\n is\nthe address that contains the funds used to purchase this\nticket. The first output on the right is the address that retains\nvoting rights for this specific ticket. The second output, \nSubsidy\nCommitment\n, is the address where the reward will go. This is not yet\nshown by the block explorer at this time. The third and final output\nis the address where change for this transaction will be sent.\n\n\n\n\n Proof-of-stake votes\n\u00b6\n\n\nNote the identifying terms in the details section: \nVote\n, \nStake\nBase\n, \nBlock Commitment\n, and \nVote Bits\n:\n\n\nThese keywords indicate that this transaction is a vote that was cast\nfrom a proof-of-stake ticket holder. In this particular example, the\nuser had previously purchased a ticket for 8.99472311 HC and was\nsent 10.82959184 HC after the vote was cast in this transaction.",
            "title": "Using the Block Explorer"
        },
        {
            "location": "/getting-started/using-the-block-explorer/#using-the-block-explorer",
            "text": "",
            "title": " Using the Block Explorer"
        },
        {
            "location": "/getting-started/using-the-block-explorer/#overview",
            "text": "There are two block explorers available for Coolsnady. All blocks and transactions on the Coolsnady blockchain\nare visible through the use of these block explorers.   The explorer based on  hcexplore  is located at https://explorer.hcexplore.org  or https://testnet.hcexplore.org .  The explorer based on insight  is located at https://mainnet.Coolsnady.org  or  https://testnet.Coolsnady.org .   Below is a quick review of some of the information on them.     Option  Explanation      Height  The block number.    Age  How long ago the block was added to the blockchain.    Transactions  The number of transactions included in the block.    Votes  The number of proof-of-stake votes included in the block.    Fresh Stake  The number of new tickets purchased in this block.    Size  The size (in bytes) of the block.     Under  Latest Transactions , you can see the transaction ID (txid) and\nthe value (in HC) transmitted across the network.",
            "title": " Overview"
        },
        {
            "location": "/getting-started/using-the-block-explorer/#blocks",
            "text": "Blocks can be found by searching for their block height number,\nclicking on a  Height  value from the home page, or from their BlockHash  value. Older blocks will have lower block numbers. The top\nhalf of a block overview shows relevant information about this\nspecific block. This information includes: the block height, the block\nhash, and several key network parameters, described below:     Option  Explanation      Number of Transactions  The number of standard transactions (HC sent from one user to another).    Height  The height of the blockchain in which this block resides.    Block Reward  The amount of new HC minted in this block.    Timestamp  The time this block was created by a miner and was included in the blockchain.    Merkle Root  A hash value of all the transaction hashes included in this block.    Stake Root  A hash value of all the stake related transaction hashes in this block. This includes ticket purchases, votes, and ticket revocations.    VoteBits  (1) Block was approved by proof-of-stake voters. (2) Block was vetoed by proof-of-stake voters and all non-stake transactions in the block were invalidated, along with the proof-of-work miner and development subsidy.    Final State  The final state of the pseudo random number generator used for ticket selection.    Voters  The number of successful proof-of-stake votes cast in this block. The maximum value is 5.    Fresh Stake  The number of stake ticket purchases confirmed in this block.    Revocations  The number of tickets that failed to vote and were revoked.    PoolSize  The total number of active proof-of-stake tickets.    Difficulty  The proof-of-work network difficulty.    SBits  The price of one proof-of-stake ticket.    Bits  A compact version of the network difficulty at the time the block was mined.    Size  The size of the block (in bytes).    Version  The version of the block.    Nonce  The value used by a miner to find the correct solution for this block.",
            "title": " Blocks"
        },
        {
            "location": "/getting-started/using-the-block-explorer/#transactions",
            "text": "This section lists all the transactions that were mined into this\nblock. Transactions are chosen from the network mempool in order of\nhighest fee first. All transactions in the block overview follow this\norder: Standard transactions (peer-to-peer transfer), proof-of-stake\nvotes, proof-of-stake ticket purchases. The following sections will\nreview each type of transaction.",
            "title": " Transactions"
        },
        {
            "location": "/getting-started/using-the-block-explorer/#standard-transactions",
            "text": "Here\u2019s the information included in standard Coolsnady transactions.     Option  Explanation      Size  The size of the transaction in bytes.    Fee rate  The rate of fees collected by the network (per kB).    Received Time  The time the network confirmed the transaction.    Mined Time  The time a miner included the transaction in a block.    Included in Block  The block number that the transaction became a part of.     Note  Received Time ,  Mined Time , and  Included in Block  will not have a value until a miner validates the transaction and includes it in a Coolsnady block. After being confirmed in a block, the transaction is considered complete.",
            "title": "Standard transactions"
        },
        {
            "location": "/getting-started/using-the-block-explorer/#ticket-purchases",
            "text": "For a ticket purchase (stake submission) there are a few differences\nfrom a standard transaction shown.  Note the difference under details: The word  Ticket  appears above the\nsender\u2019s wallet address on the left, and the words  Subsidy\nCommitment  appear on the right. This particular user purchased a\nstake ticket for 8.75411638 HC and received change in the amount\nof 7.15994209 HC. The address listed on the left under  Ticket  is\nthe address that contains the funds used to purchase this\nticket. The first output on the right is the address that retains\nvoting rights for this specific ticket. The second output,  Subsidy\nCommitment , is the address where the reward will go. This is not yet\nshown by the block explorer at this time. The third and final output\nis the address where change for this transaction will be sent.",
            "title": " Ticket purchases"
        },
        {
            "location": "/getting-started/using-the-block-explorer/#proof-of-stake-votes",
            "text": "Note the identifying terms in the details section:  Vote ,  Stake\nBase ,  Block Commitment , and  Vote Bits :  These keywords indicate that this transaction is a vote that was cast\nfrom a proof-of-stake ticket holder. In this particular example, the\nuser had previously purchased a ticket for 8.99472311 HC and was\nsent 10.82959184 HC after the vote was cast in this transaction.",
            "title": " Proof-of-stake votes"
        },
        {
            "location": "/getting-started/user-guides/agenda-voting/",
            "text": "Mainnet Voting Guide\n\u00b6\n\n\nThis guide was last updated on September 23, 2017.\n\n\nThis page is intended to give a brief introduction to how agenda voting works and details the process for setting your tickets to cast your preferred vote for any agenda.\n\n\n\n\nIntroduction\n\u00b6\n\n\nThere is a two-phase process for voting to implement consensus changes that would create a hard forking scenario.\n\n\nFirst, it\u2019s important to note that the Coolsnady blockchain has specifically designated two different block intervals for the voting process. There is a \nStake Version Interval\n (\nSVI\n) of 2016 blocks (~1 week) and a \nRule Change Interval\n (\nRCI\n) of 8064 blocks (~4 weeks). 4 Stake Version Intervals fit within 1 Rule Change Interval.\n\n\nThe first step of the voting process is to meet the upgrade threshold on the network. After the hard fork code is released (such as the sdiff algorithm change in v1.0.0), a majority of the nodes on the network participating in PoW/PoS need to first upgrade before the voting can be scheduled to begin. For Proof-of-Work, at least 95% of the 1000 most recent blocks must have the latest block version. For Proof-of-Stake, 75% of the votes cast within a single \nSVI\n must have the latest vote version. Once miner and voter upgrade thresholds are met, the voting is scheduled to begin on the first block of the next \nRCI\n (due to there being 4 \nSVI\ns per \nRCI\n, it can take up to 6048 blocks [3 \nSVI\ns] for the next \nRCI\n to begin).\n\n\nThe second step of this process is the actual voting. A single \nRCI\n transpires while a maximum of 40320 votes are cast. The votes are tallied at the final block of the \nRCI\n, and outcomes are determined prior to the next block being mined.\n\n\nThere are a few possible outcomes of a vote:\n\n\n\n\nIf more than 90% of all votes within the RCI are \u201cAbstain\u201d votes, the agenda vote remains active for the next RCI.\n\n\nIf all non-abstaining votes within the RCI fail to meet the 75% Yes or No majority threshold, the agenda vote remains active for next RCI.\n\n\nIf 75% of all non-abstaining votes within the RCI are in support of the agenda (\u201cYes\u201d), the agenda is considered locked in and the consensus changes will activate 8064 blocks after the vote passed.\n\n\nIf 75% of all non-abstaining votes within the RCI are in opposition of the agenda (\u201cNo\u201d), the agenda fails and the consensus changes will never activate.\n\n\nIf an agenda reaches its expiration before ever reaching a 75% majority vote, the agenda expires and the consensus changes will never activate.\n\n\n\n\nBelow is a diagram of the entire cycle for a single agenda with consensus upgrades.\n\n\n\n\n\n\nVoting Preparation\n\u00b6\n\n\nTo participate in voting, you first need a wallet. If you don\u2019t have one already, visit the \nBeginner Guide\n, choose a wallet, and follow the installation and setup guides.\n\n\nNext, you\u2019ll need to learn the basics of \nProof-of-Stake\n. You\u2019ll need to be able to \nbuy tickets\n with your application of choice.\n\n\nFinally, you\u2019ll need to learn how to set the \nvotechoice\n for your tickets in order to cast a \u201cYes\u201d, \u201cNo\u201d, or \u201cAbstain\u201d vote for an agenda. By default, your tickets will cast \u201cAbstain\u201d votes. To set your vote choice, see our quick \nHow To Vote\n.\n\n\n\n\nVerifying Your Vote\n\u00b6\n\n\nThe easiest method to track your how your tickets actually voted is to use the \nblock explorer\n to view each of your votes.\n\n\nThe block explorer has been updated to display \u201cYES\u201d, \u201cNO\u201d, and \u201cABSTAIN\u201d votes for each agenda with each ticket. The first and second tickets in the following example image voted \u201cABSTAIN\u201d for both agendas while the third ticket voted \u201cYES\u201d for both agendas. The image will be updated to reflect the v5 agenda when voting is live.\n\n\n\n\n\n\nTracking Vote Progress\n\u00b6\n\n\nvoting.decred.org\n is an official website set up to track the progress of upgrading and voting.\n\n\n\n\nVoting Archive\n\u00b6\n\n\nThis section provides an archive for previous votes along with their outcomes.\n\n\nV4\n\u00b6\n\n\nChange PoS Staking Algorithm\n\u00b6\n\n\nAgenda ID:\n  sdiffalgorithm\n\n\nChange stake difficulty algorithm as defined in DCP0001\n\n\nSpecifies a proposed replacement algorithm for determining the stake difficulty (commonly called the ticket price). This proposal resolves all issues with a new algorithm that adheres to the referenced ideals.\n\n\nVoting Results:\n\u00b6\n\n\n\n\n\n\n\n\nChoice\n\n\nResult\n\n\n\n\n\n\n\n\n\n\nNo\n\n\n2.07%\n\n\n\n\n\n\nYes\n\n\n97.92%\n\n\n\n\n\n\n\n\nLocked In:\n 141184\n\n\nActivated:\n 149248\n\n\nHard Forked:\n 149328\n\n\nStart Lightning Network Support\n\u00b6\n\n\nAgenda ID:\n  lnsupport\n\n\nRequest developers begin work on Lightning Network (LN) integration\n\n\nThe Lightning Network is the most directly useful application of smart contracts to date since it allows for off-chain transactions that optionally settle on-chain. This infrastructure has clear benefits for both scaling and privacy. Coolsnady is optimally positioned for this integration.\n\n\nVoting Results:\n\u00b6\n\n\n\n\n\n\n\n\nChoice\n\n\nResult\n\n\n\n\n\n\n\n\n\n\nNo\n\n\n1.38%\n\n\n\n\n\n\nYes\n\n\n98.61%\n\n\n\n\n\n\n\n\nLocked In:\n 141184\n\n\nActivated:\n 149248\n\n\nV5\n\u00b6\n\n\nActivation of new opcodes for Lightning Network Support\n\u00b6\n\n\nAgenda ID:\n lnfeatures\n\n\nEnable features defined in \nDCP0002\n and \nDCP0003\n necessary to support Lightning Network (LN)\n\n\nThe Lightning Network is the most directly useful application of smart contracts to date since it allows for off-chain transactions that optionally settle on-chain. This infrastructure has clear benefits for both scaling and privacy. Coolsnady is optimally positioned for this integration.\n\n\nBlock 205189 is the first block which contains the new opcode which was voted in via the lnfeatures vote and thus all old nodes must upgrade.\n\n\nVoting Results:\n\u00b6\n\n\n\n\n\n\n\n\nChoice\n\n\nResult\n\n\n\n\n\n\n\n\n\n\nNo\n\n\n0.49%\n\n\n\n\n\n\nYes\n\n\n99.51%\n\n\n\n\n\n\n\n\nLocked In:\n 181504\n\n\nActivated:\n 189568",
            "title": "Mainnet Voting"
        },
        {
            "location": "/getting-started/user-guides/agenda-voting/#mainnet-voting-guide",
            "text": "This guide was last updated on September 23, 2017.  This page is intended to give a brief introduction to how agenda voting works and details the process for setting your tickets to cast your preferred vote for any agenda.",
            "title": " Mainnet Voting Guide"
        },
        {
            "location": "/getting-started/user-guides/agenda-voting/#introduction",
            "text": "There is a two-phase process for voting to implement consensus changes that would create a hard forking scenario.  First, it\u2019s important to note that the Coolsnady blockchain has specifically designated two different block intervals for the voting process. There is a  Stake Version Interval  ( SVI ) of 2016 blocks (~1 week) and a  Rule Change Interval  ( RCI ) of 8064 blocks (~4 weeks). 4 Stake Version Intervals fit within 1 Rule Change Interval.  The first step of the voting process is to meet the upgrade threshold on the network. After the hard fork code is released (such as the sdiff algorithm change in v1.0.0), a majority of the nodes on the network participating in PoW/PoS need to first upgrade before the voting can be scheduled to begin. For Proof-of-Work, at least 95% of the 1000 most recent blocks must have the latest block version. For Proof-of-Stake, 75% of the votes cast within a single  SVI  must have the latest vote version. Once miner and voter upgrade thresholds are met, the voting is scheduled to begin on the first block of the next  RCI  (due to there being 4  SVI s per  RCI , it can take up to 6048 blocks [3  SVI s] for the next  RCI  to begin).  The second step of this process is the actual voting. A single  RCI  transpires while a maximum of 40320 votes are cast. The votes are tallied at the final block of the  RCI , and outcomes are determined prior to the next block being mined.  There are a few possible outcomes of a vote:   If more than 90% of all votes within the RCI are \u201cAbstain\u201d votes, the agenda vote remains active for the next RCI.  If all non-abstaining votes within the RCI fail to meet the 75% Yes or No majority threshold, the agenda vote remains active for next RCI.  If 75% of all non-abstaining votes within the RCI are in support of the agenda (\u201cYes\u201d), the agenda is considered locked in and the consensus changes will activate 8064 blocks after the vote passed.  If 75% of all non-abstaining votes within the RCI are in opposition of the agenda (\u201cNo\u201d), the agenda fails and the consensus changes will never activate.  If an agenda reaches its expiration before ever reaching a 75% majority vote, the agenda expires and the consensus changes will never activate.   Below is a diagram of the entire cycle for a single agenda with consensus upgrades.",
            "title": "Introduction"
        },
        {
            "location": "/getting-started/user-guides/agenda-voting/#voting-preparation",
            "text": "To participate in voting, you first need a wallet. If you don\u2019t have one already, visit the  Beginner Guide , choose a wallet, and follow the installation and setup guides.  Next, you\u2019ll need to learn the basics of  Proof-of-Stake . You\u2019ll need to be able to  buy tickets  with your application of choice.  Finally, you\u2019ll need to learn how to set the  votechoice  for your tickets in order to cast a \u201cYes\u201d, \u201cNo\u201d, or \u201cAbstain\u201d vote for an agenda. By default, your tickets will cast \u201cAbstain\u201d votes. To set your vote choice, see our quick  How To Vote .",
            "title": "Voting Preparation"
        },
        {
            "location": "/getting-started/user-guides/agenda-voting/#verifying-your-vote",
            "text": "The easiest method to track your how your tickets actually voted is to use the  block explorer  to view each of your votes.  The block explorer has been updated to display \u201cYES\u201d, \u201cNO\u201d, and \u201cABSTAIN\u201d votes for each agenda with each ticket. The first and second tickets in the following example image voted \u201cABSTAIN\u201d for both agendas while the third ticket voted \u201cYES\u201d for both agendas. The image will be updated to reflect the v5 agenda when voting is live.",
            "title": "Verifying Your Vote"
        },
        {
            "location": "/getting-started/user-guides/agenda-voting/#tracking-vote-progress",
            "text": "voting.decred.org  is an official website set up to track the progress of upgrading and voting.",
            "title": "Tracking Vote Progress"
        },
        {
            "location": "/getting-started/user-guides/agenda-voting/#voting-archive",
            "text": "This section provides an archive for previous votes along with their outcomes.",
            "title": "Voting Archive"
        },
        {
            "location": "/getting-started/user-guides/agenda-voting/#v4",
            "text": "",
            "title": "V4"
        },
        {
            "location": "/getting-started/user-guides/agenda-voting/#change-pos-staking-algorithm",
            "text": "Agenda ID:   sdiffalgorithm  Change stake difficulty algorithm as defined in DCP0001  Specifies a proposed replacement algorithm for determining the stake difficulty (commonly called the ticket price). This proposal resolves all issues with a new algorithm that adheres to the referenced ideals.",
            "title": "Change PoS Staking Algorithm"
        },
        {
            "location": "/getting-started/user-guides/agenda-voting/#voting-results",
            "text": "Choice  Result      No  2.07%    Yes  97.92%     Locked In:  141184  Activated:  149248  Hard Forked:  149328",
            "title": "Voting Results:"
        },
        {
            "location": "/getting-started/user-guides/agenda-voting/#start-lightning-network-support",
            "text": "Agenda ID:   lnsupport  Request developers begin work on Lightning Network (LN) integration  The Lightning Network is the most directly useful application of smart contracts to date since it allows for off-chain transactions that optionally settle on-chain. This infrastructure has clear benefits for both scaling and privacy. Coolsnady is optimally positioned for this integration.",
            "title": "Start Lightning Network Support"
        },
        {
            "location": "/getting-started/user-guides/agenda-voting/#voting-results_1",
            "text": "Choice  Result      No  1.38%    Yes  98.61%     Locked In:  141184  Activated:  149248",
            "title": "Voting Results:"
        },
        {
            "location": "/getting-started/user-guides/agenda-voting/#v5",
            "text": "",
            "title": "V5"
        },
        {
            "location": "/getting-started/user-guides/agenda-voting/#activation-of-new-opcodes-for-lightning-network-support",
            "text": "Agenda ID:  lnfeatures  Enable features defined in  DCP0002  and  DCP0003  necessary to support Lightning Network (LN)  The Lightning Network is the most directly useful application of smart contracts to date since it allows for off-chain transactions that optionally settle on-chain. This infrastructure has clear benefits for both scaling and privacy. Coolsnady is optimally positioned for this integration.  Block 205189 is the first block which contains the new opcode which was voted in via the lnfeatures vote and thus all old nodes must upgrade.",
            "title": "Activation of new opcodes for Lightning Network Support"
        },
        {
            "location": "/getting-started/user-guides/agenda-voting/#voting-results_2",
            "text": "Choice  Result      No  0.49%    Yes  99.51%     Locked In:  181504  Activated:  189568",
            "title": "Voting Results:"
        },
        {
            "location": "/getting-started/user-guides/how-to-vote/",
            "text": "How To Vote\n\u00b6\n\n\nThis guide assumes you already have an active wallet and have purchased tickets. If not, please follow the \nVoting Preperation\n guide.\n\n\nThe choice a ticket votes with depends on your vote preference at the time the ticket is chosen, not when it is bought. So you can set your choice at any time within the voting window and all future tickets will vote accordingly.\n\n\n \nStakepool Voting\n\u00b6\n\n\nIf your Stakepool has updated to the latest stakepool software, you will find a \u201cVoting\u201d page in the navigation menu with dropdown options for each agenda. After you\u2019ve chosen how you want your tickets to vote, simply press the \u201cUpdate Voting Preferences\u201d to save your votechoices. Below you\u2019ll find an image of the votechoices for vote version 5.\n\n\n\n\nYou can also update your voting preferences via Decrediton. Under the Tickets section, you\u2019ll find the option to set your vote. You must be using a stake pool to use this option.\n\n\n\n\n\n\n \nSolo Voting\n\u00b6\n\n\nI just want the commands!\n\u00b6\n\n\nYES\n\u00b6\n\n\nhcctl --wallet setvotechoice lnfeatures yes\n\n\nNO\n\u00b6\n\n\nhcctl --wallet setvotechoice lnfeatures no\n\n\n\n\nThrough the command line, you\u2019ll want to familiarize yourself with the \nhcctl --wallet getvotechoices\n and \nhcctl --wallet setvotechoice \"agendaid\" \"choiceid\"\n commands.\n\n\nThe first command, \nhcctl --wallet getvotechoices\n, returns JSON resembling this:\n\n\n{\n  \"version\": 5,\n  \"choices\": [\n    {\n      \"agendaid\": \"lnfeatures\",\n      \"agendadescription\": \"Enable features defined in DCP0002 and DCP0003 necessary to support Lightning Network (LN)\",\n      \"choiceid\": \"abstain\",\n      \"choicedescription\": \"change to the new consensus rules\"\n    }\n  ]\n}\n\n\n\n\nThe second command, \nhcctl --wallet setvotechoice \"agendaid\" \"choiceid\"\n, let\u2019s you set your votechoice. \n\"agendaid\"\n is found via the \ngetvotechoices\n command above, and \n\"choiceid\"\n can be \nyes\n, \nno\n, or \nabstain\n.\n\n\nFor example, issuing \nhcctl --wallet setvotechoice lnfeatures yes\n results in the following changes to \nhcctl --wallet getvotechoices\n:\n\n\n{\n  \"version\": 5,\n  \"choices\": [\n    {\n      \"agendaid\": \"lnfeatures\",\n      \"agendadescription\": \"Enable features defined in DCP0002 and DCP0003 necessary to support Lightning Network (LN)\",\n      \"choiceid\": \"yes\",\n      \"choicedescription\": \"change to the new consensus rules\"\n    }\n  ]\n}",
            "title": "How To Vote"
        },
        {
            "location": "/getting-started/user-guides/how-to-vote/#how-to-vote",
            "text": "This guide assumes you already have an active wallet and have purchased tickets. If not, please follow the  Voting Preperation  guide.  The choice a ticket votes with depends on your vote preference at the time the ticket is chosen, not when it is bought. So you can set your choice at any time within the voting window and all future tickets will vote accordingly.",
            "title": " How To Vote"
        },
        {
            "location": "/getting-started/user-guides/how-to-vote/#stakepool-voting",
            "text": "If your Stakepool has updated to the latest stakepool software, you will find a \u201cVoting\u201d page in the navigation menu with dropdown options for each agenda. After you\u2019ve chosen how you want your tickets to vote, simply press the \u201cUpdate Voting Preferences\u201d to save your votechoices. Below you\u2019ll find an image of the votechoices for vote version 5.   You can also update your voting preferences via Decrediton. Under the Tickets section, you\u2019ll find the option to set your vote. You must be using a stake pool to use this option.",
            "title": " Stakepool Voting"
        },
        {
            "location": "/getting-started/user-guides/how-to-vote/#solo-voting",
            "text": "",
            "title": " Solo Voting"
        },
        {
            "location": "/getting-started/user-guides/how-to-vote/#i-just-want-the-commands",
            "text": "",
            "title": "I just want the commands!"
        },
        {
            "location": "/getting-started/user-guides/how-to-vote/#yes",
            "text": "hcctl --wallet setvotechoice lnfeatures yes",
            "title": "YES"
        },
        {
            "location": "/getting-started/user-guides/how-to-vote/#no",
            "text": "hcctl --wallet setvotechoice lnfeatures no   Through the command line, you\u2019ll want to familiarize yourself with the  hcctl --wallet getvotechoices  and  hcctl --wallet setvotechoice \"agendaid\" \"choiceid\"  commands.  The first command,  hcctl --wallet getvotechoices , returns JSON resembling this:  {\n  \"version\": 5,\n  \"choices\": [\n    {\n      \"agendaid\": \"lnfeatures\",\n      \"agendadescription\": \"Enable features defined in DCP0002 and DCP0003 necessary to support Lightning Network (LN)\",\n      \"choiceid\": \"abstain\",\n      \"choicedescription\": \"change to the new consensus rules\"\n    }\n  ]\n}  The second command,  hcctl --wallet setvotechoice \"agendaid\" \"choiceid\" , let\u2019s you set your votechoice.  \"agendaid\"  is found via the  getvotechoices  command above, and  \"choiceid\"  can be  yes ,  no , or  abstain .  For example, issuing  hcctl --wallet setvotechoice lnfeatures yes  results in the following changes to  hcctl --wallet getvotechoices :  {\n  \"version\": 5,\n  \"choices\": [\n    {\n      \"agendaid\": \"lnfeatures\",\n      \"agendadescription\": \"Enable features defined in DCP0002 and DCP0003 necessary to support Lightning Network (LN)\",\n      \"choiceid\": \"yes\",\n      \"choicedescription\": \"change to the new consensus rules\"\n    }\n  ]\n}",
            "title": "NO"
        },
        {
            "location": "/getting-started/using-testnet/",
            "text": "Using Testnet Guide\n\u00b6\n\n\nlast updated for testnet2\n\n\n\n\nWhy Use Testnet?\n\u00b6\n\n\nThe testnet is a wonderful place where you can experiment with the Coolsnady applications without worrying that a mistake will cost you real money. It is actually recommended that people use the testnet to learn the basics of the Coolsnady software and any new features.\n\n\nCoolsnady is currently on its 2nd Testnet, also known as testnet2. Testnets are periodically reset to help keep a manageable blockchain file size. \n\n\n\n\nHow to Run a Testnet Node\n\u00b6\n\n\nRunning a testnet2 node is incredibly easy. You application of choice will need to download the testnet2 blockchain, and you will need to create a new wallet file for testnet2 use. Your mainnet blockchain and wallet files will remain untouched. Switching between the two is incredibly easy.\n\n\n\n\nhcgui\n\u00b6\n\n\nYou can switch hcgui between mainnet and testnet by editing the config.json file and setting network: testnet. Config.json can be located in the following folders:\n\n\n\n\n\n\n\n\nOS\n\n\nhcgui data directory\n\n\n\n\n\n\n\n\n\n\nWindows\n\n\n%LOCALAPPDATA%\\hcgui\n\n\n\n\n\n\nmacOS\n\n\n~/Library/Application Support/hcgui\n\n\n\n\n\n\nLinux\n\n\n~/.config/hcgui\n\n\n\n\n\n\n\n\n\n\nCommand-Line Suite\n\u00b6\n\n\nTo launch \nhcd\n and \nhcwallet\n on testnet, simply add the \n--testnet\n flag to your launch command. Alternatively, you could put \ntestnet=1\n in all of your config files, but it\u2019s usually much faster to use the startup flag.\n\n\nOn the first launch of \nhcd --testnet\n, \nhcd\n will begin downloading the testnet2 blockchain to the \ndata/testnet2\n folder of \nhcd\n\u2018s home directory.\n\n\nBefore you\u2019re able to launch \nhcwallet\n with the \n--testnet\n flag, you must create a separate testnet wallet using the \nhcwallet --testnet --create\n command. The steps are the same as those found in the \nhcwallet Setup Guide\n. \n\n\nTo issue commands to both \nhcwallet\n and \nhcd\n, you must also add the \n--testnet\n flag to any of the \nhcctl\n commands that you use. E.g. you would issue the \nhcctl --testnet --wallet getbalance\n command to check your testnet balance. \n\n\n\n\nAcquiring Testnet Coins\n\u00b6\n\n\nYou can acquire coins through the \nCoolsnady Testnet Faucet\n. Please return any coins to the address listed at the bottom of that page when you\u2019re done playing with the testnet.",
            "title": "Using Testnet"
        },
        {
            "location": "/getting-started/using-testnet/#using-testnet-guide",
            "text": "last updated for testnet2",
            "title": "Using Testnet Guide"
        },
        {
            "location": "/getting-started/using-testnet/#why-use-testnet",
            "text": "The testnet is a wonderful place where you can experiment with the Coolsnady applications without worrying that a mistake will cost you real money. It is actually recommended that people use the testnet to learn the basics of the Coolsnady software and any new features.  Coolsnady is currently on its 2nd Testnet, also known as testnet2. Testnets are periodically reset to help keep a manageable blockchain file size.",
            "title": "Why Use Testnet?"
        },
        {
            "location": "/getting-started/using-testnet/#how-to-run-a-testnet-node",
            "text": "Running a testnet2 node is incredibly easy. You application of choice will need to download the testnet2 blockchain, and you will need to create a new wallet file for testnet2 use. Your mainnet blockchain and wallet files will remain untouched. Switching between the two is incredibly easy.",
            "title": "How to Run a Testnet Node"
        },
        {
            "location": "/getting-started/using-testnet/#hcgui",
            "text": "You can switch hcgui between mainnet and testnet by editing the config.json file and setting network: testnet. Config.json can be located in the following folders:     OS  hcgui data directory      Windows  %LOCALAPPDATA%\\hcgui    macOS  ~/Library/Application Support/hcgui    Linux  ~/.config/hcgui",
            "title": "hcgui"
        },
        {
            "location": "/getting-started/using-testnet/#command-line-suite",
            "text": "To launch  hcd  and  hcwallet  on testnet, simply add the  --testnet  flag to your launch command. Alternatively, you could put  testnet=1  in all of your config files, but it\u2019s usually much faster to use the startup flag.  On the first launch of  hcd --testnet ,  hcd  will begin downloading the testnet2 blockchain to the  data/testnet2  folder of  hcd \u2018s home directory.  Before you\u2019re able to launch  hcwallet  with the  --testnet  flag, you must create a separate testnet wallet using the  hcwallet --testnet --create  command. The steps are the same as those found in the  hcwallet Setup Guide .   To issue commands to both  hcwallet  and  hcd , you must also add the  --testnet  flag to any of the  hcctl  commands that you use. E.g. you would issue the  hcctl --testnet --wallet getbalance  command to check your testnet balance.",
            "title": "Command-Line Suite"
        },
        {
            "location": "/getting-started/using-testnet/#acquiring-testnet-coins",
            "text": "You can acquire coins through the  Coolsnady Testnet Faucet . Please return any coins to the address listed at the bottom of that page when you\u2019re done playing with the testnet.",
            "title": "Acquiring Testnet Coins"
        },
        {
            "location": "/getting-started/constitution/",
            "text": "Coolsnady Constitution\n\u00b6\n\n\n\n\nCoolsnady\n  is an open, progressive, and self-funding cryptocurrency with a system of community-based governance integrated into its blockchain. The project mission is to develop technology for the public benefit, with a primary focus on cryptocurrency technology. \nCoolsnady\n, as a currency and as a project, is bound by the following set of rules, which include guiding principles, a system of governance, and a funding mechanism. These rules have been established in an effort to create an equitable and sustainable framework within which to achieve \nCoolsnady\n\u2018s goals.\n\n\n\n\nPrinciples\n\u00b6\n\n\n\n\nFree and Open-Source Software\n - All software developed as part of \nCoolsnady\n shall be free and open source-software.\n\n\nFree Speech and Consideration\n - Everyone has the right to communicate opinions and ideas without fear of censorship. Consideration shall be given to all constructive speech that is based in fact and reason.\n\n\nMulti-Stakeholder Inclusivity\n - Inclusivity represents a multi-stakeholder system and an active effort shall be maintained to include a diverse set of views and users. While it would be ideal to include everyone, \nCoolsnady\n shall comply with all relevant bodies of law in the jurisdictions where applicable, such as embargoes and other trade sanctions.\n\n\nIncremental Privacy and Security\n - Privacy and security are priorities and shall be balanced with the complexity of their implementations. Additional privacy and security technology shall be implemented on a continuing and incremental basis, both proactively and on-demand in response to attacks.\n\n\nFixed Finite Supply\n - Issuance is finite and the total maximum number of coins in \nCoolsnady\n shall not change. The total maximum supply for \nCoolsnady\n is 20,999,999.99800912 coins, with a per-block subsidy that adjusts every 6,144 blocks (approximately 21.33 days) by reducing by a factor of 100/101. The genesis block subsidy starts at 31.19582664 coins.\n\n\nUniversal Fungibility\n - Universal fungibility is fundamental to \nCoolsnady\n being a store of value and attacks against it shall be actively monitored and countermeasures pursued as necessary.\n\n\n\n\n\n\nBlockchain Governance\n\u00b6\n\n\n\n\nGovernance of the network occurs directly through the blockchain via hybridization of a block\u2019s proof-of-work (\u201cPoW\u201d) with its proof-of-stake (\u201cPoS\u201d). PoS contributors, known as stakeholders, can effectively override PoW contributors, known as miners, if 60% or more of the stakeholders vote against a particular block created by a miner.\n\n\nA lottery system is used to determine which stakeholders vote on each block and collect a subsidy.\n\n\nTo be a stakeholder, one must purchase one or more tickets, which entails locking a specified amount of coins for approximately 1 day (256 blocks).\n\n\nAfter waiting for the ticket to mature, the ticket is entered into a lottery that runs once per block where the winning tickets gain the ability to vote on the previous block.\n\n\nStakeholders must wait an average of 28 days (8,192 blocks) to vote their tickets, and during this time the coins used to purchase the ticket remain locked. The wait may be much longer or shorter than the average of 28 days because the ticket selection process is pseudorandom. Tickets expire after approximately 142 days (40,960 blocks).\n\n\nStakeholder votes recorded in the blockchain are rewarded with 6% of each block subsidy, and each block can have up to 5 votes for a total of 30% of each block subsidy.\n\n\nPoW receives 60% of each block subsidy, subject to the constraint that their subsidy scales linearly with the number of PoS votes included, e.g. including 3 of 5 votes reduces PoW subsidy to 60% of the maximum.\n\n\nThe votes themselves decide by majority decision whether the general transaction tree of the previous block, including the PoW subsidy, is valid. Thus, if PoS voters vote against a particular PoW block, it destroys the PoW subsidy (and development subsidy) and invalidates any regular transactions within that block.\n\n\nAdditional vote bits may be set when stakeholders submit votes, allowing stakeholders to vote on matters besides the previous block.\n\n\n\n\n\n\nProject Governance\n\u00b6\n\n\n\n\nOff-chain decision-making shall be used to resolve disputes related to development and voted on by the \nCoolsnady Assembly\n as they arise, as an effective proof-of-assembly (\u201cPoA\u201d), until such time PoA is integrated into the blockchain.\n\n\nThe \nCoolsnady Assembly\n shall be composed of diverse Assembly members who are selected for membership by the \nAdmission Council\n from the project ecosystem for representation.\n\n\nCouncils that are composed of Assembly members shall be formed to address ongoing and episodic matters. The initial Councils shall serve the separate functions of admission (\nAdmission Council\n), creation (\nCreation Council\n), and attrition (\nAttrition Council\n).\n\n\nThe \nAdmission Council\n shall vote on the inclusion of new members into the Assembly. All additional Councils shall be created by the \nCreation Council\n. The \nAttrition Council\n shall be responsible for deactivating both Councils and Assembly members as necessary.\n\n\nMembership of the \nCoolsnady Assembly\n shall consist of Assembly members who have been confirmed by a 60% or greater affirmative vote by the \nAdmission Council\n. There is no restriction on the age or nationality of Assembly members, the only requirement is that of merit as judged by the \nAdmission Council\n. Merit is judged on the basis of two characteristics: (1) the amount of time over which one has been involved with the project, and (2) one\u2019s body of work and its impact in the context of the project.\n\n\nAttrition is embraced by temporarily deactivating or actively expelling Assembly members by a 60% or greater affirmative vote by the \nAttrition Council\n on the basis of: (1) substantial non-fulfillment of duties for one or more Councils or the Assembly, and/or (2) counterproductive behaviour that goes against the framework set forth in the Constitution without constructive action toward solutions.\n\n\nAll matters formally presented to a Council shall be resolved by a vote in 365 days or less.\n\n\n\n\n\n\nFunding\n\u00b6\n\n\n\n\nSustainability and longevity require that a subsidy of 10% of all block rewards be given to a development organization on an ongoing basis. The initial development organization shall be \nCoolsnady Holdings Group\n LLC (\u201cDHG\u201d), a Nevis LLC that is responsible for funding work related to the development of the project, such as software development, infrastructure, and awareness.\n\n\nDHG shall only fund work that adheres to the guiding principles.\n\n\nDHG shall issue public financial statements every six months, starting March 8th, 2016. The frequency of financial statements may increase with activity, but it shall not occur more often than quarterly.\n\n\nDHG shall put forth a budget proposal each year on March 8th, after the corresponding public financial statement has been issued.\n\n\nThe \nFunding Council\n shall review, propose changes, make changes, and ultimately approve the proposal by April 8th, one month from the initial budget proposal.\n\n\nFinal approval of the budget via PoA vote shall occur after \nFunding Council\n approval by April 18th, two months from the initial proposal.\n\n\nDHG shall make public requests for proposals (\u201cRFPs\u201d) for projects that are to be completed by parties on a contractual basis. RFPs shall include a scope and an explanation of how the work shall benefit the project. Parties that submit proposals shall be required to include: (1) a detailed description of the work to be performed, (2) a series of milestones that can be verified as work is completed, and (3) a quote for the work, itemized by milestone, in U.S. Dollars (\u201cUSD\u201d).\n\n\nAll proposals, both submitted and accepted, shall be made public one week after a proposal has been selected. Once the selection occurs, the associated RFP shall be removed. Contracted parties shall be paid exclusively in \nCoolsnady\n (\u201chc\u201d) at the current effective hc/USD rate at the time of payment, unless specifically noted otherwise.\n\n\nIn the future, the development organization may need to change from DHG to another entity that serves an identical function. If and when this occurs, DHG shall transfer all assets to the new entity and the development subsidy shall be directed to the new entity.",
            "title": "Coolsnady Constitution"
        },
        {
            "location": "/getting-started/constitution/#coolsnady-constitution",
            "text": "Coolsnady   is an open, progressive, and self-funding cryptocurrency with a system of community-based governance integrated into its blockchain. The project mission is to develop technology for the public benefit, with a primary focus on cryptocurrency technology.  Coolsnady , as a currency and as a project, is bound by the following set of rules, which include guiding principles, a system of governance, and a funding mechanism. These rules have been established in an effort to create an equitable and sustainable framework within which to achieve  Coolsnady \u2018s goals.",
            "title": " Coolsnady Constitution"
        },
        {
            "location": "/getting-started/constitution/#principles",
            "text": "Free and Open-Source Software  - All software developed as part of  Coolsnady  shall be free and open source-software.  Free Speech and Consideration  - Everyone has the right to communicate opinions and ideas without fear of censorship. Consideration shall be given to all constructive speech that is based in fact and reason.  Multi-Stakeholder Inclusivity  - Inclusivity represents a multi-stakeholder system and an active effort shall be maintained to include a diverse set of views and users. While it would be ideal to include everyone,  Coolsnady  shall comply with all relevant bodies of law in the jurisdictions where applicable, such as embargoes and other trade sanctions.  Incremental Privacy and Security  - Privacy and security are priorities and shall be balanced with the complexity of their implementations. Additional privacy and security technology shall be implemented on a continuing and incremental basis, both proactively and on-demand in response to attacks.  Fixed Finite Supply  - Issuance is finite and the total maximum number of coins in  Coolsnady  shall not change. The total maximum supply for  Coolsnady  is 20,999,999.99800912 coins, with a per-block subsidy that adjusts every 6,144 blocks (approximately 21.33 days) by reducing by a factor of 100/101. The genesis block subsidy starts at 31.19582664 coins.  Universal Fungibility  - Universal fungibility is fundamental to  Coolsnady  being a store of value and attacks against it shall be actively monitored and countermeasures pursued as necessary.",
            "title": "Principles"
        },
        {
            "location": "/getting-started/constitution/#blockchain-governance",
            "text": "Governance of the network occurs directly through the blockchain via hybridization of a block\u2019s proof-of-work (\u201cPoW\u201d) with its proof-of-stake (\u201cPoS\u201d). PoS contributors, known as stakeholders, can effectively override PoW contributors, known as miners, if 60% or more of the stakeholders vote against a particular block created by a miner.  A lottery system is used to determine which stakeholders vote on each block and collect a subsidy.  To be a stakeholder, one must purchase one or more tickets, which entails locking a specified amount of coins for approximately 1 day (256 blocks).  After waiting for the ticket to mature, the ticket is entered into a lottery that runs once per block where the winning tickets gain the ability to vote on the previous block.  Stakeholders must wait an average of 28 days (8,192 blocks) to vote their tickets, and during this time the coins used to purchase the ticket remain locked. The wait may be much longer or shorter than the average of 28 days because the ticket selection process is pseudorandom. Tickets expire after approximately 142 days (40,960 blocks).  Stakeholder votes recorded in the blockchain are rewarded with 6% of each block subsidy, and each block can have up to 5 votes for a total of 30% of each block subsidy.  PoW receives 60% of each block subsidy, subject to the constraint that their subsidy scales linearly with the number of PoS votes included, e.g. including 3 of 5 votes reduces PoW subsidy to 60% of the maximum.  The votes themselves decide by majority decision whether the general transaction tree of the previous block, including the PoW subsidy, is valid. Thus, if PoS voters vote against a particular PoW block, it destroys the PoW subsidy (and development subsidy) and invalidates any regular transactions within that block.  Additional vote bits may be set when stakeholders submit votes, allowing stakeholders to vote on matters besides the previous block.",
            "title": "Blockchain Governance"
        },
        {
            "location": "/getting-started/constitution/#project-governance",
            "text": "Off-chain decision-making shall be used to resolve disputes related to development and voted on by the  Coolsnady Assembly  as they arise, as an effective proof-of-assembly (\u201cPoA\u201d), until such time PoA is integrated into the blockchain.  The  Coolsnady Assembly  shall be composed of diverse Assembly members who are selected for membership by the  Admission Council  from the project ecosystem for representation.  Councils that are composed of Assembly members shall be formed to address ongoing and episodic matters. The initial Councils shall serve the separate functions of admission ( Admission Council ), creation ( Creation Council ), and attrition ( Attrition Council ).  The  Admission Council  shall vote on the inclusion of new members into the Assembly. All additional Councils shall be created by the  Creation Council . The  Attrition Council  shall be responsible for deactivating both Councils and Assembly members as necessary.  Membership of the  Coolsnady Assembly  shall consist of Assembly members who have been confirmed by a 60% or greater affirmative vote by the  Admission Council . There is no restriction on the age or nationality of Assembly members, the only requirement is that of merit as judged by the  Admission Council . Merit is judged on the basis of two characteristics: (1) the amount of time over which one has been involved with the project, and (2) one\u2019s body of work and its impact in the context of the project.  Attrition is embraced by temporarily deactivating or actively expelling Assembly members by a 60% or greater affirmative vote by the  Attrition Council  on the basis of: (1) substantial non-fulfillment of duties for one or more Councils or the Assembly, and/or (2) counterproductive behaviour that goes against the framework set forth in the Constitution without constructive action toward solutions.  All matters formally presented to a Council shall be resolved by a vote in 365 days or less.",
            "title": "Project Governance"
        },
        {
            "location": "/getting-started/constitution/#funding",
            "text": "Sustainability and longevity require that a subsidy of 10% of all block rewards be given to a development organization on an ongoing basis. The initial development organization shall be  Coolsnady Holdings Group  LLC (\u201cDHG\u201d), a Nevis LLC that is responsible for funding work related to the development of the project, such as software development, infrastructure, and awareness.  DHG shall only fund work that adheres to the guiding principles.  DHG shall issue public financial statements every six months, starting March 8th, 2016. The frequency of financial statements may increase with activity, but it shall not occur more often than quarterly.  DHG shall put forth a budget proposal each year on March 8th, after the corresponding public financial statement has been issued.  The  Funding Council  shall review, propose changes, make changes, and ultimately approve the proposal by April 8th, one month from the initial budget proposal.  Final approval of the budget via PoA vote shall occur after  Funding Council  approval by April 18th, two months from the initial proposal.  DHG shall make public requests for proposals (\u201cRFPs\u201d) for projects that are to be completed by parties on a contractual basis. RFPs shall include a scope and an explanation of how the work shall benefit the project. Parties that submit proposals shall be required to include: (1) a detailed description of the work to be performed, (2) a series of milestones that can be verified as work is completed, and (3) a quote for the work, itemized by milestone, in U.S. Dollars (\u201cUSD\u201d).  All proposals, both submitted and accepted, shall be made public one week after a proposal has been selected. Once the selection occurs, the associated RFP shall be removed. Contracted parties shall be paid exclusively in  Coolsnady  (\u201chc\u201d) at the current effective hc/USD rate at the time of payment, unless specifically noted otherwise.  In the future, the development organization may need to change from DHG to another entity that serves an identical function. If and when this occurs, DHG shall transfer all assets to the new entity and the development subsidy shall be directed to the new entity.",
            "title": "Funding"
        },
        {
            "location": "/getting-started/user-guides/hcgui-setup/",
            "text": "hcgui Setup Guide\n\u00b6\n\n\nLast updated for v2.0.0.\n\n\n\n\nhcgui\n is a graphical user interface for \nhcwallet\n. When this application launches, it automatically starts its own instance of the command line tools \nhcd\n and \nhcwallet\n in the background.\n\n\n\n\nBlockchain Download\n\n\nhcgui needs to download a full copy of the Decred blockchain before it can be used. This means that a large download must be completed and a large amount of storage space must be be available on the PC where hcgui is intalled.\n\n\nAt the end of May 2018 the Decred blockchain was 3.3GB.\n\n\n\n\n\n\nDownload and Install\n\u00b6\n\n\nThe latest version of hcgui can be downloaded from \nhttps://decred.org/downloads/\n.\n\n\n\n\nWindows\n\n\n\n\n\n\n\n\nDownload the Windows installer \nhcgui-v2.0.0.exe\n.\n\n\n\n\n\n\nDouble click the installer and follow the instructions. This will install and automatically start up hcgui to download the Decred blockchain and set up your wallet.\n\n\n\n\n\n\nThe installer adds a shortcut to hcgui on your desktop for next time you want to use it.\n\n\n\n\n\n\n\n\nmacOS\n\n\n\n\n\n\n\n\nDownload the \nhcgui-v2.0.0.dmg\n file.\n\n\n\n\n\n\nDouble click the \nhcgui-v2.0.0.dmg\n file once downloaded to mount the disk image.\n\n\n\n\n\n\nDrag the hcgui.app into the link to your Applications folder within the disk image.\n\n\n\n\n\n\n\n\nLinux\n\n\n\n\n\n\n\n\nDownload the \nhcgui-v2.0.0.tar.gz\n file.\n\n\n\n\n\n\nNavigate to download location and extract the .tar.gz file:\n\n\nUbuntu File Browser: simply right click on the .tar.gz file and select \u201cExtract Here\u201d. \n\nTerminal: use the \ntar -xvzf filename.tar.gz\n command.\n\n\nBoth of these should extract the tar.gz into a folder that shares the same name. (\ne.g. tar -xvzf hcgui-v2.0.0.tar.gz\n should extract to \nhcgui-v2.0.0\n). If successful, this new folder should include a \nhcgui\n executable.\n\n\n\n\n\n\n\n\nOpen and Set Up hcgui\n\u00b6\n\n\nOpening hcgui for the first time will display the following screen:\n\n\n\n\nSelect your desired language and press \nContinue\n. A short presentation explaining Decred blockchain, wallet, keys, staking/governance, and safety tips is shown. Please read these slides carefully if you are new to Decred.\n\n\nThe following screen should be displayed next.\n\n\n\n\nA large progress bar on this screen shows the progress of the blockchain download. You can begin to set up your wallet before the download completes. \n\n\n\n\nPausing the download\n\n\nIf you close hcgui or shutdown your PC while the download is in progress, the download will be paused and progress will not be lost. It will be resumed from the same point next time hcgui is started.\n\n\nThis means you can download the blockchain in multiple sessions if required.\n\n\n\n\nAs hcgui allows you to manage multiple wallets on one PC, you must give a name to your wallet so it can be identified. Enter a name and press the \nCreate New Wallet\n button. You will now be faced with two options: \n\n\n\n\n\n\nCreate a New Wallet\n - Press this button if this is your first time using Decred.\n\n\n\n\n\n\nRestore Existing Wallet\n - Press this button if you already have a wallet seed. You can skip ahead to \nRestore Existing Wallet From Seed\n\n\n\n\n\n\n\n\n\n\nCreate a New Wallet\n\u00b6\n\n\n\n\nCritical Information\n\n\nDuring the creation process for your wallet, you will be given a sequence of 33 words known as a seed phrase. This seed phrase is essentially the private key for your wallet. You will be able to use this seed phrase to restore your private keys, transaction history, and balances using any Decred wallet on any computer.\n\n\nThis ultimately means that \nanyone\n who knows your seed can use it to restore your private keys, transaction history, and balances to a Decred wallet on their computer without your knowledge. For this reason, it is of utmost importance to keep your seed phrase safe. Treat this seed the same way you would treat a physical key to a safe. If you lose your seed phrase, you permanently lose access to your wallet and all funds within it. It cannot be recovered by anyone, including the Decred developers. It is recommended you write it down on paper and store that somewhere secure. If you decide to keep it on your computer, it would be best to keep it in an encrypted document (do not forget the password) in case the file or your computer is stolen.\n\n\nEvery seed phrase is also associated with a 64 character seed hex. The seed hex functions the same way as the seed phrase - \nhcwallet\n will accept it when attempting to restore your wallet. It is also important to keep your seed hex secure.\n\n\nREMINDER: DO NOT, UNDER ANY CIRCUMSTANCES, GIVE YOUR SEED OR THE ASSOCIATED HEX KEY TO ANYONE! NOT EVEN THE DEVELOPERS!\n\n\n\n\nThe 33 word seed for your new wallet is displayed on the screen (obscured in the below image). Record the seed and store it somewhere safe.\n\n\n\n\nPress \nContinue\n and re-enter the missing words from your seed on the next screen. This is to confirm you have recorded your seed correctly.\n\n\n\n\nCreate a private passphrase for your wallet. This passphrase will be used to unlock your wallet when creating transactions.\n\n\nPress \nCreate Wallet\n and your wallet setup is complete. You will be taken back to the blockchain download progress bar. Once the download has been completed, hcgui will open the Overview page for your new wallet and you will be able to begin sending and receiving Decred.\n\n\n\n\nRestore Existing Wallet From Seed\n\u00b6\n\n\n\n\n\n\nIf you already have a wallet seed you can use it by clicking on the \nExisting Seed\n button.\n\n\n\n\n\n\nEnter your seed into the \nConfirm Seed\n text box.\n\n\n\n\n\n\nCreate a private passphrase for your wallet.\n\n\n\n\n\n\nSelect \nCreate Wallet\n. Wait for the blockchain to be scanned.\n\n\n\n\n\n\n\n\nTroubleshooting\n\u00b6\n\n\nhcgui will not start!\n\n\nhcd closed due to an error. Check hcd logs\nand contact support if the issue persists.\n\n\n\n\nIf you encounter the above error, it could be because there is already a running instance of \nhcd\n on your machine. hcgui attempts to start its own instance of \nhcd\n and \nhcwallet\n in the background.\n\n\nYou could possibly resolve this by killing any any running \nhcd\n processes prior to restarting hcgui.\n\n\nWhere does hcgui store data/write log files?\n\n\nhcgui stores the blockchain, your wallet, log files and its own configuration files all in a single directory. A different directory is used depending on the operating system:\n\n\n\n\n\n\n\n\nOS\n\n\nhcgui data directory\n\n\n\n\n\n\n\n\n\n\nWindows\n\n\n%LOCALAPPDATA%\\hcgui\\\n\n\n\n\n\n\nmacOS\n\n\n~/Library/Application Support/hcgui/\n\n\n\n\n\n\nLinux\n\n\n~/.config/hcgui/",
            "title": "hcgui Setup"
        },
        {
            "location": "/getting-started/user-guides/hcgui-setup/#hcgui-setup-guide",
            "text": "Last updated for v2.0.0.   hcgui  is a graphical user interface for  hcwallet . When this application launches, it automatically starts its own instance of the command line tools  hcd  and  hcwallet  in the background.   Blockchain Download  hcgui needs to download a full copy of the Decred blockchain before it can be used. This means that a large download must be completed and a large amount of storage space must be be available on the PC where hcgui is intalled.  At the end of May 2018 the Decred blockchain was 3.3GB.",
            "title": " hcgui Setup Guide"
        },
        {
            "location": "/getting-started/user-guides/hcgui-setup/#download-and-install",
            "text": "The latest version of hcgui can be downloaded from  https://decred.org/downloads/ .   Windows     Download the Windows installer  hcgui-v2.0.0.exe .    Double click the installer and follow the instructions. This will install and automatically start up hcgui to download the Decred blockchain and set up your wallet.    The installer adds a shortcut to hcgui on your desktop for next time you want to use it.     macOS     Download the  hcgui-v2.0.0.dmg  file.    Double click the  hcgui-v2.0.0.dmg  file once downloaded to mount the disk image.    Drag the hcgui.app into the link to your Applications folder within the disk image.     Linux     Download the  hcgui-v2.0.0.tar.gz  file.    Navigate to download location and extract the .tar.gz file:  Ubuntu File Browser: simply right click on the .tar.gz file and select \u201cExtract Here\u201d.  \nTerminal: use the  tar -xvzf filename.tar.gz  command.  Both of these should extract the tar.gz into a folder that shares the same name. ( e.g. tar -xvzf hcgui-v2.0.0.tar.gz  should extract to  hcgui-v2.0.0 ). If successful, this new folder should include a  hcgui  executable.",
            "title": "Download and Install"
        },
        {
            "location": "/getting-started/user-guides/hcgui-setup/#open-and-set-up-hcgui",
            "text": "Opening hcgui for the first time will display the following screen:   Select your desired language and press  Continue . A short presentation explaining Decred blockchain, wallet, keys, staking/governance, and safety tips is shown. Please read these slides carefully if you are new to Decred.  The following screen should be displayed next.   A large progress bar on this screen shows the progress of the blockchain download. You can begin to set up your wallet before the download completes.    Pausing the download  If you close hcgui or shutdown your PC while the download is in progress, the download will be paused and progress will not be lost. It will be resumed from the same point next time hcgui is started.  This means you can download the blockchain in multiple sessions if required.   As hcgui allows you to manage multiple wallets on one PC, you must give a name to your wallet so it can be identified. Enter a name and press the  Create New Wallet  button. You will now be faced with two options:     Create a New Wallet  - Press this button if this is your first time using Decred.    Restore Existing Wallet  - Press this button if you already have a wallet seed. You can skip ahead to  Restore Existing Wallet From Seed",
            "title": "Open and Set Up hcgui"
        },
        {
            "location": "/getting-started/user-guides/hcgui-setup/#create-a-new-wallet",
            "text": "Critical Information  During the creation process for your wallet, you will be given a sequence of 33 words known as a seed phrase. This seed phrase is essentially the private key for your wallet. You will be able to use this seed phrase to restore your private keys, transaction history, and balances using any Decred wallet on any computer.  This ultimately means that  anyone  who knows your seed can use it to restore your private keys, transaction history, and balances to a Decred wallet on their computer without your knowledge. For this reason, it is of utmost importance to keep your seed phrase safe. Treat this seed the same way you would treat a physical key to a safe. If you lose your seed phrase, you permanently lose access to your wallet and all funds within it. It cannot be recovered by anyone, including the Decred developers. It is recommended you write it down on paper and store that somewhere secure. If you decide to keep it on your computer, it would be best to keep it in an encrypted document (do not forget the password) in case the file or your computer is stolen.  Every seed phrase is also associated with a 64 character seed hex. The seed hex functions the same way as the seed phrase -  hcwallet  will accept it when attempting to restore your wallet. It is also important to keep your seed hex secure.  REMINDER: DO NOT, UNDER ANY CIRCUMSTANCES, GIVE YOUR SEED OR THE ASSOCIATED HEX KEY TO ANYONE! NOT EVEN THE DEVELOPERS!   The 33 word seed for your new wallet is displayed on the screen (obscured in the below image). Record the seed and store it somewhere safe.   Press  Continue  and re-enter the missing words from your seed on the next screen. This is to confirm you have recorded your seed correctly.   Create a private passphrase for your wallet. This passphrase will be used to unlock your wallet when creating transactions.  Press  Create Wallet  and your wallet setup is complete. You will be taken back to the blockchain download progress bar. Once the download has been completed, hcgui will open the Overview page for your new wallet and you will be able to begin sending and receiving Decred.",
            "title": "Create a New Wallet"
        },
        {
            "location": "/getting-started/user-guides/hcgui-setup/#restore-existing-wallet-from-seed",
            "text": "If you already have a wallet seed you can use it by clicking on the  Existing Seed  button.    Enter your seed into the  Confirm Seed  text box.    Create a private passphrase for your wallet.    Select  Create Wallet . Wait for the blockchain to be scanned.",
            "title": "Restore Existing Wallet From Seed"
        },
        {
            "location": "/getting-started/user-guides/hcgui-setup/#troubleshooting",
            "text": "hcgui will not start!  hcd closed due to an error. Check hcd logs\nand contact support if the issue persists.  If you encounter the above error, it could be because there is already a running instance of  hcd  on your machine. hcgui attempts to start its own instance of  hcd  and  hcwallet  in the background.  You could possibly resolve this by killing any any running  hcd  processes prior to restarting hcgui.  Where does hcgui store data/write log files?  hcgui stores the blockchain, your wallet, log files and its own configuration files all in a single directory. A different directory is used depending on the operating system:     OS  hcgui data directory      Windows  %LOCALAPPDATA%\\hcgui\\    macOS  ~/Library/Application Support/hcgui/    Linux  ~/.config/hcgui/",
            "title": "Troubleshooting"
        },
        {
            "location": "/getting-started/user-guides/using-hcgui/",
            "text": "Using hcgui\n\u00b6\n\n\nLast updated for v1.2.0.\n\n\nThis guide assumes you have already set up a hcgui wallet using \nthe hcgui Setup guide\n.\n\n\n\n\nOverview\n\u00b6\n\n\nThe overview tab gives a quick summary of your total HC (spendable and locked in tickets) and a list of recent transactions.\n\n\nThe \u201cRescan Blockchain\u201d button will force a rescan of all of your owned addresses to check for new transactions. This can sometimes fix issues where hcgui is displaying an incorrect balance. Note - this button will not redownload the whole blockchain.\n\n\n\n\n\n\nAccounts\n\u00b6\n\n\nThe accounts tab shows you the accounts in your wallet and allows you to add new ones.\nAccounts in Decred work just like bank accounts.\nThey allow you to keep separate records of your HC. This feature is most\nuseful for those who run businesses and wish to keep separate accounts for\ntax records for example. Transferring HC across accounts will create a\ntransaction on the blockchain.\n\n\n\n\n\n\nSend\n\u00b6\n\n\nThis tab is how you send funds to another address. Simply copy the recipient\naddress into the text box and type in the amount of Decred you wish to send.\nThe estimated fee will be listed as well. You can click the \u2018+\u2019 button to\nsend Decred to multiple addresses in one transaction if you wish.\nThe \u201cSend All\u201d button will construct a transaction that will completely drain an account.\n\n\n\n\n\n\nReceive\n\u00b6\n\n\nThis is where you can generate wallet addresses to give to other people so they can\nsend you HC. Simply choose the account you want funds to go to and select the \nGenerate New Address\n button.\nThe address is displayed in the blue text box - it\u2019s the line that starts with Ds, or Ts on testnet.\nYou can select the clipboard icon to copy the address and share it with the person sending you HC.\nDecred addresses can be used as many times as you want, but for privacy reasons it\u2019s best\nto generate a new one for each transaction. There\u2019s around 1.4E48 (that\u2019s 14 followed by 47 zeroes)\naddresses available so you don\u2019t need to worry about running out.\n\n\n\n\n\n\nHistory\n\u00b6\n\n\nThis tab shows a list of all transactions that have occurred involving this wallet. A dropdown menu allows filtering the list\nby transaction type: regular, ticket and vote transactions. The transaction hash can be used with the\n\nblock explorer\n to see more information about the transaction.\n\n\n\n\n\n\nTickets\n\u00b6\n\n\nThe tickets tab allows you to see how many proof of stake tickets you current have, to buy new tickets, and to set your voting preferences.\n\n\nBefore you can use the tickets tab you must first import the API key from your \nstakepool account\n.\n\n\n\n\nOnce you have done this, the \u201cPurchase Tickets\u201d and \u201cVoting Settings\u201d pages will become active.\n\n\n\n\nPurchase Tickets\n\n\n\n\n\n\nThe total number of tickets you currently own is at the top of the page:\n\n\n\n\nMempool Tickets - Tickets waiting to be mined by PoW miners (only 20 new tickets are mined into each block)\n\n\nImmature Tickets - Mined tickets which cannot vote until a 256 block maturing period has passed (around 20 hours)\n\n\nLive Tickets - Mature tickets eligible to be called to vote\n\n\n\n\n\n\n\nThe purchase tickets panel allows you to buy more tickets. Most of the settings are already entered, you just need to select which account to purchase tickets from and how many tickets you want to buy.\n\n\n\n\n\n\n\n\n\n\n\nThe automatic purchase panel allows you to enable the automatic ticket buyer - hcgui will continually buy tickets for you for as long as you keep it running. You can configure how the ticket buyer works using the advanced options:\n\n\n\n\n\n\nBalance to maintain - If your balance is lower than this number, you will not buy tickets. The default of 0 will use all the funds in your account to buy tickets.\n\n\nMax Price Absolute -  If the ticket price is above this value, you will not buy more tickets. The default of 0 turns this off.\n\n\nMax Per Block - Do not buy more than this number of tickets per block. A negative number means buy one ticket every n blocks. e.g. -2 would mean buy a ticket every second block.\n\n\nMax Fee - Tickets are entered into the mempool in order of their fee per kilobyte. This sets the maximum fee you are willing to pay.\n\n\nMax Price Relative  - If the current window price is significantly higher than the last few windows, do not buy any tickets. E.g. With the default value of 1.25, if the average price of the last few windows is 50HC, you won\u2019t buy any tickets if the current window is over 62.5HC.\n\n\n\n\n\n\nVoting Settings\n\n\n\n\n\n\nThis page shows all of the agendas which are currently up for vote on the Decred blockchain.\nYou can read the details of each agenda and choose which way you would like to vote on each issue.\nThis setting is only used at the moment each individual ticket votes, which means that you can change your\nvoting preferences if you change your mind about an agenda.\n\n\n\n\nSettings\n\u00b6\n\n\nThe settings tab allows you to customise the units HC amounts are displayed in and also allows you to switch hcgui onto the testnet blockchain.\n\n\nThe settings tab is also where you come to change your private passphrase.\n\n\n\n\n\n\nHelp\n\u00b6\n\n\nThe help tab contains various links to get help using hcgui. The \u201cIssues\u201d link will take you the to the hcgui Github page where problems with the hcgui software can be reported. We would be grateful for your help!",
            "title": "Using hcgui"
        },
        {
            "location": "/getting-started/user-guides/using-hcgui/#using-hcgui",
            "text": "Last updated for v1.2.0.  This guide assumes you have already set up a hcgui wallet using  the hcgui Setup guide .",
            "title": " Using hcgui"
        },
        {
            "location": "/getting-started/user-guides/using-hcgui/#overview",
            "text": "The overview tab gives a quick summary of your total HC (spendable and locked in tickets) and a list of recent transactions.  The \u201cRescan Blockchain\u201d button will force a rescan of all of your owned addresses to check for new transactions. This can sometimes fix issues where hcgui is displaying an incorrect balance. Note - this button will not redownload the whole blockchain.",
            "title": "Overview"
        },
        {
            "location": "/getting-started/user-guides/using-hcgui/#accounts",
            "text": "The accounts tab shows you the accounts in your wallet and allows you to add new ones.\nAccounts in Decred work just like bank accounts.\nThey allow you to keep separate records of your HC. This feature is most\nuseful for those who run businesses and wish to keep separate accounts for\ntax records for example. Transferring HC across accounts will create a\ntransaction on the blockchain.",
            "title": "Accounts"
        },
        {
            "location": "/getting-started/user-guides/using-hcgui/#send",
            "text": "This tab is how you send funds to another address. Simply copy the recipient\naddress into the text box and type in the amount of Decred you wish to send.\nThe estimated fee will be listed as well. You can click the \u2018+\u2019 button to\nsend Decred to multiple addresses in one transaction if you wish.\nThe \u201cSend All\u201d button will construct a transaction that will completely drain an account.",
            "title": "Send"
        },
        {
            "location": "/getting-started/user-guides/using-hcgui/#receive",
            "text": "This is where you can generate wallet addresses to give to other people so they can\nsend you HC. Simply choose the account you want funds to go to and select the  Generate New Address  button.\nThe address is displayed in the blue text box - it\u2019s the line that starts with Ds, or Ts on testnet.\nYou can select the clipboard icon to copy the address and share it with the person sending you HC.\nDecred addresses can be used as many times as you want, but for privacy reasons it\u2019s best\nto generate a new one for each transaction. There\u2019s around 1.4E48 (that\u2019s 14 followed by 47 zeroes)\naddresses available so you don\u2019t need to worry about running out.",
            "title": "Receive"
        },
        {
            "location": "/getting-started/user-guides/using-hcgui/#history",
            "text": "This tab shows a list of all transactions that have occurred involving this wallet. A dropdown menu allows filtering the list\nby transaction type: regular, ticket and vote transactions. The transaction hash can be used with the block explorer  to see more information about the transaction.",
            "title": "History"
        },
        {
            "location": "/getting-started/user-guides/using-hcgui/#tickets",
            "text": "The tickets tab allows you to see how many proof of stake tickets you current have, to buy new tickets, and to set your voting preferences.  Before you can use the tickets tab you must first import the API key from your  stakepool account .   Once you have done this, the \u201cPurchase Tickets\u201d and \u201cVoting Settings\u201d pages will become active.   Purchase Tickets    The total number of tickets you currently own is at the top of the page:   Mempool Tickets - Tickets waiting to be mined by PoW miners (only 20 new tickets are mined into each block)  Immature Tickets - Mined tickets which cannot vote until a 256 block maturing period has passed (around 20 hours)  Live Tickets - Mature tickets eligible to be called to vote    The purchase tickets panel allows you to buy more tickets. Most of the settings are already entered, you just need to select which account to purchase tickets from and how many tickets you want to buy.     The automatic purchase panel allows you to enable the automatic ticket buyer - hcgui will continually buy tickets for you for as long as you keep it running. You can configure how the ticket buyer works using the advanced options:    Balance to maintain - If your balance is lower than this number, you will not buy tickets. The default of 0 will use all the funds in your account to buy tickets.  Max Price Absolute -  If the ticket price is above this value, you will not buy more tickets. The default of 0 turns this off.  Max Per Block - Do not buy more than this number of tickets per block. A negative number means buy one ticket every n blocks. e.g. -2 would mean buy a ticket every second block.  Max Fee - Tickets are entered into the mempool in order of their fee per kilobyte. This sets the maximum fee you are willing to pay.  Max Price Relative  - If the current window price is significantly higher than the last few windows, do not buy any tickets. E.g. With the default value of 1.25, if the average price of the last few windows is 50HC, you won\u2019t buy any tickets if the current window is over 62.5HC.    Voting Settings    This page shows all of the agendas which are currently up for vote on the Decred blockchain.\nYou can read the details of each agenda and choose which way you would like to vote on each issue.\nThis setting is only used at the moment each individual ticket votes, which means that you can change your\nvoting preferences if you change your mind about an agenda.",
            "title": "Tickets"
        },
        {
            "location": "/getting-started/user-guides/using-hcgui/#settings",
            "text": "The settings tab allows you to customise the units HC amounts are displayed in and also allows you to switch hcgui onto the testnet blockchain.  The settings tab is also where you come to change your private passphrase.",
            "title": "Settings"
        },
        {
            "location": "/getting-started/user-guides/using-hcgui/#help",
            "text": "The help tab contains various links to get help using hcgui. The \u201cIssues\u201d link will take you the to the hcgui Github page where problems with the hcgui software can be reported. We would be grateful for your help!",
            "title": "Help"
        },
        {
            "location": "/getting-started/user-guides/cli-installation/",
            "text": "CLI Installation guide\n\u00b6\n\n\nThis page was last updated for v2.0.0.\n\n\n\n\nhcinstall\n\u00b6\n\n\nhcinstall\n is the recommended method to install the Decred command line interface tools \nhcd\n, \nhcwallet\n, and \nhcctl\n.\n\n\nhcinstall\n is an automatic installer and upgrader for the Decred software. The newest release can be found here: \nhttps://github.com/decred/decred-release/releases\n. Binaries are provided for Windows, macOS, Linux, OpenBSD, and FreeBSD. Executing installer will install \nhcd\n, \nhcwallet\n, and \nhcctl\n. Instructions are provided for macOS, Linux, and Windows below (assumed proficiency for *BSD users).\n\n\nhcinstall\n will automatically download the precompiled, signed binary package found on GitHub, verify the signature of this package, copy the binaries within the package to a specific folder dependent on OS, create configuration files with settings to allow the 3 applications to communicate with each other, and run you through the wallet creation process. After running through \nhcinstall\n, you will be able to launch the software with no additional configuration.\n\n\n\n\nmacOS:\n\n\n\n\n\n\n\n\nDownload the correct file:\n\n\nFor 32-bit computers, download the \nhcinstall-darwin-386-v2.0.0\n file. \n\nFor 64-bit computers, download the \nhcinstall-darwin-amd64-v2.0.0\n file.\n\n\n\n\n\n\nMake hcinstall-darwin-xxxx-vx.x.x an executable within your terminal, and run it:\n\n\nNavigate to the directory where the hcinstall file was downloaded using the \ncd\n command, run chmod with u+x mode on the hcinstall file, and run the executable that is created. Below is an example of the commands (change directories or filename as needed):\n\n\ncd ~/Downloads/\n \n\n\nchmod u+x hcinstall-darwin-amd64-v2.0.0\n \n\n\n./hcinstall-darwin-amd64-v2.0.0\n\n\n\n\n\n\nThe executable binaries for \nhcd\n, \nhcwallet\n, and \nhcctl\n can now be found in the \n~/decred/\n directory. Before the \nhcinstall\n process completes, you will be taken to the wallet creation prompt. Follow the steps within the \nWallet Creation Walkthrough\n of the hcwallet Setup guide to finish.\n\n\n\n\n\n\n\n\nLinux:\n\n\n\n\n\n\n\n\nDownload the correct file:\n\n\nFor 32-bit computers, download the \nhcinstall-linux-386-v2.0.0\n file. \n\nFor 64-bit computers, download the \nhcinstall-linux-amd64-v2.0.0\n file. \n\nFor 32-bit ARM computers, download the \nhcinstall-linux-arm-v2.0.0\n file. \n\nFor 64-bit ARM computers, download the \nhcinstall-linux-arm64-v2.0.0\n file.\n\n\n\n\n\n\nMake hcinstall-linux-xxxx-vx.x.x an executable within your terminal, and run it:\n\n\nNavigate to the directory where the hcinstall file was downloaded using the \ncd\n command, run chmod with u+x mode on the hcinstall file, and run the executable that is created. Below is an example of the commands (change directories or filename as needed):\n\n\ncd ~/Downloads/\n \n\n\nchmod u+x hcinstall-linux-amd64-v2.0.0\n \n\n\n./hcinstall-linux-amd64-v2.0.0\n\n\n\n\n\n\nThe binaries for \nhcd\n, \nhcwallet\n, and \nhcctl\n can now be found in the \n~/decred/\n directory. Before the \nhcinstall\n process completes, you will be taken to the wallet creation prompt. Follow the steps within the \nWallet Creation Walkthrough\n of the hcwallet Setup guide to finish.\n\n\n\n\n\n\n\n\nWindows:\n\n\n\n\n\n\n\n\nDownload the correct file:\n\n\nFor 32-bit computers, download the \nhcinstall-windows-386-v2.0.0.exe\n file. \n\nFor 64-bit computers, download the \nhcinstall-windows-amd64-v2.0.0.exe\n file. \n\n\n\n\n\n\nRun the hcinstall executable file.\n\n\nYou can either double click it or run it from the Command Prompt. \n\n\n\n\n\n\nThe binaries for \nhcd\n, \nhcwallet\n, and \nhcctl\n can now be found in the \n%HOMEPATH%\\decred\\\n directory (usually \n%HOMEPATH%\n is \nC:\\Users\\<username>\\\n). Before the \nhcinstall\n process completes, you will be taken to the wallet creation prompt. Follow the steps within the \nWallet Creation Walkthrough\n of the hcwallet Setup guide to finish.",
            "title": "Installation"
        },
        {
            "location": "/getting-started/user-guides/cli-installation/#cli-installation-guide",
            "text": "This page was last updated for v2.0.0.",
            "title": " CLI Installation guide"
        },
        {
            "location": "/getting-started/user-guides/cli-installation/#hcinstall",
            "text": "hcinstall  is the recommended method to install the Decred command line interface tools  hcd ,  hcwallet , and  hcctl .  hcinstall  is an automatic installer and upgrader for the Decred software. The newest release can be found here:  https://github.com/decred/decred-release/releases . Binaries are provided for Windows, macOS, Linux, OpenBSD, and FreeBSD. Executing installer will install  hcd ,  hcwallet , and  hcctl . Instructions are provided for macOS, Linux, and Windows below (assumed proficiency for *BSD users).  hcinstall  will automatically download the precompiled, signed binary package found on GitHub, verify the signature of this package, copy the binaries within the package to a specific folder dependent on OS, create configuration files with settings to allow the 3 applications to communicate with each other, and run you through the wallet creation process. After running through  hcinstall , you will be able to launch the software with no additional configuration.   macOS:     Download the correct file:  For 32-bit computers, download the  hcinstall-darwin-386-v2.0.0  file.  \nFor 64-bit computers, download the  hcinstall-darwin-amd64-v2.0.0  file.    Make hcinstall-darwin-xxxx-vx.x.x an executable within your terminal, and run it:  Navigate to the directory where the hcinstall file was downloaded using the  cd  command, run chmod with u+x mode on the hcinstall file, and run the executable that is created. Below is an example of the commands (change directories or filename as needed):  cd ~/Downloads/    chmod u+x hcinstall-darwin-amd64-v2.0.0    ./hcinstall-darwin-amd64-v2.0.0    The executable binaries for  hcd ,  hcwallet , and  hcctl  can now be found in the  ~/decred/  directory. Before the  hcinstall  process completes, you will be taken to the wallet creation prompt. Follow the steps within the  Wallet Creation Walkthrough  of the hcwallet Setup guide to finish.     Linux:     Download the correct file:  For 32-bit computers, download the  hcinstall-linux-386-v2.0.0  file.  \nFor 64-bit computers, download the  hcinstall-linux-amd64-v2.0.0  file.  \nFor 32-bit ARM computers, download the  hcinstall-linux-arm-v2.0.0  file.  \nFor 64-bit ARM computers, download the  hcinstall-linux-arm64-v2.0.0  file.    Make hcinstall-linux-xxxx-vx.x.x an executable within your terminal, and run it:  Navigate to the directory where the hcinstall file was downloaded using the  cd  command, run chmod with u+x mode on the hcinstall file, and run the executable that is created. Below is an example of the commands (change directories or filename as needed):  cd ~/Downloads/    chmod u+x hcinstall-linux-amd64-v2.0.0    ./hcinstall-linux-amd64-v2.0.0    The binaries for  hcd ,  hcwallet , and  hcctl  can now be found in the  ~/decred/  directory. Before the  hcinstall  process completes, you will be taken to the wallet creation prompt. Follow the steps within the  Wallet Creation Walkthrough  of the hcwallet Setup guide to finish.     Windows:     Download the correct file:  For 32-bit computers, download the  hcinstall-windows-386-v2.0.0.exe  file.  \nFor 64-bit computers, download the  hcinstall-windows-amd64-v2.0.0.exe  file.     Run the hcinstall executable file.  You can either double click it or run it from the Command Prompt.     The binaries for  hcd ,  hcwallet , and  hcctl  can now be found in the  %HOMEPATH%\\decred\\  directory (usually  %HOMEPATH%  is  C:\\Users\\<username>\\ ). Before the  hcinstall  process completes, you will be taken to the wallet creation prompt. Follow the steps within the  Wallet Creation Walkthrough  of the hcwallet Setup guide to finish.",
            "title": "hcinstall"
        },
        {
            "location": "/getting-started/cli-differences/",
            "text": "Command-Line Differences Across Operating Systems\n\u00b6\n\n\nThis page was last updated for v1.0.0.\n\n\n\n\nThe purpose of this page is to explain the key differences for running the cross-platform command-line applications on Windows, Linux, and macOS.\n\n\n\n\n\n\nLaunch Commands\n\n\n\n\nThe first major difference in the command line applications (\nhcd\n,\nhcwallet\n,\nhcctl\n) is how you launch them from the command line. This is not as much of an operating system as it is a difference in shells. Windows comes with Command Prompt and PowerShell installed. macOS uses Bash within the Terminal application, and many Linux distributions use Bash as well. Below are examples of the basic run commands for Bash and Command Prompt.\n\n\nCommand Prompt:\n \nhcd.exe\n, \nhcwallet.exe\n, \nhcctl.exe\n \n\n\nBash:\n \n./hcd\n, \n./hcwallet\n, \n./hcctl\n\n\nSome of our guides might be OS-agnostic with the launch commands. If a guide says to run \nhcctl --wallet getbalance\n, it\u2019s referring to using \nhcctl.exe --wallet getbalance\n for Command Prompt and \n./hcctl --wallet getbalance\n for Bash.\n\n\n\n\nApplication Directory Locations\n\n\n\n\nThe other way the command line clients differ is the location of each application directory (blocks, wallets, log files, configuration files are all stored within the data directory). Below is a table of the default application directories for each application. \n\n\n\n\n\n\n\n\nOS\n\n\nhcd, hcwallet, hcctl App Directories\n\n\n\n\n\n\n\n\n\n\nWindows\n\n\n%LOCALAPPDATA%\\hcd\\\n\n\n\n\n\n\n\n\n%LOCALAPPDATA%\\hcwallet\\\n\n\n\n\n\n\n\n\n%LOCALAPPDATA%\\hcctl\\\n\n\n\n\n\n\nmacOS\n\n\n~/Library/Application Support/hcd/\n\n\n\n\n\n\n\n\n~/Library/Application Support/hcwallet/\n\n\n\n\n\n\n\n\n~/Library/Application Support/hcctl/\n\n\n\n\n\n\nLinux\n\n\n~/.hcd/\n\n\n\n\n\n\n\n\n~/.hcwallet/\n\n\n\n\n\n\n\n\n~/.hcctl/",
            "title": "OS Differences"
        },
        {
            "location": "/getting-started/cli-differences/#command-line-differences-across-operating-systems",
            "text": "This page was last updated for v1.0.0.   The purpose of this page is to explain the key differences for running the cross-platform command-line applications on Windows, Linux, and macOS.    Launch Commands   The first major difference in the command line applications ( hcd , hcwallet , hcctl ) is how you launch them from the command line. This is not as much of an operating system as it is a difference in shells. Windows comes with Command Prompt and PowerShell installed. macOS uses Bash within the Terminal application, and many Linux distributions use Bash as well. Below are examples of the basic run commands for Bash and Command Prompt.  Command Prompt:   hcd.exe ,  hcwallet.exe ,  hcctl.exe    Bash:   ./hcd ,  ./hcwallet ,  ./hcctl  Some of our guides might be OS-agnostic with the launch commands. If a guide says to run  hcctl --wallet getbalance , it\u2019s referring to using  hcctl.exe --wallet getbalance  for Command Prompt and  ./hcctl --wallet getbalance  for Bash.   Application Directory Locations   The other way the command line clients differ is the location of each application directory (blocks, wallets, log files, configuration files are all stored within the data directory). Below is a table of the default application directories for each application.      OS  hcd, hcwallet, hcctl App Directories      Windows  %LOCALAPPDATA%\\hcd\\     %LOCALAPPDATA%\\hcwallet\\     %LOCALAPPDATA%\\hcctl\\    macOS  ~/Library/Application Support/hcd/     ~/Library/Application Support/hcwallet/     ~/Library/Application Support/hcctl/    Linux  ~/.hcd/     ~/.hcwallet/     ~/.hcctl/",
            "title": "Command-Line Differences Across Operating Systems"
        },
        {
            "location": "/getting-started/startup-basics/",
            "text": "Startup Basics\n\u00b6\n\n\nThis guide was last updated for v1.0.0\n\n\n\n\nThis guide applies to command-line application users. coolsnady users can safely ignore the use of config files - coolsnady handles basic configuration automatically. It is also worth noting that some of our guides show configuration file settings and other guides show startup command flags. \n\n\n\n\nConfiguration File Locations\n\u00b6\n\n\nAll of the Coolsnady software, when started, reads from a configuration file to determine which settings it should enable/disable/set during that initial load. All of the command line startup flags \n(e.g. hcwallet --testnet)\n can be replaced by settings within the appropriate configuration file \n(e.g. hcwallet --testnet could be replaced by testnet=1 in hcwallet.conf)\n.\n\n\nThese configuration files are located within the application home directory of the application. The location of these default home directories for Windows, macOS, and Linux are listed below:\n\n\n\n\n\n\n\n\nOS\n\n\nhcd, hcwallet, hcctl App Directories\n\n\n\n\n\n\n\n\n\n\nWindows\n\n\n%LOCALAPPDATA%\\hcd\\\n\n\n\n\n\n\n\n\n%LOCALAPPDATA%\\hcwallet\\\n\n\n\n\n\n\n\n\n%LOCALAPPDATA%\\hcctl\\\n\n\n\n\n\n\nmacOS\n\n\n~/Library/Application Support/hcd/\n\n\n\n\n\n\n\n\n~/Library/Application Support/hcwallet/\n\n\n\n\n\n\n\n\n~/Library/Application Support/hcctl/\n\n\n\n\n\n\nLinux\n\n\n~/.hcd/\n\n\n\n\n\n\n\n\n~/.hcwallet/\n\n\n\n\n\n\n\n\n~/.hcctl/\n\n\n\n\n\n\n\n\nEach of these folders is allowed its own \n.conf\n file, named after the individual application (\ne.g. hcd uses hcd.conf\n). Please also note that the \nhcd\n and \nhcwallet\n home directories are automatically created when each application is first launched. You will have to manually create a \nhcctl\n home directory to utilize a config file.\n\n\nThe \nhcinstall\n installation method automatically creates configuration files, with the \nminimum configuration settings\n already enabled. \n\n\nThe \nManual Installation\n method includes sample configuration files within the .zip/.tar.gz. It is recommended to copy these config files into the appropriate directory described above, and rename them to remove \u2018sample-\u2018. These files have many settings commented out (comments are not read by the program during runtime) so all of these settings are effectively disabled. You can enable these pre-written settings by simply deleting the semi-colon before the line.\n\n\n\n\nStartup Command Flags\n\u00b6\n\n\nA majority of the settings you are able to set via the configuration file can also be passed to the application as parameters during launch. For example, the following OS-specific commands would open \nhcd\n for Testnet use, an alternative to using \ntestnet=1\n in your config file:\n\n\nWindows: hcd.exe --testnet\nmacOS: ./hcd --testnet\nLinux: ./hcd --testnet\n\n\n\nThe above example would first look to the \nhcd\n configuration file for settings and then look to the executable command to enable the testnet setting. \n\n\n\n\nAdvanced Usage\n\u00b6\n\n\nStoring Login Details in Config Files\n \n\n\nFull List of Options for Each Application",
            "title": "Startup Basics"
        },
        {
            "location": "/getting-started/startup-basics/#startup-basics",
            "text": "This guide was last updated for v1.0.0   This guide applies to command-line application users. coolsnady users can safely ignore the use of config files - coolsnady handles basic configuration automatically. It is also worth noting that some of our guides show configuration file settings and other guides show startup command flags.",
            "title": "Startup Basics"
        },
        {
            "location": "/getting-started/startup-basics/#configuration-file-locations",
            "text": "All of the Coolsnady software, when started, reads from a configuration file to determine which settings it should enable/disable/set during that initial load. All of the command line startup flags  (e.g. hcwallet --testnet)  can be replaced by settings within the appropriate configuration file  (e.g. hcwallet --testnet could be replaced by testnet=1 in hcwallet.conf) .  These configuration files are located within the application home directory of the application. The location of these default home directories for Windows, macOS, and Linux are listed below:     OS  hcd, hcwallet, hcctl App Directories      Windows  %LOCALAPPDATA%\\hcd\\     %LOCALAPPDATA%\\hcwallet\\     %LOCALAPPDATA%\\hcctl\\    macOS  ~/Library/Application Support/hcd/     ~/Library/Application Support/hcwallet/     ~/Library/Application Support/hcctl/    Linux  ~/.hcd/     ~/.hcwallet/     ~/.hcctl/     Each of these folders is allowed its own  .conf  file, named after the individual application ( e.g. hcd uses hcd.conf ). Please also note that the  hcd  and  hcwallet  home directories are automatically created when each application is first launched. You will have to manually create a  hcctl  home directory to utilize a config file.  The  hcinstall  installation method automatically creates configuration files, with the  minimum configuration settings  already enabled.   The  Manual Installation  method includes sample configuration files within the .zip/.tar.gz. It is recommended to copy these config files into the appropriate directory described above, and rename them to remove \u2018sample-\u2018. These files have many settings commented out (comments are not read by the program during runtime) so all of these settings are effectively disabled. You can enable these pre-written settings by simply deleting the semi-colon before the line.",
            "title": "Configuration File Locations"
        },
        {
            "location": "/getting-started/startup-basics/#startup-command-flags",
            "text": "A majority of the settings you are able to set via the configuration file can also be passed to the application as parameters during launch. For example, the following OS-specific commands would open  hcd  for Testnet use, an alternative to using  testnet=1  in your config file:  Windows: hcd.exe --testnet\nmacOS: ./hcd --testnet\nLinux: ./hcd --testnet  The above example would first look to the  hcd  configuration file for settings and then look to the executable command to enable the testnet setting.",
            "title": "Startup Command Flags"
        },
        {
            "location": "/getting-started/startup-basics/#advanced-usage",
            "text": "Storing Login Details in Config Files    Full List of Options for Each Application",
            "title": "Advanced Usage"
        },
        {
            "location": "/getting-started/user-guides/hcd-setup/",
            "text": "hcd Setup Guide\n\u00b6\n\n\nLast updated for v2.0.0.\n\n\nThis guide is intended to help you setup the \nhcd\n application using \nstartup flags\n. \n\n\nPrerequisites:\n\n\n\n\nUse the latest \nhcinstall\n to install \nhcd\n. Additional steps will be required if another installation method was used.\n\n\nReview how the launch commands for the Command Prompt (Windows) and Bash (macOS/Linux) shells differ \nhere\n.\n\n\n\n\n\n\nhcd\n is the node daemon for Decred. A daemon is a program that works in the background that you do not interface with directly. \nhcd\n maintains the entire past transactional ledger (or blockchain) of Decred and allows relaying of transactions to other Decred nodes across the world. You can think of it as your own personal Decred blockchain server. The blockchain is saved in the \ndata\n folder within \nhcd\n\u2018s home directory.\n\n\nAdvanced Users: If you are running in headless mode via SSH,\n you\nwill need to use a terminal multiplexer such as \nscreen\n\nor \ntmux\n. Where you see the instruction to\nmove to another shell, you\u2019ll need to start a new window in \nscreen\n\nor \ntmux\n.\n\n\n\n\n Connect to the Decred Network\n\u00b6\n\n\nThe first time launching \nhcd\n, it will connect to the Decred network and begin downloading the blockchain. To allow \nhcwallet\n and \nhcctl\n to communicate with \nhcd\n, the configuration files must have \nrpcuser\n and \nrpcpass\n settings enabled. \n\n\n\n\nConfigure RPC Username and Password\n\n\n\n\nIf you used \nhcinstall\n, your configuration files are already setup with the RPC username/password for \nhcd\n, \nhcwallet\n, and \nhcctl\n.\n\n\nIf you did not use \nhcinstall\n, you will need to enable the bare minimum settings in your configuration files. Follow \nthis guide\n to do so. \n\n\n\n\nStart hcd \n\n\n\n\nWith the correctly set configuration files, open another shell window in your Decred directory (or use the last window if you have just created your wallet). Type the following command (review this guide\u2019s Prerequisites to determine the right command for your OS/Shell application):\n\n\nhcd\n\n\n\n\n\n\nWait for hcd to Sync to the Decred Blockchain\n\n\n\n\nWhen \nhcd\n launches successfully, you should see your shell window begin to fill up with messages as the daemon connects to the network and starts processing blocks. Wait until it is completed - the entire blockchain is being downloaded into the \nhcd\n data directory. \n\n\nYou will see a line at the start like this:\n\n\n22:58:04 2016-02-09 [INF] BMGR: Syncing to block height 617 from peer 104.236.167.133:9108\n\n\n\n\nThen, as it continues to download blocks, you will see lines like this:\n\n\n22:58:16 2016-02-09 [INF] BMGR: Processed 321 blocks in the last 10.03s (544 transactions, height 322, 2016-02-09 09:50:34 +1000 EST)\n\n\n\n\nThe blockchain will be fully synced once the most recently processed block is the current block height. You can tell by either comparing the date and time in the log message or by comparing the height of the last block processed against the last block height on \nthe official block explorer\n.  \n\n\nNote that this connection will be used in the future. You must leave this \nhcd\n instance running in order to use \nhcwallet\n.\n\n\n\n\nNow that you\u2019ve set up \nhcd\n, visit the \nhcwallet Setup\n guide.",
            "title": "hcd Setup"
        },
        {
            "location": "/getting-started/user-guides/hcd-setup/#hcd-setup-guide",
            "text": "Last updated for v2.0.0.  This guide is intended to help you setup the  hcd  application using  startup flags .   Prerequisites:   Use the latest  hcinstall  to install  hcd . Additional steps will be required if another installation method was used.  Review how the launch commands for the Command Prompt (Windows) and Bash (macOS/Linux) shells differ  here .    hcd  is the node daemon for Decred. A daemon is a program that works in the background that you do not interface with directly.  hcd  maintains the entire past transactional ledger (or blockchain) of Decred and allows relaying of transactions to other Decred nodes across the world. You can think of it as your own personal Decred blockchain server. The blockchain is saved in the  data  folder within  hcd \u2018s home directory.  Advanced Users: If you are running in headless mode via SSH,  you\nwill need to use a terminal multiplexer such as  screen \nor  tmux . Where you see the instruction to\nmove to another shell, you\u2019ll need to start a new window in  screen \nor  tmux .",
            "title": "hcd Setup Guide"
        },
        {
            "location": "/getting-started/user-guides/hcd-setup/#connect-to-the-decred-network",
            "text": "The first time launching  hcd , it will connect to the Decred network and begin downloading the blockchain. To allow  hcwallet  and  hcctl  to communicate with  hcd , the configuration files must have  rpcuser  and  rpcpass  settings enabled.    Configure RPC Username and Password   If you used  hcinstall , your configuration files are already setup with the RPC username/password for  hcd ,  hcwallet , and  hcctl .  If you did not use  hcinstall , you will need to enable the bare minimum settings in your configuration files. Follow  this guide  to do so.    Start hcd    With the correctly set configuration files, open another shell window in your Decred directory (or use the last window if you have just created your wallet). Type the following command (review this guide\u2019s Prerequisites to determine the right command for your OS/Shell application):  hcd   Wait for hcd to Sync to the Decred Blockchain   When  hcd  launches successfully, you should see your shell window begin to fill up with messages as the daemon connects to the network and starts processing blocks. Wait until it is completed - the entire blockchain is being downloaded into the  hcd  data directory.   You will see a line at the start like this:  22:58:04 2016-02-09 [INF] BMGR: Syncing to block height 617 from peer 104.236.167.133:9108  Then, as it continues to download blocks, you will see lines like this:  22:58:16 2016-02-09 [INF] BMGR: Processed 321 blocks in the last 10.03s (544 transactions, height 322, 2016-02-09 09:50:34 +1000 EST)  The blockchain will be fully synced once the most recently processed block is the current block height. You can tell by either comparing the date and time in the log message or by comparing the height of the last block processed against the last block height on  the official block explorer .    Note that this connection will be used in the future. You must leave this  hcd  instance running in order to use  hcwallet .   Now that you\u2019ve set up  hcd , visit the  hcwallet Setup  guide.",
            "title": "Connect to the Decred Network"
        },
        {
            "location": "/getting-started/user-guides/hcwallet-setup/",
            "text": "hcwallet Setup Guide\n\u00b6\n\n\nLast updated for v2.0.0.\n\n\nThis guide is intended to help you setup the \nhcwallet\n application using \nstartup flags\n. \n\n\nPrerequisites:\n\n\n\n\nUse the latest \nhcinstall\n to install \nhcwallet\n. Additional steps will be required if another installation method was used.\n\n\nReview how the launch commands differ for the Command Prompt (Windows) and Bash (macOS/Linux) shells, and how the home directories differ \nhere\n.\n\n\nSetup hcd\n and have it running in the background.\n\n\n\n\n\n\nhcwallet\n is the daemon that handles Coolsnady wallet functionality for a single user. It manages all of your accounts, addresses, and transactions; tracks balances across addresses; and allows stakeholders to participate in Proof-of-Stake voting.\n\n\nIn order to run \nhcwallet\n, a \nwallet.db\n must exist within \nhcwallet\n\u2018s home directory. In order for that file to exist, you must create a new wallet. \nhcinstall\n automatically starts the creation process. If you delete your wallet.db or used another installation process, you\u2019ll have to run the \nmanual wallet creation command\n.\n\n\n\n\n\n\nCritical Information\n\n\nDuring the creation process for your wallet, you will be given a sequence of 33 words known as a seed phrase. This seed phrase is essentially the private key for your wallet. You will be able to use this seed phrase to restore your private keys, transaction history, and balances using any Coolsnady wallet on any computer.\n\n\nThis ultimately means that \nanyone\n who knows your seed can use it to restore your private keys, transaction history, and balances to a Coolsnady wallet on their computer without your knowledge. For this reason, it is of utmost importance to keep your seed phrase safe. Treat this seed the same way you would treat a physical key to a safe. If you lose your seed phrase, you permanently lose access to your wallet and all funds within it. It cannot be recovered by anyone, including the Coolsnady developers. It is recommended you write it down on paper and store that somewhere secure. If you decide to keep it on your computer, it would be best to keep it in an encrypted document (do not forget the password) in case the file or your computer is stolen.\n\n\nEvery seed phrase is also associated with a 64 character seed hex. The seed hex functions the same way as the seed phrase - \nhcwallet\n will accept it when attempting to restore your wallet. It is also important to keep your seed hex secure.\n\n\nREMINDER: DO NOT, UNDER ANY CIRCUMSTANCES, GIVE YOUR SEED OR THE ASSOCIATED HEX KEY TO ANYONE! NOT EVEN THE DEVELOPERS!\n\n\n\n\n\n\nManual Wallet Creation Command\n\u00b6\n\n\nIf you do not already have a \nwallet.db\n file stored in \nhcwallet\n\u2018s home directory, you must run the \nhcwallet --create\n command. Steps for this can be found below. \n\n\n\n\nOpen a new shell window (Bash/Command Prompt/etc,..).\n\n\nNavigate to the directory of the \nhcwallet\n executable.\n\n\nEnter the command \nhcwallet --create\n (review the Prerequisites above if you are unsure whether you should use \n./hcwallet\n or \nhcwallet.exe\n for the previous command). \n\n\n\n\n\n\nWallet Creation Walkthrough\n\u00b6\n\n\nDuring this process, you\u2019ll set a private passphrase, optionally set a public passphrase, and record your seed. To accomplish this, follow the steps below:\n\n\n\n\nSet Passphrases for Your Wallet\n\n\n\n\nIf the \nhcwallet --create\n command successfully executed, you should be greeted by the following text:\n\n\nEnter the private passphrase for your new wallet:\n\n\n\n\nThis first passphrase, the private passphrase, is what you will use to unlock your wallet when creating transactions or voting with Proof-of-Stake. Please use a unique and strong password. This password also protects the private keys within your wallet file, securing it from theft.\n\n\nAfter you\u2019ve verified your private passphrase, you should see the following prompt:\n\n\nDo you want to add an additional layer of encryption for public data? (n/no/y/yes) [no]:\n\n\n\n\nThe public passphrase is optional. It is used to encrypt all of the public data (transactions and addresses) within your wallet file so if it is stolen, an adversary can\u2019t link you to your transactions. \n\n\n\n\nRecord Your Seed\n\n\n\n\nBefore creating a new seed for your wallet, please review the \nCritical Information section\n.\n\n\nAfter you\u2019ve set your private passphrase and optional public passphrase, you\u2019ll see the following prompt:\n\n\nDo you have an existing wallet seed you want to use? (n/no/y/yes) [no]:\n\n\n\n\nThis guide assumes you do not have an existing seed, so continue by hitting \nEnter\n which will answer the prompt with the default \n[no]\n. NOTE: If you wish to restore your wallet by using your seed, you would simply enter \n[yes]\n here and follow the instructions on screen.\n\n\nAfter answering \n[no]\n, your seed phrase (wallet generation seed) and its hex will be displayed in the window. Please read through the IMPORTANT section displayed immediately after the Hex.\n\n\nIt cannot be stressed enough how important it is to save your seed phrase in a secure location, so if you haven\u2019t committed this to memory, please review the \nCritical Information section\n again.\n\n\nOnce you have written down the seed phrase and hex, type \nOK\n and press \nEnter\n. NOTE: if you did not write the phrase down before continuing, you should \nstart this process over\n after \ndeleting your wallet file\n\n\nAfter pressing \nEnter\n, you should see the following message:\n\n\nCreating the wallet...\nThe wallet has been created successfully.\n\n\n\n\nThe wallet will then be created. This might take a few minutes if you have a slow computer.\n\n\n\n\nLaunching hcwallet\n\u00b6\n\n\nIn order to launch \nhcwallet\n, you first must have \ncreated your wallet\n and\n\nconnected hcd to the Coolsnady network\n.\n\n\n\n\nConfigure RPC Username and Password\n\n\n\n\nIf you used \nhcinstall\n, your configuration files are already setup with the RPC username/password for \nhcd\n, \nhcwallet\n, and \nhcctl\n.\n\n\nIf you did not use \nhcinstall\n, you will need to enable the bare minimum settings in your configuration files. Follow \nthis guide\n to do so.\n\n\n\n\nStart hcwallet \n\n\n\n\nWith the correctly set configuration files, open another shell window in your Coolsnady directory (or use the last window if you have just created your wallet). Type the following command (review this guide\u2019s Prerequisites to determine the right command for your OS/Shell application):\n\n\nhcwallet\n\n\n\n\nYour \nhcwallet\n will now connect to the network via \nhcd\n. It will begin to scan the network for your active addresses which can take a few minutes on slow computers. Eventually it will start showing lines like:\n\n\n[INF] WLLT: Connecting block 0000000000002004ea8fa74af334cb291a22832642b5be603995683534bbb97b, height 9990\n\n\n\n\nThis means your wallet is successfully connected to the network\nthrough your daemon.\n\n\n\n\nTo learn how to use \nhcd\n and  \nhcwallet\n, visit the \nhcctl Basics\n guide. You\u2019ll learn how to unlock your wallet, send and receive hc using \nhcctl\n, check your balance, and check various network stats.",
            "title": "hcwallet Setup"
        },
        {
            "location": "/getting-started/user-guides/hcwallet-setup/#hcwallet-setup-guide",
            "text": "Last updated for v2.0.0.  This guide is intended to help you setup the  hcwallet  application using  startup flags .   Prerequisites:   Use the latest  hcinstall  to install  hcwallet . Additional steps will be required if another installation method was used.  Review how the launch commands differ for the Command Prompt (Windows) and Bash (macOS/Linux) shells, and how the home directories differ  here .  Setup hcd  and have it running in the background.    hcwallet  is the daemon that handles Coolsnady wallet functionality for a single user. It manages all of your accounts, addresses, and transactions; tracks balances across addresses; and allows stakeholders to participate in Proof-of-Stake voting.  In order to run  hcwallet , a  wallet.db  must exist within  hcwallet \u2018s home directory. In order for that file to exist, you must create a new wallet.  hcinstall  automatically starts the creation process. If you delete your wallet.db or used another installation process, you\u2019ll have to run the  manual wallet creation command .    Critical Information  During the creation process for your wallet, you will be given a sequence of 33 words known as a seed phrase. This seed phrase is essentially the private key for your wallet. You will be able to use this seed phrase to restore your private keys, transaction history, and balances using any Coolsnady wallet on any computer.  This ultimately means that  anyone  who knows your seed can use it to restore your private keys, transaction history, and balances to a Coolsnady wallet on their computer without your knowledge. For this reason, it is of utmost importance to keep your seed phrase safe. Treat this seed the same way you would treat a physical key to a safe. If you lose your seed phrase, you permanently lose access to your wallet and all funds within it. It cannot be recovered by anyone, including the Coolsnady developers. It is recommended you write it down on paper and store that somewhere secure. If you decide to keep it on your computer, it would be best to keep it in an encrypted document (do not forget the password) in case the file or your computer is stolen.  Every seed phrase is also associated with a 64 character seed hex. The seed hex functions the same way as the seed phrase -  hcwallet  will accept it when attempting to restore your wallet. It is also important to keep your seed hex secure.  REMINDER: DO NOT, UNDER ANY CIRCUMSTANCES, GIVE YOUR SEED OR THE ASSOCIATED HEX KEY TO ANYONE! NOT EVEN THE DEVELOPERS!",
            "title": "hcwallet Setup Guide"
        },
        {
            "location": "/getting-started/user-guides/hcwallet-setup/#manual-wallet-creation-command",
            "text": "If you do not already have a  wallet.db  file stored in  hcwallet \u2018s home directory, you must run the  hcwallet --create  command. Steps for this can be found below.    Open a new shell window (Bash/Command Prompt/etc,..).  Navigate to the directory of the  hcwallet  executable.  Enter the command  hcwallet --create  (review the Prerequisites above if you are unsure whether you should use  ./hcwallet  or  hcwallet.exe  for the previous command).",
            "title": "Manual Wallet Creation Command"
        },
        {
            "location": "/getting-started/user-guides/hcwallet-setup/#wallet-creation-walkthrough",
            "text": "During this process, you\u2019ll set a private passphrase, optionally set a public passphrase, and record your seed. To accomplish this, follow the steps below:   Set Passphrases for Your Wallet   If the  hcwallet --create  command successfully executed, you should be greeted by the following text:  Enter the private passphrase for your new wallet:  This first passphrase, the private passphrase, is what you will use to unlock your wallet when creating transactions or voting with Proof-of-Stake. Please use a unique and strong password. This password also protects the private keys within your wallet file, securing it from theft.  After you\u2019ve verified your private passphrase, you should see the following prompt:  Do you want to add an additional layer of encryption for public data? (n/no/y/yes) [no]:  The public passphrase is optional. It is used to encrypt all of the public data (transactions and addresses) within your wallet file so if it is stolen, an adversary can\u2019t link you to your transactions.    Record Your Seed   Before creating a new seed for your wallet, please review the  Critical Information section .  After you\u2019ve set your private passphrase and optional public passphrase, you\u2019ll see the following prompt:  Do you have an existing wallet seed you want to use? (n/no/y/yes) [no]:  This guide assumes you do not have an existing seed, so continue by hitting  Enter  which will answer the prompt with the default  [no] . NOTE: If you wish to restore your wallet by using your seed, you would simply enter  [yes]  here and follow the instructions on screen.  After answering  [no] , your seed phrase (wallet generation seed) and its hex will be displayed in the window. Please read through the IMPORTANT section displayed immediately after the Hex.  It cannot be stressed enough how important it is to save your seed phrase in a secure location, so if you haven\u2019t committed this to memory, please review the  Critical Information section  again.  Once you have written down the seed phrase and hex, type  OK  and press  Enter . NOTE: if you did not write the phrase down before continuing, you should  start this process over  after  deleting your wallet file  After pressing  Enter , you should see the following message:  Creating the wallet...\nThe wallet has been created successfully.  The wallet will then be created. This might take a few minutes if you have a slow computer.",
            "title": "Wallet Creation Walkthrough"
        },
        {
            "location": "/getting-started/user-guides/hcwallet-setup/#launching-hcwallet",
            "text": "In order to launch  hcwallet , you first must have  created your wallet  and connected hcd to the Coolsnady network .   Configure RPC Username and Password   If you used  hcinstall , your configuration files are already setup with the RPC username/password for  hcd ,  hcwallet , and  hcctl .  If you did not use  hcinstall , you will need to enable the bare minimum settings in your configuration files. Follow  this guide  to do so.   Start hcwallet    With the correctly set configuration files, open another shell window in your Coolsnady directory (or use the last window if you have just created your wallet). Type the following command (review this guide\u2019s Prerequisites to determine the right command for your OS/Shell application):  hcwallet  Your  hcwallet  will now connect to the network via  hcd . It will begin to scan the network for your active addresses which can take a few minutes on slow computers. Eventually it will start showing lines like:  [INF] WLLT: Connecting block 0000000000002004ea8fa74af334cb291a22832642b5be603995683534bbb97b, height 9990  This means your wallet is successfully connected to the network\nthrough your daemon.   To learn how to use  hcd  and   hcwallet , visit the  hcctl Basics  guide. You\u2019ll learn how to unlock your wallet, send and receive hc using  hcctl , check your balance, and check various network stats.",
            "title": "Launching hcwallet"
        },
        {
            "location": "/getting-started/user-guides/hcctl-basics/",
            "text": "hcctl Basics\n\u00b6\n\n\nLast updated for v2.0.0.\n\n\nThis guide is intended to help you learn the basic commands of the \nhcctl\n application using a \nminimal configuration file\n. \n\n\nPrerequisites:\n\n\n\n\nUse the latest \nhcinstall\n to install \nhcctl\n. Additional steps will be required if another installation method was used.\n\n\nReview how the launch commands for the Command Prompt (Windows) and Bash (macOS/Linux) shells differ \nhere\n.\n\n\nSetup hcd\n and have it running in the background.\n\n\nSetup hcwallet\n and have it running in the background.\n\n\n\n\n\n\nhcctl\n is the client that controls \nhcd\n and \nhcwallet\n via remote procedure call (RPC). You can use \nhcctl\n for many things such as checking your balance, buying tickets, creating transactions, and viewing network information.\n\n\nREMINDER:\n This guide uses OS-agnostic examples for commands. Review the prerequisites to determine if you should be using \n./hcctl\n or \nhcctl.exe\n instead of \nhcctl\n.\n\n\n\n\n\n\nConfigure RPC Username and Password\n\n\n\n\nCommands sent to either \nhcd\n or \nhcwallet\n will require RPC username/passwords to be setup in the configuration files.\n\n\nIf you used \nhcinstall\n, your configuration files are already setup with the RPC username/password for \nhcd\n, \nhcwallet\n, and \nhcctl\n.\n\n\nIf you did not use \nhcinstall\n, you will need to enable the bare minimum settings in your configuration files. Follow \nthis guide\n to do so.\n\n\n\n\nhcctl Commands\n\u00b6\n\n\nYou will need to run hcctl commands in a separate shell window (Command Prompt/Bash).\n\n\nTo issue commands to \nhcwallet\n, you will need to use \nhcctl --wallet <command>\n.\n\n\nTo issue commands to \nhcd\n, you will need to use \nhcctl <command>\n.\n\n\nTo see a full list of commands that \nhcctl\n can send to \nhcd\n and \nhcwallet\n, issue the following command in your shell:\n\n\nhcctl -l\n\n\n\n\nThis will return a very long list of commands, separated by application. The commands on the top section are for \nhcd\n and the commands on the bottom section are for \nhcwallet\n. You can find out more about an individual command by typing the following for \nhcwallet\n commands:\n\n\nhcctl help --wallet <command>\n\n\n\n\nor the following for \nhcd\n commands:\n\n\nhcctl help <command>\n\n\n\n\n\n\nUnlocking Your Wallet\n\u00b6\n\n\nSome functionality of \nhcwallet\n requires the wallet to be unlocked.\n\n\nThe command to unlock your wallet follows: \n\n\nhcctl --wallet walletpassphrase <private passphrase set during wallet creation> 0\n\n\n\n\nHere, we are specifying for \nhcctl\n to send the command to \nhcwallet\n by using the \n--wallet\n flag. The actual command is \nwalletpassphrase\n which accepts two parameters, your private passphrase and a time limit. Specifying \n0\n for a time limit unlocks \nhcwallet\n without a time limit. Note, however, that this only unlocks the wallet for the current session. If you close the window the wallet is running in, or stop/restart the \nhcwallet\n, you will need to unlock it again the next time you start it. \n\n\nIf the command was successful, you will not get a confirmation from \nhcctl\n, but if you look at your \nhcwallet\n session, it will say:\n\n\n[INF] RPCS: The wallet has been unlocked without a time limit.\n\n\n\n\nNOTE: Because unlocking the wallet is required for many functions of \nhcwallet\n, \nhcwallet\n can be started with the \n--promptpass\n flag or setting \npromptpass=true\n in \nhcwallet.conf\n (discussed \nhere\n).\n\n\n\n\nChecking Your Balance\n\u00b6\n\n\nTo send the \ngetbalance\n command to \nhcwallet\n using \nhcctl\n, enter the following in your shell:\n\n\nhcctl --wallet getbalance\n\n\n\n\nThis will return all of the balances for all of your accounts.\n\n\n\n\nGetting a New Receiving Address\n\u00b6\n\n\nTo send the \ngetnewaddress\n command to \nhcwallet\n using \nhcctl\n, enter the following in your shell:\n\n\nhcctl --wallet getnewaddress\n\n\n\n\nThis will generate and return a new payment address. To minimize address reuse, use this command to get a new address for each transaction you wish to receive.\n\n\n\n\nSending hc\n\u00b6\n\n\nTo send hc to an address, issue the \nsendtoaddress\n command to \nhcwallet\n using \nhcctl\n. Enter the following in your shell, filling in the receiving address and amount to send:\n\n\nhcctl --wallet sendtoaddress <address> <amount>\n\n\n\n\nIf successful, \nhcctl\n will return a transaction hash that can be used to watch the transaction on the official \nDecred Block Explorer\n.\n\n\n\n\nCheck Network Stats\n\u00b6\n\n\nThere are many different commands to check different network stats. Here we will cover sending \ngetinfo\n to \nhcd\n and \ngetstakeinfo\n to \nhcwallet\n.\n\n\nTo get information about your local \nhcd\n node, issue the \ngetinfo\n command to \nhcd\n using \nhcctl\n. Enter the following in your shell:\n\n\nhcctl getinfo\n\n\n\n\nTo get staking information about the Proof-of-Stake network, issue the \ngetstakeinfo\n command to \nhcwallet\n using \nhcctl\n. Enter the following in your shell:\n\n\nhcctl --wallet getstakeinfo\n\n\n\n\n\n\nAdditional Commands\n\u00b6\n\n\nMore commands can also be found on the \nProgram Options\n page.",
            "title": "hcctl Basics"
        },
        {
            "location": "/getting-started/user-guides/hcctl-basics/#hcctl-basics",
            "text": "Last updated for v2.0.0.  This guide is intended to help you learn the basic commands of the  hcctl  application using a  minimal configuration file .   Prerequisites:   Use the latest  hcinstall  to install  hcctl . Additional steps will be required if another installation method was used.  Review how the launch commands for the Command Prompt (Windows) and Bash (macOS/Linux) shells differ  here .  Setup hcd  and have it running in the background.  Setup hcwallet  and have it running in the background.    hcctl  is the client that controls  hcd  and  hcwallet  via remote procedure call (RPC). You can use  hcctl  for many things such as checking your balance, buying tickets, creating transactions, and viewing network information.  REMINDER:  This guide uses OS-agnostic examples for commands. Review the prerequisites to determine if you should be using  ./hcctl  or  hcctl.exe  instead of  hcctl .    Configure RPC Username and Password   Commands sent to either  hcd  or  hcwallet  will require RPC username/passwords to be setup in the configuration files.  If you used  hcinstall , your configuration files are already setup with the RPC username/password for  hcd ,  hcwallet , and  hcctl .  If you did not use  hcinstall , you will need to enable the bare minimum settings in your configuration files. Follow  this guide  to do so.",
            "title": "hcctl Basics"
        },
        {
            "location": "/getting-started/user-guides/hcctl-basics/#hcctl-commands",
            "text": "You will need to run hcctl commands in a separate shell window (Command Prompt/Bash).  To issue commands to  hcwallet , you will need to use  hcctl --wallet <command> .  To issue commands to  hcd , you will need to use  hcctl <command> .  To see a full list of commands that  hcctl  can send to  hcd  and  hcwallet , issue the following command in your shell:  hcctl -l  This will return a very long list of commands, separated by application. The commands on the top section are for  hcd  and the commands on the bottom section are for  hcwallet . You can find out more about an individual command by typing the following for  hcwallet  commands:  hcctl help --wallet <command>  or the following for  hcd  commands:  hcctl help <command>",
            "title": "hcctl Commands"
        },
        {
            "location": "/getting-started/user-guides/hcctl-basics/#unlocking-your-wallet",
            "text": "Some functionality of  hcwallet  requires the wallet to be unlocked.  The command to unlock your wallet follows:   hcctl --wallet walletpassphrase <private passphrase set during wallet creation> 0  Here, we are specifying for  hcctl  to send the command to  hcwallet  by using the  --wallet  flag. The actual command is  walletpassphrase  which accepts two parameters, your private passphrase and a time limit. Specifying  0  for a time limit unlocks  hcwallet  without a time limit. Note, however, that this only unlocks the wallet for the current session. If you close the window the wallet is running in, or stop/restart the  hcwallet , you will need to unlock it again the next time you start it.   If the command was successful, you will not get a confirmation from  hcctl , but if you look at your  hcwallet  session, it will say:  [INF] RPCS: The wallet has been unlocked without a time limit.  NOTE: Because unlocking the wallet is required for many functions of  hcwallet ,  hcwallet  can be started with the  --promptpass  flag or setting  promptpass=true  in  hcwallet.conf  (discussed  here ).",
            "title": "Unlocking Your Wallet"
        },
        {
            "location": "/getting-started/user-guides/hcctl-basics/#checking-your-balance",
            "text": "To send the  getbalance  command to  hcwallet  using  hcctl , enter the following in your shell:  hcctl --wallet getbalance  This will return all of the balances for all of your accounts.",
            "title": "Checking Your Balance"
        },
        {
            "location": "/getting-started/user-guides/hcctl-basics/#getting-a-new-receiving-address",
            "text": "To send the  getnewaddress  command to  hcwallet  using  hcctl , enter the following in your shell:  hcctl --wallet getnewaddress  This will generate and return a new payment address. To minimize address reuse, use this command to get a new address for each transaction you wish to receive.",
            "title": "Getting a New Receiving Address"
        },
        {
            "location": "/getting-started/user-guides/hcctl-basics/#sending-hc",
            "text": "To send hc to an address, issue the  sendtoaddress  command to  hcwallet  using  hcctl . Enter the following in your shell, filling in the receiving address and amount to send:  hcctl --wallet sendtoaddress <address> <amount>  If successful,  hcctl  will return a transaction hash that can be used to watch the transaction on the official  Decred Block Explorer .",
            "title": "Sending hc"
        },
        {
            "location": "/getting-started/user-guides/hcctl-basics/#check-network-stats",
            "text": "There are many different commands to check different network stats. Here we will cover sending  getinfo  to  hcd  and  getstakeinfo  to  hcwallet .  To get information about your local  hcd  node, issue the  getinfo  command to  hcd  using  hcctl . Enter the following in your shell:  hcctl getinfo  To get staking information about the Proof-of-Stake network, issue the  getstakeinfo  command to  hcwallet  using  hcctl . Enter the following in your shell:  hcctl --wallet getstakeinfo",
            "title": "Check Network Stats"
        },
        {
            "location": "/getting-started/user-guides/hcctl-basics/#additional-commands",
            "text": "More commands can also be found on the  Program Options  page.",
            "title": "Additional Commands"
        },
        {
            "location": "/getting-started/user-guides/hcwallet-tickets/",
            "text": "Buying Tickets With hcwallet\n\u00b6\n\n\nLast updated for v2.0.0\n\n\nThis guide is intended to walk through ticket buying using \nhcwallet\n. It will cover both manual ticket purchases and automatic ticket purchases for solo-voting and stakepool-voting configurations.\n\n\nPrerequisites:\n\n\n\n\nUse the latest \nhcinstall\n to install \nhcd\n, \nhcwallet,\n and \nhcctl\n. Additional steps will be required if another installation method was used.\n\n\nReview how the launch commands for the Command Prompt (Windows) and Bash (macOS/Linux) shells differ \nhere\n.\n\n\nSetup hcd\n and have it running in the background.\n\n\nSetup hcwallet\n and have it running in the background.\n\n\nFamiliarize yourself with the \nbasics of using hcctl\n.\n\n\nFamiliarize yourself with the \nstaking process\n and the \nticket lifecycle\n\n\n\n\nThis guide assumes you have set up \nhcd\n and \nhcwallet\n using configuration files. If you used \nhcinstall\n, you have configuration files already. Using configuration files is highly recommended - it makes for an easier time issuing commands to \nhcwallet\n and \nhcd\n through \nhcctl\n. A guide for minimum configuration (saving your RPC username and RPC password) can be found \nhere\n.\n\n\nNOTE: \nhcwallet.conf\n is split into two sections labeled \n[Application Options]\n and \n[Ticket Buyer Options]\n. Any setting prefixed by \u2018ticketbuyer.\u2019 must be placed within the lower \n[Ticket Buyer Options]\n section. All other settings go within \n[Application Options]\n.\n\n\n\n\nDecisions\n\u00b6\n\n\nThere are a few decisions to be made before venturing into this guide. First, will you be using a stakepool to delegate your ticket voting rights? Second, will you be purchasing tickets manually or automatically via the ticketbuyer feature?\n\n\nStakepool ticket purchasing allows a stakeholder to delegate voting rights to a stakepool. These stakepools are online at all times (24/7) and very rarely miss a vote. They utilize multi-sig transactions so they\u2019re unable to touch any of your hc. As a downside, most require a small percentage of your voting reward as a pool fee. Stakepool delegated tickets also require a larger transaction size (~540 Bytes vs. ~300 Bytes for solo-voting tickets) for purchasing which results in a slightly higher absolute ticket fee since fees are calculated by hc/kB.\n\n\nSolo-voting requires you to have a voting wallet unlocked at all times (24/7), or else you may miss votes and lose your voting reward. You do not have to pay pool fees and your ticket purchases are more likely to be mined with a smaller absolute fee (due to the miners selecting tickets based on hc/kB ticket fee rates and solo tickets having a smaller TXN size).\n\n\nManual ticket purchasing vs. automated ticketbuyer purchasing is mainly up to personal preference. The normal benefits of automation apply to ticketbuyer, but many may be overwhelmed by the amount variables that can be configured. Also, ticketbuyer\u2019s fee calculation sometimes doesn\u2019t result in the most economical fee for a stakeholder. Some people also enjoy manually purchasing tickets every few days and trying to bid the most economical fee. Both methods will only purchase tickets when your wallet is unlocked.\n\n\n\n\nSolo-voting\n\u00b6\n\n\nREMINDER: Solo-voting with a voting wallet that doesn\u2019t stay online 24/7 may result in missed votes and forfeited stake rewards.\n\n\nTo solo-vote, you simply set the enablevoting option when starting \nhcwallet\n, unlock the wallet with your private passphrase, and buy tickets. With enablevoting enabled and \nhcwallet\n unlocked, your wallet will automatically handle voting.\n\n\nTo set up your \nhcwallet\n for solo-staking, add the following line to your \nhcwallet.conf\n config file in the \n[Application Options]\n section:\n\n\nenablevoting=1\n\n\n\nOnce restarted with that line in \nhcwallet.conf\n your wallet will be configured for solo-voting and you can now start \npurchasing tickets\n.\n\n\n\n\nStakepool-voting\n\u00b6\n\n\nTo allow a stakepool to vote for you, you first have to sign up for a stakepool. A list of them can be found \nhere\n. After signing up, there should be directions for creating a new P2SH address and importing your multi-sig voting script. A brief overview is provided here:\n\n\n\n\nWith your wallet open, issue the \nhcctl --wallet getnewaddress\n command to retrieve an address.\n\n\nUsing that address, issue the \nhcctl --wallet validateaddress <address from step 1>\n command. This should return a JSON object that will be displayed like so:\n\n\n\n\n{\n  \"isvalid\": true,\n  \"address\": \"DsExampleAddr1For2Demo3PurposesOnly\",\n  \"ismine\": true,\n  \"pubkeyaddr\": \"DkExample0Addr1For2Demo4Purposes5Only6Do7Not8Use9Pls0\",\n  \"pubkey\": \"022801337beefc0ffee1dab8d4ffa898a782466c9a1fc00ca8863de5438dc07dcc\",\n  \"iscompressed\": true,\n  \"account\": \"voting\"\n}\n\n\n\n\n\n\nCopy the \npubkeyaddr\n into the stakepool\u2019s \u201cSubmit Address\u201d form and hit the submit button. The page should redirect you to the tickets page, which will display more instructions.\n\n\nAt the top of the tickets page, you should see a \u201cTicket Information\u201d section. Copy your \u201cRedeem Script\u201d and use it to issue the \nhcctl --wallet importscript <Insert Redeem Script Here>\n command.\n\n\n\n\nWith the stakepool configured and your multi-sig script imported to your wallet, you can now start \npurchasing tickets\n.\n\n\n\n\nTicket Purchasing\n\u00b6\n\n\nBoth manual and automatic ticket purchasing require your wallet to be unlocked via the \nhcctl --wallet walletpassphrase <private passphrase> <time limit>\n command.\n\n\nThere are three things you might want to understand before purchasing tickets: the \npurchaseticket\n command, when/why a \nticketfee\n is important, and the significance of \nticket price\n.\n\n\n\n\npurchaseticket Command\n\n\n\n\nThe \npurchaseticket\n command will be used to purchase tickets whether manual or automatic. Let\u2019s take a closer look at the command and its arguments:\n\n\npurchaseticket \"fromaccount\" spendlimit (minconf=1 \"ticketaddress\" numtickets \"pooladdress\" poolfees expiry \"comment\")\n\n\n\n\n\n\nfromaccount\n    =  Required String: The account from which to purchase tickets (e.g. \u201cdefault\u201d).\n\n\nspendlimit\n     =  Required Number: Limit on the amount to spend on ticket (e.g. 50).\n\n\nminconf\n        =  Optional Number: Minimum number of block confirmations required (e.g. 1).\n\n\nticketaddress\n  =  Optional String: The ticket address to which voting rights are given\n\n\nnumtickets\n     =  Optional Number: The number of tickets to purchase at once (e.g. 1)\n\n\npooladdress\n    =  Optional String: The address to pay stake pool fees to\n\n\npoolfees\n       =  Optional Number: The percentage of fees to pay to the stake pool (e.g. 5)\n\n\nexpiry\n         =  Optional Number: The block height where unmined tickets will expire from the mempool, returning the original hc to your \u201cfromaccount\u201d. If left blank, tickets will only expire in the mempool when the ticket price changes.\n\n\ncomment\n        =  Optional String: This argument is unused and has no significance.\n\n\n\n\n\n\nTicket Fees\n\n\n\n\nYour \nticketfee\n is the hc/kB rate you\u2019ll pay to have your ticket purchase be included in a block by a miner. You\u2019ll notice that the above \npurchaseticket\n command doesn\u2019t include any \nticketfee\n arguments. The \nticketfee\n argument can be set two ways.\n\n\n\n\nDuring startup by adding \nticketfee=<fee rate>\n to the \n[Application Options]\n of your \nhcwallet.conf\n.\n\n\nWhile your wallet is running, using the \nhcctl --wallet setticketfee <fee rate>\n command. This is not a permanent setting and will default to 0.001 every time your wallet is restarted unless a ticketfee is specified in \nhcwallet.conf\n.\n\n\n\n\nWhy are ticket fees important? Usually the default fee of 0.001 is enough to get your tickets mined, however there are extremely rare circumstances where an increased ticket fee may be beneficial. When ticket demand outpaces supply (there are only a maximum of 2880 tickets available at each price interval) a situation is created where stakeholders can increase their ticket fees in order to get their ticket purchases mined ahead of others offering lower fees. This type of \u201cfee wars\u201d scenario has not occurred since the new ticket price algorithm was introduced in July 2017.\n\n\nThird party sites such as \nhttps://hcstats.com\n and \nhttp://posmaster.info\n can be used to find the average ticket fee in the mempool.\n\n\n\n\nTicket Price\n\n\n\n\nTo get the current ticket price, issue the \nhcctl --wallet getstakeinfo\n command and look for the \ndifficulty\n value. This is the price of each ticket in the current price window. You\u2019ll want to adjust your \nspendlimit\n argument in the \npurchaseticket\n command to be greater than this \ndifficulty\n value when purchasing tickets manually.\n\n\n\n\nManual Ticket Purchase\n\u00b6\n\n\n\n\nSolo Tickets\n\n\n\n\nTo purchase tickets used for solo-staking, you only need to specify the \nfromaccount\n and \nspendlimit\n arguments while using the \npurchaseticket\n command. For example: \nhcctl --wallet purchaseticket \"default\" 50\n would use hc from your \ndefault\n account to purchase a ticket if the current ticket price was a max of 50 hc.\n\n\nIf you wish to specify the \nnumtickets\n or \nexpiry\n arguments, you would specify a \nminconf\n of 1, an empty \nticketaddress\n (\u201c\u201d), an empty \npooladdress\n (\u201c\u201d), and an empty \npoolfees\n (0). Two example follow:\n\n\n\n\nhcctl --wallet purchaseticket \"default\" 50 1 \"\" 5\n would purchase 5 tickets, as the 5th argument (\nnumtickets\n) is set to 5.\n\n\nhcctl --wallet purchaseticket \"default\" 50 1 \"\" 5 \"\" 0 100000\n would purchase 5 tickets that would expire from the mempool if not mined by block 100,000, as the 8th argument (\nexpiry\n) is set to 100000.\n\n\n\n\n\n\nPool Tickets\n\n\n\n\nTo purchase tickets with their voting rights delegated to a stakepool, we have to use the full \npurchaseticket\n command.\n\n\n\n\nYour \nticketaddress\n is the P2SH Address found at the top of \u201cTickets\u201d page of your stakepool under the \u201cTicket Information\u201d section.\n\n\nYour \npooladdress\n is the address for your stakepool\u2019s fees are collected. This can be found in the \u201cTicket Instructions\u201d section of your stakepool\u2019s \u201cTickets\u201d page.\n\n\nYour \npoolfees\n is the percentage of the stake reward that will go to the \npooladdress\n when a ticket votes. It is important to match your pool\u2019s advertised fee.\n\n\n\n\nA quick example:\n\n\nhcctl --wallet purchaseticket \"default\" 23 1 DcExampleAddr1For2Demo3PurposesOnly 1 DsExampleAddr1For2Demo3PurposesOnly 7.5\n would use hc from your \ndefault\n account to purchase 1 ticket if the current ticket price is a max of 23 hc. The P2SH Address received from the stakepool is \nDcExampleAddr1For2Demo3PurposesOnly\n and their fee address is \nDsExampleAddr1For2Demo3PurposesOnly\n. They will collect a 7.5% fee if this ticket successfully votes. This ticket will not expire from the mempool until the ticket price changes, as only 7 arguments were specified (no \nexpiry\n).\n\n\n\n\nTicketbuyer Configuration\n\u00b6\n\n\nTo set up your \nhcwallet\n to enable its built-in \nticketbuyer\n feature, add the following line to your \nhcwallet.conf\n config file in the \n[Application Options]\n section:\n\n\nenableticketbuyer=1\n\n\n\nIf you are using a stakepool, you should also add the following lines (all of these can be found on your stakepool\u2019s \u201cTickets\u201d page):\n\n\nticketaddress=<P2SH Address shared with Stakepool>\npooladdress=<Stakepool's Fee Collection Address>\npoolfees=<Stakepool's Required Reward Fee>\n\n\n\nWith this configuration \nticketbuyer\n will start running with it\u2019s default settings. You may want to modify the \nticketbuyer\n configuration to tweak its behaviour - the full set of configuration options and their default values can be found in the chart \nbelow\n.\n\n\nWith \nticketbuyer\n running and your wallet unlocked, you can watch your \nhcwallet\n console to see whether or not tickets are being purchased. It will even display an explanation if tickets weren\u2019t purchased.\n\n\n\n\nFull Ticketbuyer Options\n\u00b6\n\n\nWe recommended you read\nand understand the options available before using the feature as you may set your fees and ticket\nprices higher than desired.\n\n\nAll of these options can be specified on the command line or in hcwallet.conf in the \n[Ticket Buyer Options]\n section. Note that at\nthis time there is no way to change settings while hcwallet is running: you will need to restart it to\nadjust your settings.\n\n\n\n\n\n\n\n\nParameter\n\n\nDescription\n\n\nDefault\n\n\nExplanation\n\n\n\n\n\n\n\n\n\n\nticketbuyer.avgpricemode\n\n\nThe mode to use for calculating the average price if pricetarget is disabled (vwap, pool, dual)\n\n\nvwap\n\n\n!\n\n\n\n\n\n\nticketbuyer.avgpricevwapdelta\n\n\nThe number of blocks to use from the current block to calculate the VWAP\n\n\n2880\n\n\n!\n\n\n\n\n\n\nticketbuyer.maxfee\n\n\nMaximum ticket fee per KB\n\n\n0.1 hc\n\n\nTickets are entered into the mempool in order of their fee per kilobyte. This sets the maximum fee you are willing to pay.\n\n\n\n\n\n\nticketbuyer.minfee\n\n\nMinimum ticket fee per KB\n\n\n0.001 hc\n\n\nThe minimum fee per kilobyte you are willing to pay. This should probably be left at 0.001 unless you know what you\u2019re doing.\n\n\n\n\n\n\nticketbuyer.feesource\n\n\nThe fee source to use for ticket fee per KB (median or mean)\n\n\nmedian\n\n\nThe fee chosen by the ticket buyer will be based off either the median (line all the fees up in order and choose the middle one) or the mean (also known as the average; add all the fees up and divide by 2). It\u2019s recommended to leave this at median as there have been instances of fee manipulation where people try to force up the average by buying one ticket with a very high fee.\n\n\n\n\n\n\nticketbuyer.maxperblock\n\n\nMaximum tickets per block, with negative numbers indicating buy one ticket every 1-in-n blocks\n\n\n5\n\n\nDo not buy more than this number of tickets per block. A negative number means buy one ticket every n blocks. e.g. -2 would mean buy a ticket every second block.\n\n\n\n\n\n\nticketbuyer.blockstoavg\n\n\nNumber of blocks to average for fees calculation\n\n\n11\n\n\nFees are calculated using this many previous blocks. You can usually leave this at the default.\n\n\n\n\n\n\nticketbuyer.feetargetscaling\n\n\nScaling factor for setting the ticket fee, multiplies by the average fee\n\n\n1\n\n\nThe average fee is multiplied by this number to give the fee to pay. DO NOT change this until you really know what you\u2019re doing. It could raise your fees very high. Remember, fees are non-refundable!\n\n\n\n\n\n\nticketbuyer.dontwaitfortickets\n\n\nDon\u2019t wait until your last round of tickets have entered the blockchain to attempt to purchase more\n\n\n\n\nBy default, the ticket buyer will not buy more tickets until all the previous ones purchased have been entered into the blockchain. You can set this to purchase more even if some are still in the mempool.\n\n\n\n\n\n\nticketbuyer.nospreadticketpurchases\n\n\nDo not spread ticket purchases evenly throughout the window\n\n\n\n\nBy default \nticketbuyer\n spreads out the purchase of tickets which may result in more favourable fees. This setting tells \nticketbuyer\n to purchase all tickets at once.\n\n\n\n\n\n\nticketbuyer.maxinmempool\n\n\nThe maximum number of your tickets allowed in mempool before purchasing more tickets\n\n\n40\n\n\nIf you have this many tickets in the mempool, the ticket buyer will not buy more until some are accepted into the blockchain.\n\n\n\n\n\n\nticketbuyer.expirydelta\n\n\nNumber of blocks in the future before the ticket expires\n\n\n16\n\n\nYou can set an expiry so that if your tickets are not accepted into the blockchain due to high fees, they will cancel and you can try again by raising your fees.\n\n\n\n\n\n\nticketbuyer.maxpriceabsolute\n\n\nMaximum absolute price to purchase a ticket\n\n\n0 hc\n\n\nIf the ticket price is above this value, you will not buy more tickets. The default of 0 turns this off.\n\n\n\n\n\n\nticketbuyer.maxpricerelative\n\n\nScaling factor for setting the maximum price, multiplies by the average price\n\n\n1.25\n\n\nIf the current window price is significantly higher than the last few windows, do not buy any tickets. E.g. With the default value of 1.25, if the average price of the last few windows is 50hc, you won\u2019t buy any tickets if the current window is over 75hc.\n\n\n\n\n\n\nticketbuyer.balancetomaintainabsolute\n\n\nAmount of funds to keep in wallet when stake mining\n\n\n0 hc\n\n\nIf your balance is lower than this number, you will not buy tickets. The default of 0 will use all the funds in your account to buy tickets.\n\n\n\n\n\n\nticketbuyer.balancetomaintainrelative\n\n\nProportion of funds to leave in wallet when stake mining\n\n\n0.3\n\n\nSimilar to the last one, except it\u2019s based on a percentage of your total funds.",
            "title": "Buying Tickets"
        },
        {
            "location": "/getting-started/user-guides/hcwallet-tickets/#buying-tickets-with-hcwallet",
            "text": "Last updated for v2.0.0  This guide is intended to walk through ticket buying using  hcwallet . It will cover both manual ticket purchases and automatic ticket purchases for solo-voting and stakepool-voting configurations.  Prerequisites:   Use the latest  hcinstall  to install  hcd ,  hcwallet,  and  hcctl . Additional steps will be required if another installation method was used.  Review how the launch commands for the Command Prompt (Windows) and Bash (macOS/Linux) shells differ  here .  Setup hcd  and have it running in the background.  Setup hcwallet  and have it running in the background.  Familiarize yourself with the  basics of using hcctl .  Familiarize yourself with the  staking process  and the  ticket lifecycle   This guide assumes you have set up  hcd  and  hcwallet  using configuration files. If you used  hcinstall , you have configuration files already. Using configuration files is highly recommended - it makes for an easier time issuing commands to  hcwallet  and  hcd  through  hcctl . A guide for minimum configuration (saving your RPC username and RPC password) can be found  here .  NOTE:  hcwallet.conf  is split into two sections labeled  [Application Options]  and  [Ticket Buyer Options] . Any setting prefixed by \u2018ticketbuyer.\u2019 must be placed within the lower  [Ticket Buyer Options]  section. All other settings go within  [Application Options] .",
            "title": "Buying Tickets With hcwallet"
        },
        {
            "location": "/getting-started/user-guides/hcwallet-tickets/#decisions",
            "text": "There are a few decisions to be made before venturing into this guide. First, will you be using a stakepool to delegate your ticket voting rights? Second, will you be purchasing tickets manually or automatically via the ticketbuyer feature?  Stakepool ticket purchasing allows a stakeholder to delegate voting rights to a stakepool. These stakepools are online at all times (24/7) and very rarely miss a vote. They utilize multi-sig transactions so they\u2019re unable to touch any of your hc. As a downside, most require a small percentage of your voting reward as a pool fee. Stakepool delegated tickets also require a larger transaction size (~540 Bytes vs. ~300 Bytes for solo-voting tickets) for purchasing which results in a slightly higher absolute ticket fee since fees are calculated by hc/kB.  Solo-voting requires you to have a voting wallet unlocked at all times (24/7), or else you may miss votes and lose your voting reward. You do not have to pay pool fees and your ticket purchases are more likely to be mined with a smaller absolute fee (due to the miners selecting tickets based on hc/kB ticket fee rates and solo tickets having a smaller TXN size).  Manual ticket purchasing vs. automated ticketbuyer purchasing is mainly up to personal preference. The normal benefits of automation apply to ticketbuyer, but many may be overwhelmed by the amount variables that can be configured. Also, ticketbuyer\u2019s fee calculation sometimes doesn\u2019t result in the most economical fee for a stakeholder. Some people also enjoy manually purchasing tickets every few days and trying to bid the most economical fee. Both methods will only purchase tickets when your wallet is unlocked.",
            "title": "Decisions"
        },
        {
            "location": "/getting-started/user-guides/hcwallet-tickets/#solo-voting",
            "text": "REMINDER: Solo-voting with a voting wallet that doesn\u2019t stay online 24/7 may result in missed votes and forfeited stake rewards.  To solo-vote, you simply set the enablevoting option when starting  hcwallet , unlock the wallet with your private passphrase, and buy tickets. With enablevoting enabled and  hcwallet  unlocked, your wallet will automatically handle voting.  To set up your  hcwallet  for solo-staking, add the following line to your  hcwallet.conf  config file in the  [Application Options]  section:  enablevoting=1  Once restarted with that line in  hcwallet.conf  your wallet will be configured for solo-voting and you can now start  purchasing tickets .",
            "title": "Solo-voting"
        },
        {
            "location": "/getting-started/user-guides/hcwallet-tickets/#stakepool-voting",
            "text": "To allow a stakepool to vote for you, you first have to sign up for a stakepool. A list of them can be found  here . After signing up, there should be directions for creating a new P2SH address and importing your multi-sig voting script. A brief overview is provided here:   With your wallet open, issue the  hcctl --wallet getnewaddress  command to retrieve an address.  Using that address, issue the  hcctl --wallet validateaddress <address from step 1>  command. This should return a JSON object that will be displayed like so:   {\n  \"isvalid\": true,\n  \"address\": \"DsExampleAddr1For2Demo3PurposesOnly\",\n  \"ismine\": true,\n  \"pubkeyaddr\": \"DkExample0Addr1For2Demo4Purposes5Only6Do7Not8Use9Pls0\",\n  \"pubkey\": \"022801337beefc0ffee1dab8d4ffa898a782466c9a1fc00ca8863de5438dc07dcc\",\n  \"iscompressed\": true,\n  \"account\": \"voting\"\n}   Copy the  pubkeyaddr  into the stakepool\u2019s \u201cSubmit Address\u201d form and hit the submit button. The page should redirect you to the tickets page, which will display more instructions.  At the top of the tickets page, you should see a \u201cTicket Information\u201d section. Copy your \u201cRedeem Script\u201d and use it to issue the  hcctl --wallet importscript <Insert Redeem Script Here>  command.   With the stakepool configured and your multi-sig script imported to your wallet, you can now start  purchasing tickets .",
            "title": "Stakepool-voting"
        },
        {
            "location": "/getting-started/user-guides/hcwallet-tickets/#ticket-purchasing",
            "text": "Both manual and automatic ticket purchasing require your wallet to be unlocked via the  hcctl --wallet walletpassphrase <private passphrase> <time limit>  command.  There are three things you might want to understand before purchasing tickets: the  purchaseticket  command, when/why a  ticketfee  is important, and the significance of  ticket price .   purchaseticket Command   The  purchaseticket  command will be used to purchase tickets whether manual or automatic. Let\u2019s take a closer look at the command and its arguments:  purchaseticket \"fromaccount\" spendlimit (minconf=1 \"ticketaddress\" numtickets \"pooladdress\" poolfees expiry \"comment\")   fromaccount     =  Required String: The account from which to purchase tickets (e.g. \u201cdefault\u201d).  spendlimit      =  Required Number: Limit on the amount to spend on ticket (e.g. 50).  minconf         =  Optional Number: Minimum number of block confirmations required (e.g. 1).  ticketaddress   =  Optional String: The ticket address to which voting rights are given  numtickets      =  Optional Number: The number of tickets to purchase at once (e.g. 1)  pooladdress     =  Optional String: The address to pay stake pool fees to  poolfees        =  Optional Number: The percentage of fees to pay to the stake pool (e.g. 5)  expiry          =  Optional Number: The block height where unmined tickets will expire from the mempool, returning the original hc to your \u201cfromaccount\u201d. If left blank, tickets will only expire in the mempool when the ticket price changes.  comment         =  Optional String: This argument is unused and has no significance.    Ticket Fees   Your  ticketfee  is the hc/kB rate you\u2019ll pay to have your ticket purchase be included in a block by a miner. You\u2019ll notice that the above  purchaseticket  command doesn\u2019t include any  ticketfee  arguments. The  ticketfee  argument can be set two ways.   During startup by adding  ticketfee=<fee rate>  to the  [Application Options]  of your  hcwallet.conf .  While your wallet is running, using the  hcctl --wallet setticketfee <fee rate>  command. This is not a permanent setting and will default to 0.001 every time your wallet is restarted unless a ticketfee is specified in  hcwallet.conf .   Why are ticket fees important? Usually the default fee of 0.001 is enough to get your tickets mined, however there are extremely rare circumstances where an increased ticket fee may be beneficial. When ticket demand outpaces supply (there are only a maximum of 2880 tickets available at each price interval) a situation is created where stakeholders can increase their ticket fees in order to get their ticket purchases mined ahead of others offering lower fees. This type of \u201cfee wars\u201d scenario has not occurred since the new ticket price algorithm was introduced in July 2017.  Third party sites such as  https://hcstats.com  and  http://posmaster.info  can be used to find the average ticket fee in the mempool.   Ticket Price   To get the current ticket price, issue the  hcctl --wallet getstakeinfo  command and look for the  difficulty  value. This is the price of each ticket in the current price window. You\u2019ll want to adjust your  spendlimit  argument in the  purchaseticket  command to be greater than this  difficulty  value when purchasing tickets manually.",
            "title": "Ticket Purchasing"
        },
        {
            "location": "/getting-started/user-guides/hcwallet-tickets/#manual-ticket-purchase",
            "text": "Solo Tickets   To purchase tickets used for solo-staking, you only need to specify the  fromaccount  and  spendlimit  arguments while using the  purchaseticket  command. For example:  hcctl --wallet purchaseticket \"default\" 50  would use hc from your  default  account to purchase a ticket if the current ticket price was a max of 50 hc.  If you wish to specify the  numtickets  or  expiry  arguments, you would specify a  minconf  of 1, an empty  ticketaddress  (\u201c\u201d), an empty  pooladdress  (\u201c\u201d), and an empty  poolfees  (0). Two example follow:   hcctl --wallet purchaseticket \"default\" 50 1 \"\" 5  would purchase 5 tickets, as the 5th argument ( numtickets ) is set to 5.  hcctl --wallet purchaseticket \"default\" 50 1 \"\" 5 \"\" 0 100000  would purchase 5 tickets that would expire from the mempool if not mined by block 100,000, as the 8th argument ( expiry ) is set to 100000.    Pool Tickets   To purchase tickets with their voting rights delegated to a stakepool, we have to use the full  purchaseticket  command.   Your  ticketaddress  is the P2SH Address found at the top of \u201cTickets\u201d page of your stakepool under the \u201cTicket Information\u201d section.  Your  pooladdress  is the address for your stakepool\u2019s fees are collected. This can be found in the \u201cTicket Instructions\u201d section of your stakepool\u2019s \u201cTickets\u201d page.  Your  poolfees  is the percentage of the stake reward that will go to the  pooladdress  when a ticket votes. It is important to match your pool\u2019s advertised fee.   A quick example:  hcctl --wallet purchaseticket \"default\" 23 1 DcExampleAddr1For2Demo3PurposesOnly 1 DsExampleAddr1For2Demo3PurposesOnly 7.5  would use hc from your  default  account to purchase 1 ticket if the current ticket price is a max of 23 hc. The P2SH Address received from the stakepool is  DcExampleAddr1For2Demo3PurposesOnly  and their fee address is  DsExampleAddr1For2Demo3PurposesOnly . They will collect a 7.5% fee if this ticket successfully votes. This ticket will not expire from the mempool until the ticket price changes, as only 7 arguments were specified (no  expiry ).",
            "title": "Manual Ticket Purchase"
        },
        {
            "location": "/getting-started/user-guides/hcwallet-tickets/#ticketbuyer-configuration",
            "text": "To set up your  hcwallet  to enable its built-in  ticketbuyer  feature, add the following line to your  hcwallet.conf  config file in the  [Application Options]  section:  enableticketbuyer=1  If you are using a stakepool, you should also add the following lines (all of these can be found on your stakepool\u2019s \u201cTickets\u201d page):  ticketaddress=<P2SH Address shared with Stakepool>\npooladdress=<Stakepool's Fee Collection Address>\npoolfees=<Stakepool's Required Reward Fee>  With this configuration  ticketbuyer  will start running with it\u2019s default settings. You may want to modify the  ticketbuyer  configuration to tweak its behaviour - the full set of configuration options and their default values can be found in the chart  below .  With  ticketbuyer  running and your wallet unlocked, you can watch your  hcwallet  console to see whether or not tickets are being purchased. It will even display an explanation if tickets weren\u2019t purchased.",
            "title": "Ticketbuyer Configuration"
        },
        {
            "location": "/getting-started/user-guides/hcwallet-tickets/#full-ticketbuyer-options",
            "text": "We recommended you read\nand understand the options available before using the feature as you may set your fees and ticket\nprices higher than desired.  All of these options can be specified on the command line or in hcwallet.conf in the  [Ticket Buyer Options]  section. Note that at\nthis time there is no way to change settings while hcwallet is running: you will need to restart it to\nadjust your settings.     Parameter  Description  Default  Explanation      ticketbuyer.avgpricemode  The mode to use for calculating the average price if pricetarget is disabled (vwap, pool, dual)  vwap  !    ticketbuyer.avgpricevwapdelta  The number of blocks to use from the current block to calculate the VWAP  2880  !    ticketbuyer.maxfee  Maximum ticket fee per KB  0.1 hc  Tickets are entered into the mempool in order of their fee per kilobyte. This sets the maximum fee you are willing to pay.    ticketbuyer.minfee  Minimum ticket fee per KB  0.001 hc  The minimum fee per kilobyte you are willing to pay. This should probably be left at 0.001 unless you know what you\u2019re doing.    ticketbuyer.feesource  The fee source to use for ticket fee per KB (median or mean)  median  The fee chosen by the ticket buyer will be based off either the median (line all the fees up in order and choose the middle one) or the mean (also known as the average; add all the fees up and divide by 2). It\u2019s recommended to leave this at median as there have been instances of fee manipulation where people try to force up the average by buying one ticket with a very high fee.    ticketbuyer.maxperblock  Maximum tickets per block, with negative numbers indicating buy one ticket every 1-in-n blocks  5  Do not buy more than this number of tickets per block. A negative number means buy one ticket every n blocks. e.g. -2 would mean buy a ticket every second block.    ticketbuyer.blockstoavg  Number of blocks to average for fees calculation  11  Fees are calculated using this many previous blocks. You can usually leave this at the default.    ticketbuyer.feetargetscaling  Scaling factor for setting the ticket fee, multiplies by the average fee  1  The average fee is multiplied by this number to give the fee to pay. DO NOT change this until you really know what you\u2019re doing. It could raise your fees very high. Remember, fees are non-refundable!    ticketbuyer.dontwaitfortickets  Don\u2019t wait until your last round of tickets have entered the blockchain to attempt to purchase more   By default, the ticket buyer will not buy more tickets until all the previous ones purchased have been entered into the blockchain. You can set this to purchase more even if some are still in the mempool.    ticketbuyer.nospreadticketpurchases  Do not spread ticket purchases evenly throughout the window   By default  ticketbuyer  spreads out the purchase of tickets which may result in more favourable fees. This setting tells  ticketbuyer  to purchase all tickets at once.    ticketbuyer.maxinmempool  The maximum number of your tickets allowed in mempool before purchasing more tickets  40  If you have this many tickets in the mempool, the ticket buyer will not buy more until some are accepted into the blockchain.    ticketbuyer.expirydelta  Number of blocks in the future before the ticket expires  16  You can set an expiry so that if your tickets are not accepted into the blockchain due to high fees, they will cancel and you can try again by raising your fees.    ticketbuyer.maxpriceabsolute  Maximum absolute price to purchase a ticket  0 hc  If the ticket price is above this value, you will not buy more tickets. The default of 0 turns this off.    ticketbuyer.maxpricerelative  Scaling factor for setting the maximum price, multiplies by the average price  1.25  If the current window price is significantly higher than the last few windows, do not buy any tickets. E.g. With the default value of 1.25, if the average price of the last few windows is 50hc, you won\u2019t buy any tickets if the current window is over 75hc.    ticketbuyer.balancetomaintainabsolute  Amount of funds to keep in wallet when stake mining  0 hc  If your balance is lower than this number, you will not buy tickets. The default of 0 will use all the funds in your account to buy tickets.    ticketbuyer.balancetomaintainrelative  Proportion of funds to leave in wallet when stake mining  0.3  Similar to the last one, except it\u2019s based on a percentage of your total funds.",
            "title": "Full Ticketbuyer Options"
        },
        {
            "location": "/getting-started/user-guides/web/",
            "text": "Web Client User Guide\n\u00b6\n\n\n\n\nA simple web wallet is available for users who do not want to install\nadditional software on their computer.  It is based on\n\nCopay\n with Decred specific changes\nadded and can be found at\n\nhttps://wallet.decred.org\n\n\nThere are a couple of things you need to know about the web client\nbefore you use it:\n\n\n\n\nYou cannot\n  \nstake mine\n\n  with it.\n\n\nYour wallet is kept entirely in the local storage of your web\n  browser.  This means that if you delete your local storage, you will\n  delete your wallet and must recreate it from the seed.\n\n\nThe security of your wallet depends entirely on the security of your\n  web browser.\n\n\nYou can put a pin on your wallet to prevent sending funds but any\n  other access is dependent entirely on the access controls on your\n  computer, not on the server or any login details.\n\n\n\n\n\n\n Create your web client wallet\n\u00b6\n\n\n\n\nStep One\n\n\n\n\nGo to \nhttps://wallet.decred.org\n. You will\nbe presented with the \nTerms and Conditions\n screen. Pay extra\nattention to the following:\n\n\nJust like the command-line wallet, if you lose your seed words or your\npassword for sending funds you will lose access to your wallet. There\nis no password reset. Also note that all transactions on Decred are\nirreversible by design. If you accidentally send funds to the wrong\naddress, you will need to ask the recipient to send them back. The\ndevelopers are unable to reverse transactions.\n\n\nClick \nI Agree\n once you have read the \nTerms and Conditions\n. You\nwill now see the welcome screen. If this is the first time you\nhave used Decred, click \nGet Started\n. If you want to restore a\npreviously used wallet, click \nImport Backup\n. This guide will\nassume you are just starting out so click \nGet Started\n.\n\n\n\n\nStep Two\n\n\n\n\nClick the dropdown in the top left, then click \nAdd wallet\n. Click\n\nCreate New Wallet\n. Give your wallet a name then click \nCreate New Wallet\n.\n\n\nA wallet will be generated for you.\n\n\n\n\nStep Three\n\n\n\n\nYour wallet is now created and ready to use. However, before you do\nanything else, you should add a password for sending funds and backup\nthe seed words that were used to create your wallet. This is doubly\ntrue for the web client which does not store a permanent record of\nyour wallet. Your wallet data is stored in the browser cache and\ncan be deleted quite easily. If you are running in incognito mode,\nit will be deleted as soon as you close the browser. \nWITHOUT THIS\nSEED PHRASE YOU LOSE ACCESS TO ALL FUNDS IN YOUR WALLET\n should\nthe wallet data be deleted. The funds themselves still exist in\nthe blockchain, however, without the seed you cannot access them.\n\n\nClick the \nPreferences\n button on the right opposite your wallet name. There are really only three things you will be interested in here:\n\n\n\n\n\n\n\n\nOption\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nWallet Alias\n\n\nYou can rename the wallet if you wish.\n\n\n\n\n\n\nRequest Password for Spending Funds\n\n\nSince your wallet is saved in the browser cache, there is no extra password required to access it. By setting a password here, you ensure that only you can send funds if someone else accesses your browser. Type a password in and click \nSet\n. Note the alert that says passwords cannot be recovered. There is no password reset feature on the wallet. If you lose the password, you will never be able to move your coins out of the wallet or use them for proof-of-stake voting.\n\n\n\n\n\n\nBackup\n\n\nThis is where you will find your seed words.\n\n\n\n\n\n\n\n\n\n\nStep Four\n\n\n\n\nClick \nBackup\n. You will see this screen:\n\n\nFirst of all, read the note. Only use ONE wallet at a time with a\ngiven seed (See: \nFAQ\n). You can have multiple wallets installed on\ndifferent machines, but only one of them should be running at any\ngiven time. Click \nShow Wallet Seed\n. Write this down somewhere safe,\nor put it in an encrypted document to which you will not forget the\npassword. This list of words is used to generate the authentication\nkey for your wallet. Anyone who possesses this list can access the\nfunds in your wallet.\n\n\n\n\nVERY IMPORTANT\n\n\n\n\nDO NOT, UNDER ANY CIRCUMSTANCES, GIVE YOUR SEED WORDS TO ANYONE! NOT EVEN THE DEVELOPERS!\n\n\nOnce you have written the words down (and have triple-checked that they are correct; capitalization is important), go to the next step.\n\n\n\n\nStep Five\n\n\n\n\nNow that you have written down your seed words and checked them, do it\nagain. Seriously. This step is critical. Without this list your wallet\ncannot be reconstructed and no one, not even the developers, can\nrestore it. Now that you are sure the list is stored correctly, click\n\nDelete Words\n. Click \nBack\n twice to get to the main wallet screen.\n\n\n\n\n Send funds with the web client\n\u00b6\n\n\n\n\nStep One\n\n\n\n\nOn the main web wallet page, click the \nSend\n button at the\nbottom. You will be taken to this page. Note the \nAdvanced Options\n\nsection has already been expanded. In the \nTo\n field, put in the\nDecred address of the recipient.\n\n\n\n\nStep Two\n\n\n\n\nIn \nAmount\n, enter the value in HC to send to the recipient. If you\nwish you can type an optional message in the \nNote\n field. Press\n\nSend\n. The \nUse Unconfirmed Funds\n option lets you use funds that the\nnetwork knows are being sent to you but have not yet been confirmed by\n\nproof-of-work miners\n. If\nthis is turned on and the amount specified can only be covered by\nusing unconfirmed funds, the transaction will not proceed until the\nrequired funds have been confirmed.\n\n\n\n\n Receive funds with the web client\n\u00b6\n\n\n\n\nStep One\n\n\n\n\nClick the \nReceive\n button at the bottom of the window. You will see\nthis screen:\n\n\nGive the person sending you HC the address displayed (it will start\nwith \nDs\n) or they can use the QR code if their wallet or service\naccepts them. You can use the same address as often as you want, but\nfor privacy it is recommended that you generate a new address each\ntime. Do not worry about being given a duplicate address. There are\naround \n2.08x10^93\n possible addresses, so we will probably reach the\nheat death of the universe before we run out of Decred addresses.",
            "title": "Web Wallet"
        },
        {
            "location": "/getting-started/user-guides/web/#web-client-user-guide",
            "text": "A simple web wallet is available for users who do not want to install\nadditional software on their computer.  It is based on Copay  with Decred specific changes\nadded and can be found at https://wallet.decred.org  There are a couple of things you need to know about the web client\nbefore you use it:   You cannot\n   stake mine \n  with it.  Your wallet is kept entirely in the local storage of your web\n  browser.  This means that if you delete your local storage, you will\n  delete your wallet and must recreate it from the seed.  The security of your wallet depends entirely on the security of your\n  web browser.  You can put a pin on your wallet to prevent sending funds but any\n  other access is dependent entirely on the access controls on your\n  computer, not on the server or any login details.",
            "title": " Web Client User Guide"
        },
        {
            "location": "/getting-started/user-guides/web/#create-your-web-client-wallet",
            "text": "Step One   Go to  https://wallet.decred.org . You will\nbe presented with the  Terms and Conditions  screen. Pay extra\nattention to the following:  Just like the command-line wallet, if you lose your seed words or your\npassword for sending funds you will lose access to your wallet. There\nis no password reset. Also note that all transactions on Decred are\nirreversible by design. If you accidentally send funds to the wrong\naddress, you will need to ask the recipient to send them back. The\ndevelopers are unable to reverse transactions.  Click  I Agree  once you have read the  Terms and Conditions . You\nwill now see the welcome screen. If this is the first time you\nhave used Decred, click  Get Started . If you want to restore a\npreviously used wallet, click  Import Backup . This guide will\nassume you are just starting out so click  Get Started .   Step Two   Click the dropdown in the top left, then click  Add wallet . Click Create New Wallet . Give your wallet a name then click  Create New Wallet .  A wallet will be generated for you.   Step Three   Your wallet is now created and ready to use. However, before you do\nanything else, you should add a password for sending funds and backup\nthe seed words that were used to create your wallet. This is doubly\ntrue for the web client which does not store a permanent record of\nyour wallet. Your wallet data is stored in the browser cache and\ncan be deleted quite easily. If you are running in incognito mode,\nit will be deleted as soon as you close the browser.  WITHOUT THIS\nSEED PHRASE YOU LOSE ACCESS TO ALL FUNDS IN YOUR WALLET  should\nthe wallet data be deleted. The funds themselves still exist in\nthe blockchain, however, without the seed you cannot access them.  Click the  Preferences  button on the right opposite your wallet name. There are really only three things you will be interested in here:     Option  Description      Wallet Alias  You can rename the wallet if you wish.    Request Password for Spending Funds  Since your wallet is saved in the browser cache, there is no extra password required to access it. By setting a password here, you ensure that only you can send funds if someone else accesses your browser. Type a password in and click  Set . Note the alert that says passwords cannot be recovered. There is no password reset feature on the wallet. If you lose the password, you will never be able to move your coins out of the wallet or use them for proof-of-stake voting.    Backup  This is where you will find your seed words.      Step Four   Click  Backup . You will see this screen:  First of all, read the note. Only use ONE wallet at a time with a\ngiven seed (See:  FAQ ). You can have multiple wallets installed on\ndifferent machines, but only one of them should be running at any\ngiven time. Click  Show Wallet Seed . Write this down somewhere safe,\nor put it in an encrypted document to which you will not forget the\npassword. This list of words is used to generate the authentication\nkey for your wallet. Anyone who possesses this list can access the\nfunds in your wallet.   VERY IMPORTANT   DO NOT, UNDER ANY CIRCUMSTANCES, GIVE YOUR SEED WORDS TO ANYONE! NOT EVEN THE DEVELOPERS!  Once you have written the words down (and have triple-checked that they are correct; capitalization is important), go to the next step.   Step Five   Now that you have written down your seed words and checked them, do it\nagain. Seriously. This step is critical. Without this list your wallet\ncannot be reconstructed and no one, not even the developers, can\nrestore it. Now that you are sure the list is stored correctly, click Delete Words . Click  Back  twice to get to the main wallet screen.",
            "title": " Create your web client wallet"
        },
        {
            "location": "/getting-started/user-guides/web/#send-funds-with-the-web-client",
            "text": "Step One   On the main web wallet page, click the  Send  button at the\nbottom. You will be taken to this page. Note the  Advanced Options \nsection has already been expanded. In the  To  field, put in the\nDecred address of the recipient.   Step Two   In  Amount , enter the value in HC to send to the recipient. If you\nwish you can type an optional message in the  Note  field. Press Send . The  Use Unconfirmed Funds  option lets you use funds that the\nnetwork knows are being sent to you but have not yet been confirmed by proof-of-work miners . If\nthis is turned on and the amount specified can only be covered by\nusing unconfirmed funds, the transaction will not proceed until the\nrequired funds have been confirmed.",
            "title": " Send funds with the web client"
        },
        {
            "location": "/getting-started/user-guides/web/#receive-funds-with-the-web-client",
            "text": "Step One   Click the  Receive  button at the bottom of the window. You will see\nthis screen:  Give the person sending you HC the address displayed (it will start\nwith  Ds ) or they can use the QR code if their wallet or service\naccepts them. You can use the same address as often as you want, but\nfor privacy it is recommended that you generate a new address each\ntime. Do not worry about being given a duplicate address. There are\naround  2.08x10^93  possible addresses, so we will probably reach the\nheat death of the universe before we run out of Decred addresses.",
            "title": " Receive funds with the web client"
        },
        {
            "location": "/mining/proof-of-stake/",
            "text": "Proof-of-Stake (PoS) Mining\n\u00b6\n\n\nLast updated for v2.0.0\n\n\n\n\nOverview\n\u00b6\n\n\ncoolsnady\u2019s unique Proof-of-Stake protocol serves multiple purposes:\n\n\n\n\n\n\nAllowing stakeholders to vote for or against proposed changes to the coolsnady blockchain. If stakeholders vote in support of a change, the chain will hardfork and the new feature becomes active automatically. More information on voting can be found in the \nMainnet Voting Guide\n.\n\n\n\n\n\n\nProviding a mechanism for stakeholders to keep check of nonconforming proof-of-work miners. Stakeholders can vote a block invalid even if it conforms to the consensus rules of the network. This allows stakeholders to discourage unfavourable mining behavior such as mining empty blocks.\n\n\n\n\n\n\nAllowing long-term holders of coolsnady to lock up their funds for a length of time in order to accrue new coins from the \nBlock Reward\n.\n\n\n\n\n\n\n\n\nHow Proof-of-Stake Works\n\u00b6\n\n\nTo participate in proof-of-stake mining, stakeholders lock some HC in return for a ticket. Every ticket owned gives a stakeholder the ability to cast a single vote. Upon voting, each ticket returns a small reward plus the original \nTicket Price\n of the ticket. Each ticket is selected to vote at random, giving an average vote time of 28 days, but possibly requiring up to 142 days, with a .5% chance of expiring before being chosen to vote (this expiration returns the original \nTicket Price\n without a reward). Every block mined must include 5 votes (Miners are penalized by a reward deduction if fewer than 5 votes are included). Every block mined can also include up to 20 fresh ticket purchases. A new ticket requires 256 block to mature before it is entered into the *\nTicket Pool\n and able to be called upon to vote.\n\n\nThere are a few important variables that you should familiarize yourself with while staking.\n\n\nEvery 144 blocks (~12 hours), the stake difficulty algorithm calculates a new \nTicket Price\n in an attempt to keep the \nTicket Pool\n size near the target pool size of 40,960 tickets. This 144 block window is referred to as the \nStakeDiffWindowSize\n.\n\n\nThe \nTicket Price\n/\nStake Difficulty\n is the price you must pay for a ticket during a single 144 block window.\n\n\nThe \nTicket Pool\n is the total number of tickets in the coolsnady network.\n\n\nThe \nTicket Fee\n (\nticketfee\n) is the fee rate that must be included in the ticket purchase to incentivize Proof-of-Work miners to include that ticket in a new block. \nTicket Fee\n usually refers to the HC/kB fee rate for a ticket purchase transaction. Therefore, with a higher transaction size, you will end up paying a higher absolute fee. For example, solo-staking ticket purchases are around 300 Bytes, which means a \nTicket Fee\n of .3 HC/kB will result in the spending on .1 HC if, and only if, that ticket gets included in a block.\n\n\nWhen the \nTicket Price\n gets relatively low for a single \nTicket Window\n, you can usually expect a fee market to form, with many stakeholders trying to buy tickets before the window ends. When the \nTicket Price\n is not at an extremely low and profitable price, the default \nTicket Fee\n of 0.001 HC/kB rate is usually high enough to be included in a block.\n\n\nWhen a ticket is called to vote, the wallet that has voting rights for that ticket must be online. If the wallet is not online to cast its vote, the ticket will be marked as \nmissed\n and you will not receive a reward for that ticket. Stakepools are offered as a solution for those that cannot have a voting wallet online 24/7.\n\n\nStakepools allow stakeholders to generate ticket purchase transactions that give a stakepool voting rights for your ticket. They vote on your behalf, usually requiring a small fee for participation (under 7%) which covers the cost of hosting the minimum of 3 servers required to run a stakepool. This fee is known as the \nPool Fee\n and is only taken out of the small PoS reward. A list of stakepools can be found \nbelow\n.\n\n\n\n\nTicket Lifecycle\n\u00b6\n\n\nPurchasing a ticket for PoS is quite simple (see below) but what happens to it after you buy it?\nA ticket on main net (test net uses different parameters) will go through a few stages in its lifetime:\n\n\n\n\nYou buy a ticket using a hcgui or hcwallet wallet. The total cost of the each single ticket transaction should be \nTicket Price\n + \nTicket Fee\n(\nticketfee\n).\n\n\nYour ticket enters the \nmempool\n. This is where your ticket waits to be mined by PoW miners. Only 20 fresh tickets are mined into each block.\n\n\nTickets are mined into a block in with higher \nTicket Fee\n transactions having a higher priority. Note that the \nTicket Fee\n is HC per KB of the transaction. A few common transaction sizes are 298 Bytes (a solo ticket purchase) and 539 Bytes (a pool ticket purchase).\n\n\nA -\n If your ticket is mined into a block, it becomes an immature ticket. This state lasts for 256 blocks (about 20 hours). During this time the ticket cannot vote. At this point, the ticket fee is non-refundable. \n \n\nB -\n If your ticket is not mined, both the \nTicket Price\n and \nTicket Fee\n are returned to the purchasing account.\n\n\nAfter your ticket matures (256 blocks), it enters the \nTicket Pool\n and is eligible for voting.\n\n\nThe chance of a ticket voting is based on a Poisson distribution with a mean of 28 days. After 28 days a ticket has a 50% chance to have already voted.\n\n\nGiven a target pool size of 40960 tickets, any given ticket has a 99.5% chance of voting within ~142 days (about 4.7 months). If, after this time, a ticket has not voted, it expires. You receive a refund on the original \nTicket Price\n.\n\n\nA ticket may miss its call to vote if the voting wallet does not respond or two valid blocks are found within close proximity of each other. If this happens, you receive a refund on the original \nTicket Price\n.\n\n\nAfter a ticket has voted, missed, or expired, the funds (ticket price and subsidy if applicable, minus the fee) will enter immature status for another 256 blocks, after which they are released. If a ticket is missed or expired, a ticket revocation transaction is submitted by the wallet which then frees up the locked ticket outputs. \nNOTE:\n Revocations can only be submitted for a corresponding missed ticket. You cannot revoke a ticket until it is missed.\n\n\n\n\n\n\nAdditional Information\n\u00b6\n\n\nMainnet Voting Guide\n\n\nProof-of-Stake Commands\n\n\nProof-of-Stake FAQ - General\n\n\nProof-of-Stake FAQ - Buying Tickets and Fees\n\n\nProof-of-Stake FAQ - Solo Mining\n\n\nProof-of-Stake FAQ - Stake Pools\n\n\nProof-of-Stake FAQ - Voting Tickets\n\n\nProof-of-Stake Mining Parameters",
            "title": "What is Proof-of-Stake?"
        },
        {
            "location": "/mining/proof-of-stake/#proof-of-stake-pos-mining",
            "text": "Last updated for v2.0.0",
            "title": " Proof-of-Stake (PoS) Mining"
        },
        {
            "location": "/mining/proof-of-stake/#overview",
            "text": "coolsnady\u2019s unique Proof-of-Stake protocol serves multiple purposes:    Allowing stakeholders to vote for or against proposed changes to the coolsnady blockchain. If stakeholders vote in support of a change, the chain will hardfork and the new feature becomes active automatically. More information on voting can be found in the  Mainnet Voting Guide .    Providing a mechanism for stakeholders to keep check of nonconforming proof-of-work miners. Stakeholders can vote a block invalid even if it conforms to the consensus rules of the network. This allows stakeholders to discourage unfavourable mining behavior such as mining empty blocks.    Allowing long-term holders of coolsnady to lock up their funds for a length of time in order to accrue new coins from the  Block Reward .",
            "title": "Overview"
        },
        {
            "location": "/mining/proof-of-stake/#how-proof-of-stake-works",
            "text": "To participate in proof-of-stake mining, stakeholders lock some HC in return for a ticket. Every ticket owned gives a stakeholder the ability to cast a single vote. Upon voting, each ticket returns a small reward plus the original  Ticket Price  of the ticket. Each ticket is selected to vote at random, giving an average vote time of 28 days, but possibly requiring up to 142 days, with a .5% chance of expiring before being chosen to vote (this expiration returns the original  Ticket Price  without a reward). Every block mined must include 5 votes (Miners are penalized by a reward deduction if fewer than 5 votes are included). Every block mined can also include up to 20 fresh ticket purchases. A new ticket requires 256 block to mature before it is entered into the * Ticket Pool  and able to be called upon to vote.  There are a few important variables that you should familiarize yourself with while staking.  Every 144 blocks (~12 hours), the stake difficulty algorithm calculates a new  Ticket Price  in an attempt to keep the  Ticket Pool  size near the target pool size of 40,960 tickets. This 144 block window is referred to as the  StakeDiffWindowSize .  The  Ticket Price / Stake Difficulty  is the price you must pay for a ticket during a single 144 block window.  The  Ticket Pool  is the total number of tickets in the coolsnady network.  The  Ticket Fee  ( ticketfee ) is the fee rate that must be included in the ticket purchase to incentivize Proof-of-Work miners to include that ticket in a new block.  Ticket Fee  usually refers to the HC/kB fee rate for a ticket purchase transaction. Therefore, with a higher transaction size, you will end up paying a higher absolute fee. For example, solo-staking ticket purchases are around 300 Bytes, which means a  Ticket Fee  of .3 HC/kB will result in the spending on .1 HC if, and only if, that ticket gets included in a block.  When the  Ticket Price  gets relatively low for a single  Ticket Window , you can usually expect a fee market to form, with many stakeholders trying to buy tickets before the window ends. When the  Ticket Price  is not at an extremely low and profitable price, the default  Ticket Fee  of 0.001 HC/kB rate is usually high enough to be included in a block.  When a ticket is called to vote, the wallet that has voting rights for that ticket must be online. If the wallet is not online to cast its vote, the ticket will be marked as  missed  and you will not receive a reward for that ticket. Stakepools are offered as a solution for those that cannot have a voting wallet online 24/7.  Stakepools allow stakeholders to generate ticket purchase transactions that give a stakepool voting rights for your ticket. They vote on your behalf, usually requiring a small fee for participation (under 7%) which covers the cost of hosting the minimum of 3 servers required to run a stakepool. This fee is known as the  Pool Fee  and is only taken out of the small PoS reward. A list of stakepools can be found  below .",
            "title": "How Proof-of-Stake Works"
        },
        {
            "location": "/mining/proof-of-stake/#ticket-lifecycle",
            "text": "Purchasing a ticket for PoS is quite simple (see below) but what happens to it after you buy it?\nA ticket on main net (test net uses different parameters) will go through a few stages in its lifetime:   You buy a ticket using a hcgui or hcwallet wallet. The total cost of the each single ticket transaction should be  Ticket Price  +  Ticket Fee ( ticketfee ).  Your ticket enters the  mempool . This is where your ticket waits to be mined by PoW miners. Only 20 fresh tickets are mined into each block.  Tickets are mined into a block in with higher  Ticket Fee  transactions having a higher priority. Note that the  Ticket Fee  is HC per KB of the transaction. A few common transaction sizes are 298 Bytes (a solo ticket purchase) and 539 Bytes (a pool ticket purchase).  A -  If your ticket is mined into a block, it becomes an immature ticket. This state lasts for 256 blocks (about 20 hours). During this time the ticket cannot vote. At this point, the ticket fee is non-refundable.    B -  If your ticket is not mined, both the  Ticket Price  and  Ticket Fee  are returned to the purchasing account.  After your ticket matures (256 blocks), it enters the  Ticket Pool  and is eligible for voting.  The chance of a ticket voting is based on a Poisson distribution with a mean of 28 days. After 28 days a ticket has a 50% chance to have already voted.  Given a target pool size of 40960 tickets, any given ticket has a 99.5% chance of voting within ~142 days (about 4.7 months). If, after this time, a ticket has not voted, it expires. You receive a refund on the original  Ticket Price .  A ticket may miss its call to vote if the voting wallet does not respond or two valid blocks are found within close proximity of each other. If this happens, you receive a refund on the original  Ticket Price .  After a ticket has voted, missed, or expired, the funds (ticket price and subsidy if applicable, minus the fee) will enter immature status for another 256 blocks, after which they are released. If a ticket is missed or expired, a ticket revocation transaction is submitted by the wallet which then frees up the locked ticket outputs.  NOTE:  Revocations can only be submitted for a corresponding missed ticket. You cannot revoke a ticket until it is missed.",
            "title": "Ticket Lifecycle"
        },
        {
            "location": "/mining/proof-of-stake/#additional-information",
            "text": "Mainnet Voting Guide  Proof-of-Stake Commands  Proof-of-Stake FAQ - General  Proof-of-Stake FAQ - Buying Tickets and Fees  Proof-of-Stake FAQ - Solo Mining  Proof-of-Stake FAQ - Stake Pools  Proof-of-Stake FAQ - Voting Tickets  Proof-of-Stake Mining Parameters",
            "title": "Additional Information"
        },
        {
            "location": "/mining/how-to-stake/",
            "text": "How to Stake\n\u00b6\n\n\nLast updated for v1.1.3\n\n\n\n\nHow to Stake\n\u00b6\n\n\nParticipating in proof-of-stake requires a coolsnady wallet to be running 24/7. The wallet needs to be always online so that it can be called to vote - if the wallet is unavailable then the votes will be missed and no block reward will be received.\n\n\nRunning your own always-online wallet is known as \u201cSolo\u201d staking/mining.\n\n\nStakepools are available for those unable to keep a personal voting wallet online. Using a stakepool is completely safe, the coolsnady PoS protocol allows you to delegate your vote to a stakepool\u2019s always-online wallet without ever giving the stakepool access to your funds.\n\n\n\n\n Solo PoS\n\u00b6\n\n\nSolo mining is currently only possible using the Coolsnady command line tools. The \nBuying Tickets with HCWALLET\n guide explains how to buy tickets using the CLI wallet \nHCWALLET\n.\n\n\n\n\n PoS using a Stakepool\n\u00b6\n\n\nYou can find the list of all official stakepools and statistics by visiting the\n\n coolsnady website\n.\n\n\nUsing a stakepool DOES NOT give the pool access to your funds. All you are doing is granting voting rights to the pool.\n\n\nIn order to support network decentralization, it is recommended that you join a smaller pool with fewer live tickets.\n\n\nAll stakepools run the same basic code, but they may differ in the amount of redundancy available.\nMore redundancy equals less chance of missed votes, although all pools will have missed votes as many missed votes are caused by PoW miners.\nSometimes they will find a solution to the blocks so quickly that votes haven\u2019t had time to propagate around the network.\n\n\nThere are currently two wallets which support stakepool voting:\n\n\n\n\nHcgui\n - GUI wallet for Windows/macOS/Linux. The \nPurchase Tickets tab\n is used to buy tickets.\n\n\nHCWALLET\n - CLI wallet for Windows/macOS/Linux. The \nBuying Tickets with HCWALLET\n guide explains how to purchase tickets via command line.",
            "title": "How to Stake"
        },
        {
            "location": "/mining/how-to-stake/#how-to-stake",
            "text": "Last updated for v1.1.3",
            "title": " How to Stake"
        },
        {
            "location": "/mining/how-to-stake/#how-to-stake_1",
            "text": "Participating in proof-of-stake requires a coolsnady wallet to be running 24/7. The wallet needs to be always online so that it can be called to vote - if the wallet is unavailable then the votes will be missed and no block reward will be received.  Running your own always-online wallet is known as \u201cSolo\u201d staking/mining.  Stakepools are available for those unable to keep a personal voting wallet online. Using a stakepool is completely safe, the coolsnady PoS protocol allows you to delegate your vote to a stakepool\u2019s always-online wallet without ever giving the stakepool access to your funds.",
            "title": "How to Stake"
        },
        {
            "location": "/mining/how-to-stake/#solo-pos",
            "text": "Solo mining is currently only possible using the Coolsnady command line tools. The  Buying Tickets with HCWALLET  guide explains how to buy tickets using the CLI wallet  HCWALLET .",
            "title": " Solo PoS"
        },
        {
            "location": "/mining/how-to-stake/#pos-using-a-stakepool",
            "text": "You can find the list of all official stakepools and statistics by visiting the  coolsnady website .  Using a stakepool DOES NOT give the pool access to your funds. All you are doing is granting voting rights to the pool.  In order to support network decentralization, it is recommended that you join a smaller pool with fewer live tickets.  All stakepools run the same basic code, but they may differ in the amount of redundancy available.\nMore redundancy equals less chance of missed votes, although all pools will have missed votes as many missed votes are caused by PoW miners.\nSometimes they will find a solution to the blocks so quickly that votes haven\u2019t had time to propagate around the network.  There are currently two wallets which support stakepool voting:   Hcgui  - GUI wallet for Windows/macOS/Linux. The  Purchase Tickets tab  is used to buy tickets.  HCWALLET  - CLI wallet for Windows/macOS/Linux. The  Buying Tickets with HCWALLET  guide explains how to purchase tickets via command line.",
            "title": " PoS using a Stakepool"
        },
        {
            "location": "/faq/proof-of-stake/general/",
            "text": "PoS General FAQ\n\u00b6\n\n\n\n\n1. What is Decred\u2019s Proof-of-Stake system?\n\u00b6\n\n\nThe Proof-of-Stake (PoS) system allows holders of Decred to have a say in the governance of the currency. It aims to give users a voice alongside the miners.\nIn order to participate, users can purchase \u201ctickets\u201d, which enter a lottery pool. Every block 5 tickets are chosen from the PoS ticket pool. If at least 3 of those validate the previously mined block, \nthe newly mined block is added to the chain, and both PoW miners and PoS stakers are paid. If the block is not validated by the PoS stakers the PoW miners do not get paid, but the PoS stakers do. This is\n to incentivize PoW miners to mine according to the wishes of the PoS stakers.\n\n\nThis PoS system has several advantages that solve problems PoW-only systems might encounter. For example, because the PoS stakers have to validate the blocks the PoW miners mine, the PoW miners cannot \ndecide on their own to change the rules of the network (a 51% attack). Or, when the Decred chain hardforks the old, smaller, chain will die off quickly due to not being validated by the PoS component of\nthe chain.\n\n\nThe PoS system rewards participants for their staking. Every Decred block has a PoS reward component that will be distributed to every ticket chosen to vote in that block. The system is designed in such a \nway that the average time for the ticket to be selected is 28 days. If a ticket hasn\u2019t been selected after 40960 blocks (a bit under 5 months) it will be revoked by the system. The HC used to purchase a\n ticket is returned regardless of whether or not it votes.\n\n\nAnother interesting feature this PoS system allows for is the ability to vote on an agenda. Because the block validation can be considered a vote, by adding extra votebit components to the ticket the system can track and count votes over a series of blocks. These votes can be about anything.\n\n\nIn the Decred Proof-of-Stake system anyone holding HC can participate by buying a ticket.\n\n\n\n\n2. What are tickets?\n\u00b6\n\n\nA ticket is a token you buy to participate in the PoS system. You can buy tickets through the command line interface of hcctl, or through a GUI like Decrediton\n1\n. Whenever you buy a \nticket, you pay the current ticket price and a ticket fee using your HC. When a ticket is purchased, it goes to a temporary \u201cmempool\u201d. 20 tickets can be mined into each block and tickets are chosen\nto be mined based on their fee per kilobyte. Since there is a limited number of tickets that can mined into blocks at a given price (2880), there may be competition to get tickets mined. In this case,\nyou can increase the fee you\u2019re willing to pay to get your ticket(s) mined. Once your ticket is mined it will move from the current \u2018allmempool\u2019 to the \u2018immature\u2019 ticket pool. After 256 blocks\n(about 20 hours) it then will mature and go into the live ticket pool where it is eligible to be chosen to vote.\n\n\n\n\n3. Do I need to be constantly connected to the network to participate in PoS?\n\u00b6\n\n\nA wallet needs to be online 24/7 to respond to a vote if one of your tickets is selected. There are two main ways to do this; a solo staking wallet which you set up and keep online all the time, or you \ncan use a \nstake pool\n. A stake pool is basically a community run wallet to which you can assign the voting rights of your tickets and the pool will\nvote on your behalf for a small percentage of the PoS reward.\n\n\nIt is important to note that you are only assigning voting rights to the pool, not your actual funds. A stake pool does not have access to your funds at any time.\n\n\n\n\n4. What is the \u201cticket price\u201d?\n\u00b6\n\n\nThe price for tickets is determined by an algorithm that aims to keep the ticket pool size, which is the total amount of tickets in the PoS system ticket pool around a target size of 40960 tickets.\nThe ticket price will go up or down according to the demand for tickets, and the number of tickets currently in the pool.\n\n\nEvery 144 blocks the algorithm adjusts the ticket price. This is called a buying window. Each block can contain 20 newly bought tickets. This means that in every buying window a maximum of 2880 tickets\ncan be added to the PoS system ticket pool.\n\n\nThe ticket price is always refunded no matter if your ticket votes, misses or expires.\n\n\n\n\n5. What are fees?\n\u00b6\n\n\nThe PoS system utilizes two types of fees, a txfee (also known as a \u2018split\u2019 fee) and a ticketfee.\n\n\nThe txfee is a fee you pay the network for handling the transaction to buy your ticket. This fee is at default set to a low amount (0.001 HC/kB) and should not be changed.\nThe ticketfee is the fee you pay if your ticket gets mined. This fee is an incentive for PoW miners to mine your ticket and add it to the ticket pool.\n\n\nIn case the buying window is full, meaning there are more tickets being bought than there are available to be mined during that window, the ticketfee will be used to determine which tickets get put into\nthe ticket pool. The tickets with the highest ticketfee will be selected by the PoW miners.\n\n\nFees are calculated in HC per kilobyte. Since a ticket is only about 300 (solo) or 540 (pool) bytes in size, the actual fees you pay will be lower than what you set as the specific fee amount.\n\n\nBoth txfees and ticketfees will not be returned when a ticket votes, expires, or misses a vote.\n\n\nReturning the funds back to your wallet after a ticket votes or is revoked does not generate a fee.\n\n\n\n\n6. What is a stake pool?\n\u00b6\n\n\nA stake pool is the equivalent of a mining pool, but for the PoS system. Through the options in your Decred wallet, you can give your voting rights to a stake pool. If your ticket is selected to vote,\nthe stake pool will cast the vote for you and you are rewarded with the PoS reward minus the stake pool fee (usually 4-5%). Unlike the mining pools, the PoS reward is not split amongst the users of the stake pool. The full reward goes to the owner of the ticket.\n\n\nA stake pool will allow you to buy tickets but not have your own wallet unlocked and always online. It is important to note that your funds never leave your wallet. You are not sending anything to the pool,\njust giving it authority to vote on your behalf. A stake pool cannot access your funds. \n\n\nStake pools will usually implement multi-wallet redundancy by having many wallets physically distributed around the globe. This means there\u2019s less chance of a vote being missed because one wallet is down.\nIt also reduces latency between the wallet and network which can reduce the chance of a vote being missed.\n\n\n\n\n7. What happens to my funds when I buy a ticket?\n\u00b6\n\n\nFunds used to purchase tickets are locked until the ticket is selected to vote or it expires. They are unable to leave your wallet and will appear in the \u201clockedbytickets\u201d section of your wallet.\nIf your ticket is selected to vote, you will be refunded the total amount paid for the ticket and given the PoS reward.\n\n\nThe only cost for using this system are the fees you set. The txfee will be charged for the transaction of your ticket across the network. The ticketfee will be charged for incorporation into the\nticket pool, and is paid to the PoW miners. If your ticket does not get mined, there is no charge as the transaction never made it onto the network.\n\n\nIn case your ticket isn\u2019t selected to vote after 40960 blocks (about 4 months), the system will revoke your ticket and the coolsnady you paid for it (minus fees) will be transferred back into your wallet. \n\n\n\n\n8. What are the chances of my ticket voting?\n\u00b6\n\n\nThe PoS system in Decred uses a Poisson distribution to determine the chances of a ticket voting at any given time. Given the target pool size of 40960 tickets, any one ticket has a 50% chance to vote\nwithin 28 days and a 99.5% chance to vote before expiry. Note that these values will change with the pool size.\n\n\n\n\n9. What is Proof-of-Stake voting?\n\u00b6\n\n\nBecause the block validation performed by the PoS system behaves like a voting system, it can be used to vote on other issues too.\n\n\nWhen selected to validate a block, the tickets vote on whether or not to approve the previously mined block. This requires 3 out of 5 selected tickets to vote yes.\n\n\nBy adding another parameter to the ticket that doesn\u2019t interfere with the approval of the mined blocks, the system can track the amount of tickets using that parameter over a number of blocks. You can set this parameter in your wallet at any time before the ticket votes. \n\n\nFor example, you could choose the color of your ticket to be either red or blue, set that option, and the system will count for the next 1000 blocks how many red tickets and how many blue tickets there are. Maybe there are 3000 red tickets, 1500 blue tickets, and 500 that didn\u2019t select a colour.\n\n\nIf you replace the red or blue option with a yes or no option, you have a voting system that can count votes over time. By using the PoS voting system anyone who holds HC can vote on issues set in an agenda.\n\n\nThis voting system can be used for any governance issue. For Decred, the most prominent use will be to vote on hardforks, which are technical changes to the way the currency works. Some examples:\n\n\n\n\nIncrease the maximum block size.\n\n\nChange the algorithm PoS uses to determine the ticket price.\n\n\nVote on major new features for the currency (e.g. lightning network, enhanced privacy).\n\n\nChange the PoW algorithm.\n\n\nPretty much anything the community decides would be in the best interest of the currency.\n\n\n\n\nCurrently, a platform for the community to submit and advocate a voting agenda is in development.\n\n\n\n\n10. What is hardfork voting?\n\u00b6\n\n\nLike any other cryptocurrency Decred might need to hardfork at some point.\n\n\nOne of the agenda issues set for the PoS voting system could be a hardfork. If such an issue is set, the new version of the Decred source code will include the hardfork in it, but the hard fork will not activate until the PoS system has voted on it.\n\n\nFor a hardfork vote to start two critical conditions have to be met:\n\n\n\n\nFirst, 75% of the PoW miners have to upgrade to the latest version of the current network block version. This check runs over the past 1000 blocks.\n\n\nSecond, 75% of the PoS miners have to upgrade to the latest version. This check runs over the past 2016 blocks.\n\n\n\n\nOnce these checks are met, the voting process begins. Tickets can be set with an additional parameter of yes/no/abstain. You do this in your wallet before the ticket votes. Tickets marked as abstain will not be counted in the total amount of votes.\n\n\nThe PoS system then starts counting tickets with these parameters set over a predetermined amount of blocks. If over this interval the amount of \u2018yes\u2019 votes is 75% or more, the vote has passed. A lock in period of a set number of blocks will start before the hardfork goes live, so everyone has a chance to upgrade and not be hardforked off the network.\n\n\nBecause the code for the hardfork is already in the then current version of Decred there is no need for the developers to interfere or the majority of PoW miners and PoS miners to upgrade after a decision has been reached. If the vote on a hardfork passes it will be implemented automatically after the lock in period.\n\n\nThe hardfork vote can fail at multiple points. The vote might not start at all if the PoW miners or PoS miners do not upgrade. After that, the threshold of 75% votes might not be reached.\n\n\nIn case a vote fails a new round will start at the beginning of the process. This means checking whether the PoW miners have upgraded, if the PoS miners have upgraded, and then another vote counting period. This will continue for a certain amount of rounds, after which, if the vote hasn\u2019t passed, the agenda issue will be tabled.\n\n\n\n\n11. Is PoS susceptible to large exchanges using their customers\u2019 coolsnady?\n\u00b6\n\n\nThe number of coolsnady a person (or exchange) has means nothing to PoS. It\u2019s the number of tickets you have. Funds used to purchase tickets are locked until the ticket they purchased votes. This means that\ncoolsnady involved in PoS are effectively nontransferable. For an exchange to use their customers\u2019 coolsnady for voting, they would have to transfer them out of the wallets and lock them for up to 5 months. People\nwould notice their balances change (coolsnady locked in PoS will not show as spendable) and they would not be able to withdraw any funds so the exchange would suffer a large loss of liquidity.\n\n\nFurther there is a hard limit of 20 tickets added per block so no exchange could flood the pool faster than this.\n\n\nFinally, there\u2019s a soft cap on the total number of tickets in the pool. Every 144 blocks (2880 tickets) the ticket price is adjusted based on the number of tickets in the pool and the rate that new tickets\nwere added in the last window. Eventually the ticket price would be so high that even an exchange wouldn\u2019t be able to buy many tickets. And remember that even if they did that their HC are locked so they\ncan\u2019t buy more when the price drops again.\n\n\n\n\n12. Is PoS susceptible to influence from large balance holders such as the original developers?\n\u00b6\n\n\nThe pool size limits above apply here. This stops one person/group flooding the PoS pool with large numbers of their own tickets. Even if they bought up the whole pool (with huge fees) the most they would\nlikely get is about 4000 tickets (based on previous ticket windows where the ones around 30HC usually go up to 100 for the next window, and the max for the one after that is often over 300). So a large\nbalance holder could probably buy 2 windows out. A window at 30 would be 86,400HC then the next at 100 would be 288,000HC. So it would cost 374,400HC to buy 5760 tickets. With a target pool size of 40960 tickets, 374400 HC would give you about 14% of all tickets.\n\n\nNow the holder could wait a couple of days for the price to drop then start buying back up again. Except that most of their funds will be locked in the ones they bought earlier (although some will have voted) so their buying power for the new window is greatly reduced. But let\u2019s say they have super capital and bought all the coolsnady on all exchanges. So they are able to buy another two windows and replace those tickets that voted and were successful in buying all the tickets (at very high fees and/or prices). Let\u2019s say that takes them to about 25% of the tickets.\n\n\nTickets for a block are chosen with a random distribution. To force a vote to go a certain way you would need 3 out of 5 votes for a given block which is 60%. Even with that huge expenditure of capital,\nthey are less than half way there. And a vote isn\u2019t decided on a single block so you would need 60% of 75% of blocks in the voting period.\n\n\nAnd THEN you still need the PoW miners to confirm the votes. If they think someone is trying to game the system, they can choose to invalidate blocks.\n\n\nSo basically this is close to impossible, even if a single person has a HUGE percentage of HC.\n\n\nBut then we come to the stake pools. Stake pools, while not having access to any of their users\u2019 funds, do have the ability to change votes on tickets assigned to them. This is why it is suggested that when joining a stake pool, people don\u2019t just go for the largest one. Decred is short for \u2018decentralised credit\u2019 so part of the spirit of PoS is ensuring that the PoS stake pools don\u2019t get too large in relation to the others. However, even the largest at almost 20% would still only get on average one vote per block.\n\n\nSo Decred was specifically designed to minimise impact from both large PoW and PoS pools as well as individuals (including developers) with large holdings. \n\n\n Links\n\u00b6\n\n\n\n\n\n\n\n\n\n\nDecrediton Ticket Purchasing Guide\n\u00a0\n\u21a9",
            "title": "General"
        },
        {
            "location": "/faq/proof-of-stake/general/#pos-general-faq",
            "text": "",
            "title": " PoS General FAQ"
        },
        {
            "location": "/faq/proof-of-stake/general/#1-what-is-decreds-proof-of-stake-system",
            "text": "The Proof-of-Stake (PoS) system allows holders of Decred to have a say in the governance of the currency. It aims to give users a voice alongside the miners.\nIn order to participate, users can purchase \u201ctickets\u201d, which enter a lottery pool. Every block 5 tickets are chosen from the PoS ticket pool. If at least 3 of those validate the previously mined block, \nthe newly mined block is added to the chain, and both PoW miners and PoS stakers are paid. If the block is not validated by the PoS stakers the PoW miners do not get paid, but the PoS stakers do. This is\n to incentivize PoW miners to mine according to the wishes of the PoS stakers.  This PoS system has several advantages that solve problems PoW-only systems might encounter. For example, because the PoS stakers have to validate the blocks the PoW miners mine, the PoW miners cannot \ndecide on their own to change the rules of the network (a 51% attack). Or, when the Decred chain hardforks the old, smaller, chain will die off quickly due to not being validated by the PoS component of\nthe chain.  The PoS system rewards participants for their staking. Every Decred block has a PoS reward component that will be distributed to every ticket chosen to vote in that block. The system is designed in such a \nway that the average time for the ticket to be selected is 28 days. If a ticket hasn\u2019t been selected after 40960 blocks (a bit under 5 months) it will be revoked by the system. The HC used to purchase a\n ticket is returned regardless of whether or not it votes.  Another interesting feature this PoS system allows for is the ability to vote on an agenda. Because the block validation can be considered a vote, by adding extra votebit components to the ticket the system can track and count votes over a series of blocks. These votes can be about anything.  In the Decred Proof-of-Stake system anyone holding HC can participate by buying a ticket.",
            "title": "1. What is Decred's Proof-of-Stake system?"
        },
        {
            "location": "/faq/proof-of-stake/general/#2-what-are-tickets",
            "text": "A ticket is a token you buy to participate in the PoS system. You can buy tickets through the command line interface of hcctl, or through a GUI like Decrediton 1 . Whenever you buy a \nticket, you pay the current ticket price and a ticket fee using your HC. When a ticket is purchased, it goes to a temporary \u201cmempool\u201d. 20 tickets can be mined into each block and tickets are chosen\nto be mined based on their fee per kilobyte. Since there is a limited number of tickets that can mined into blocks at a given price (2880), there may be competition to get tickets mined. In this case,\nyou can increase the fee you\u2019re willing to pay to get your ticket(s) mined. Once your ticket is mined it will move from the current \u2018allmempool\u2019 to the \u2018immature\u2019 ticket pool. After 256 blocks\n(about 20 hours) it then will mature and go into the live ticket pool where it is eligible to be chosen to vote.",
            "title": "2. What are tickets?"
        },
        {
            "location": "/faq/proof-of-stake/general/#3-do-i-need-to-be-constantly-connected-to-the-network-to-participate-in-pos",
            "text": "A wallet needs to be online 24/7 to respond to a vote if one of your tickets is selected. There are two main ways to do this; a solo staking wallet which you set up and keep online all the time, or you \ncan use a  stake pool . A stake pool is basically a community run wallet to which you can assign the voting rights of your tickets and the pool will\nvote on your behalf for a small percentage of the PoS reward.  It is important to note that you are only assigning voting rights to the pool, not your actual funds. A stake pool does not have access to your funds at any time.",
            "title": "3. Do I need to be constantly connected to the network to participate in PoS?"
        },
        {
            "location": "/faq/proof-of-stake/general/#4-what-is-the-ticket-price",
            "text": "The price for tickets is determined by an algorithm that aims to keep the ticket pool size, which is the total amount of tickets in the PoS system ticket pool around a target size of 40960 tickets.\nThe ticket price will go up or down according to the demand for tickets, and the number of tickets currently in the pool.  Every 144 blocks the algorithm adjusts the ticket price. This is called a buying window. Each block can contain 20 newly bought tickets. This means that in every buying window a maximum of 2880 tickets\ncan be added to the PoS system ticket pool.  The ticket price is always refunded no matter if your ticket votes, misses or expires.",
            "title": "4. What is the \"ticket price\"?"
        },
        {
            "location": "/faq/proof-of-stake/general/#5-what-are-fees",
            "text": "The PoS system utilizes two types of fees, a txfee (also known as a \u2018split\u2019 fee) and a ticketfee.  The txfee is a fee you pay the network for handling the transaction to buy your ticket. This fee is at default set to a low amount (0.001 HC/kB) and should not be changed.\nThe ticketfee is the fee you pay if your ticket gets mined. This fee is an incentive for PoW miners to mine your ticket and add it to the ticket pool.  In case the buying window is full, meaning there are more tickets being bought than there are available to be mined during that window, the ticketfee will be used to determine which tickets get put into\nthe ticket pool. The tickets with the highest ticketfee will be selected by the PoW miners.  Fees are calculated in HC per kilobyte. Since a ticket is only about 300 (solo) or 540 (pool) bytes in size, the actual fees you pay will be lower than what you set as the specific fee amount.  Both txfees and ticketfees will not be returned when a ticket votes, expires, or misses a vote.  Returning the funds back to your wallet after a ticket votes or is revoked does not generate a fee.",
            "title": "5. What are fees?"
        },
        {
            "location": "/faq/proof-of-stake/general/#6-what-is-a-stake-pool",
            "text": "A stake pool is the equivalent of a mining pool, but for the PoS system. Through the options in your Decred wallet, you can give your voting rights to a stake pool. If your ticket is selected to vote,\nthe stake pool will cast the vote for you and you are rewarded with the PoS reward minus the stake pool fee (usually 4-5%). Unlike the mining pools, the PoS reward is not split amongst the users of the stake pool. The full reward goes to the owner of the ticket.  A stake pool will allow you to buy tickets but not have your own wallet unlocked and always online. It is important to note that your funds never leave your wallet. You are not sending anything to the pool,\njust giving it authority to vote on your behalf. A stake pool cannot access your funds.   Stake pools will usually implement multi-wallet redundancy by having many wallets physically distributed around the globe. This means there\u2019s less chance of a vote being missed because one wallet is down.\nIt also reduces latency between the wallet and network which can reduce the chance of a vote being missed.",
            "title": "6. What is a stake pool?"
        },
        {
            "location": "/faq/proof-of-stake/general/#7-what-happens-to-my-funds-when-i-buy-a-ticket",
            "text": "Funds used to purchase tickets are locked until the ticket is selected to vote or it expires. They are unable to leave your wallet and will appear in the \u201clockedbytickets\u201d section of your wallet.\nIf your ticket is selected to vote, you will be refunded the total amount paid for the ticket and given the PoS reward.  The only cost for using this system are the fees you set. The txfee will be charged for the transaction of your ticket across the network. The ticketfee will be charged for incorporation into the\nticket pool, and is paid to the PoW miners. If your ticket does not get mined, there is no charge as the transaction never made it onto the network.  In case your ticket isn\u2019t selected to vote after 40960 blocks (about 4 months), the system will revoke your ticket and the coolsnady you paid for it (minus fees) will be transferred back into your wallet.",
            "title": "7. What happens to my funds when I buy a ticket?"
        },
        {
            "location": "/faq/proof-of-stake/general/#8-what-are-the-chances-of-my-ticket-voting",
            "text": "The PoS system in Decred uses a Poisson distribution to determine the chances of a ticket voting at any given time. Given the target pool size of 40960 tickets, any one ticket has a 50% chance to vote\nwithin 28 days and a 99.5% chance to vote before expiry. Note that these values will change with the pool size.",
            "title": "8. What are the chances of my ticket voting?"
        },
        {
            "location": "/faq/proof-of-stake/general/#9-what-is-proof-of-stake-voting",
            "text": "Because the block validation performed by the PoS system behaves like a voting system, it can be used to vote on other issues too.  When selected to validate a block, the tickets vote on whether or not to approve the previously mined block. This requires 3 out of 5 selected tickets to vote yes.  By adding another parameter to the ticket that doesn\u2019t interfere with the approval of the mined blocks, the system can track the amount of tickets using that parameter over a number of blocks. You can set this parameter in your wallet at any time before the ticket votes.   For example, you could choose the color of your ticket to be either red or blue, set that option, and the system will count for the next 1000 blocks how many red tickets and how many blue tickets there are. Maybe there are 3000 red tickets, 1500 blue tickets, and 500 that didn\u2019t select a colour.  If you replace the red or blue option with a yes or no option, you have a voting system that can count votes over time. By using the PoS voting system anyone who holds HC can vote on issues set in an agenda.  This voting system can be used for any governance issue. For Decred, the most prominent use will be to vote on hardforks, which are technical changes to the way the currency works. Some examples:   Increase the maximum block size.  Change the algorithm PoS uses to determine the ticket price.  Vote on major new features for the currency (e.g. lightning network, enhanced privacy).  Change the PoW algorithm.  Pretty much anything the community decides would be in the best interest of the currency.   Currently, a platform for the community to submit and advocate a voting agenda is in development.",
            "title": "9. What is Proof-of-Stake voting?"
        },
        {
            "location": "/faq/proof-of-stake/general/#10-what-is-hardfork-voting",
            "text": "Like any other cryptocurrency Decred might need to hardfork at some point.  One of the agenda issues set for the PoS voting system could be a hardfork. If such an issue is set, the new version of the Decred source code will include the hardfork in it, but the hard fork will not activate until the PoS system has voted on it.  For a hardfork vote to start two critical conditions have to be met:   First, 75% of the PoW miners have to upgrade to the latest version of the current network block version. This check runs over the past 1000 blocks.  Second, 75% of the PoS miners have to upgrade to the latest version. This check runs over the past 2016 blocks.   Once these checks are met, the voting process begins. Tickets can be set with an additional parameter of yes/no/abstain. You do this in your wallet before the ticket votes. Tickets marked as abstain will not be counted in the total amount of votes.  The PoS system then starts counting tickets with these parameters set over a predetermined amount of blocks. If over this interval the amount of \u2018yes\u2019 votes is 75% or more, the vote has passed. A lock in period of a set number of blocks will start before the hardfork goes live, so everyone has a chance to upgrade and not be hardforked off the network.  Because the code for the hardfork is already in the then current version of Decred there is no need for the developers to interfere or the majority of PoW miners and PoS miners to upgrade after a decision has been reached. If the vote on a hardfork passes it will be implemented automatically after the lock in period.  The hardfork vote can fail at multiple points. The vote might not start at all if the PoW miners or PoS miners do not upgrade. After that, the threshold of 75% votes might not be reached.  In case a vote fails a new round will start at the beginning of the process. This means checking whether the PoW miners have upgraded, if the PoS miners have upgraded, and then another vote counting period. This will continue for a certain amount of rounds, after which, if the vote hasn\u2019t passed, the agenda issue will be tabled.",
            "title": "10. What is hardfork voting?"
        },
        {
            "location": "/faq/proof-of-stake/general/#11-is-pos-susceptible-to-large-exchanges-using-their-customers-coolsnady",
            "text": "The number of coolsnady a person (or exchange) has means nothing to PoS. It\u2019s the number of tickets you have. Funds used to purchase tickets are locked until the ticket they purchased votes. This means that\ncoolsnady involved in PoS are effectively nontransferable. For an exchange to use their customers\u2019 coolsnady for voting, they would have to transfer them out of the wallets and lock them for up to 5 months. People\nwould notice their balances change (coolsnady locked in PoS will not show as spendable) and they would not be able to withdraw any funds so the exchange would suffer a large loss of liquidity.  Further there is a hard limit of 20 tickets added per block so no exchange could flood the pool faster than this.  Finally, there\u2019s a soft cap on the total number of tickets in the pool. Every 144 blocks (2880 tickets) the ticket price is adjusted based on the number of tickets in the pool and the rate that new tickets\nwere added in the last window. Eventually the ticket price would be so high that even an exchange wouldn\u2019t be able to buy many tickets. And remember that even if they did that their HC are locked so they\ncan\u2019t buy more when the price drops again.",
            "title": "11. Is PoS susceptible to large exchanges using their customers\u2019 coolsnady?"
        },
        {
            "location": "/faq/proof-of-stake/general/#12-is-pos-susceptible-to-influence-from-large-balance-holders-such-as-the-original-developers",
            "text": "The pool size limits above apply here. This stops one person/group flooding the PoS pool with large numbers of their own tickets. Even if they bought up the whole pool (with huge fees) the most they would\nlikely get is about 4000 tickets (based on previous ticket windows where the ones around 30HC usually go up to 100 for the next window, and the max for the one after that is often over 300). So a large\nbalance holder could probably buy 2 windows out. A window at 30 would be 86,400HC then the next at 100 would be 288,000HC. So it would cost 374,400HC to buy 5760 tickets. With a target pool size of 40960 tickets, 374400 HC would give you about 14% of all tickets.  Now the holder could wait a couple of days for the price to drop then start buying back up again. Except that most of their funds will be locked in the ones they bought earlier (although some will have voted) so their buying power for the new window is greatly reduced. But let\u2019s say they have super capital and bought all the coolsnady on all exchanges. So they are able to buy another two windows and replace those tickets that voted and were successful in buying all the tickets (at very high fees and/or prices). Let\u2019s say that takes them to about 25% of the tickets.  Tickets for a block are chosen with a random distribution. To force a vote to go a certain way you would need 3 out of 5 votes for a given block which is 60%. Even with that huge expenditure of capital,\nthey are less than half way there. And a vote isn\u2019t decided on a single block so you would need 60% of 75% of blocks in the voting period.  And THEN you still need the PoW miners to confirm the votes. If they think someone is trying to game the system, they can choose to invalidate blocks.  So basically this is close to impossible, even if a single person has a HUGE percentage of HC.  But then we come to the stake pools. Stake pools, while not having access to any of their users\u2019 funds, do have the ability to change votes on tickets assigned to them. This is why it is suggested that when joining a stake pool, people don\u2019t just go for the largest one. Decred is short for \u2018decentralised credit\u2019 so part of the spirit of PoS is ensuring that the PoS stake pools don\u2019t get too large in relation to the others. However, even the largest at almost 20% would still only get on average one vote per block.  So Decred was specifically designed to minimise impact from both large PoW and PoS pools as well as individuals (including developers) with large holdings.",
            "title": "12. Is PoS susceptible to influence from large balance holders such as the original developers?"
        },
        {
            "location": "/faq/proof-of-stake/general/#links",
            "text": "Decrediton Ticket Purchasing Guide \u00a0 \u21a9",
            "title": "Links"
        },
        {
            "location": "/faq/proof-of-stake/solo-mining/",
            "text": "Solo Mining\n\u00b6\n\n\n\n\n1. Do I need hash power to stake mine?\n\u00b6\n\n\nStake \u201cmining\u201d does not need any hash power\n1\n. Think of it a bit like interest on invested coins. You lock your coins for a period of time in order to purchase a ticket that gives you a high probability (>99%) of gaining voting rights and receiving interest in exchange for casting a vote and the opportunity cost of not being able to use those coins for potentially up to ~4.7 months.\n\n\nIf you have already purchased stake tickets, those coins are locked until the tickets either win or expire. You are solo staking and therefore you MUST keep your wallet online 24/7 until all of your tickets have won (or expired) or you will miss out on the rewards since you cannot cast a vote if you wallet is not online. Because those coins are now locked there is no way for you to change the already staked coins now.\n\n\nThe stake pool, on the other hand, allows you to delegate your voting rights to the pool so it is responsible for being online 24/7 and casting your vote for you.\n\n\n\n\n2. Isn\u2019t one of the main reasons for stake mining to ensure there are always a sufficient amount of peers online?\n\u00b6\n\n\nDefinitely not\n2\n. Stake mining cannot possibly enforce that. An SPV style wallet could easily perform the necessary staking by communicating with other full nodes (\nhcd\n instances) on the network. It is true that the current wallet requires \nhcd\n to be running, but that will not always be the case.\n\n\nEven if the software did try to enforce that, you could not stop people from writing utilities and such to do it via the peer-to-peer network without needing to run their own local instance anyways.\n\n\n\n\n3. What happens if my wallet is unreachable or locked when my tickets are selected by miners?\n\u00b6\n\n\nIf your wallet is offline or locked\n3\n when your tickets are selected, you lose out on the rewards and your ticket is removed from the pool immediately. There are no \u201credos\u201d.\n\n\n\n\n4. Can I somehow test if my machine is reachable for voting? In other words, run the actions of a miner who would want to get my vote.\n\u00b6\n\n\nYou do not need to be reachable. Voting is deterministic on a per-block basis\n3\n. That is to say your wallet will know if your ticket is selected based on the current block and then a \u201cvote transaction\u201d (ssgen transaction) is broadcast to the network, just like other transactions.\n\n\n\n\n5. Can I run multiple voting-only wallets with the same seed on multiple servers?\n\u00b6\n\n\nYou can have multiple voting-only wallets because they are not creating new addresses\n4\n. The problem comes in when you have two wallets creating transactions that involve new addresses because they do not know what the other one is doing.\n\n\nIf you are doing a hot/cold setup, you can create multiple voting-only hot wallets without any issues so long as they both are aware of the address you give voting rights to.\n\n\nContinue to \nStake Pools FAQ\n\n\n\n\n Sources\n\u00b6\n\n\n\n\n\n\n\n\n\n\ncoolsnady Forum, \nPost 9,304\n\u00a0\n\u21a9\n\n\n\n\n\n\ncoolsnady Forum, \nPost 9,311\n\u00a0\n\u21a9\n\n\n\n\n\n\ncoolsnady Forum, \nPost 9,806\n\u00a0\n\u21a9\n\u21a9\n\n\n\n\n\n\ncoolsnady Forum, \nPost 12,697\n\u00a0\n\u21a9",
            "title": "Solo Mining"
        },
        {
            "location": "/faq/proof-of-stake/solo-mining/#solo-mining",
            "text": "",
            "title": " Solo Mining"
        },
        {
            "location": "/faq/proof-of-stake/solo-mining/#1-do-i-need-hash-power-to-stake-mine",
            "text": "Stake \u201cmining\u201d does not need any hash power 1 . Think of it a bit like interest on invested coins. You lock your coins for a period of time in order to purchase a ticket that gives you a high probability (>99%) of gaining voting rights and receiving interest in exchange for casting a vote and the opportunity cost of not being able to use those coins for potentially up to ~4.7 months.  If you have already purchased stake tickets, those coins are locked until the tickets either win or expire. You are solo staking and therefore you MUST keep your wallet online 24/7 until all of your tickets have won (or expired) or you will miss out on the rewards since you cannot cast a vote if you wallet is not online. Because those coins are now locked there is no way for you to change the already staked coins now.  The stake pool, on the other hand, allows you to delegate your voting rights to the pool so it is responsible for being online 24/7 and casting your vote for you.",
            "title": "1. Do I need hash power to stake mine?"
        },
        {
            "location": "/faq/proof-of-stake/solo-mining/#2-isnt-one-of-the-main-reasons-for-stake-mining-to-ensure-there-are-always-a-sufficient-amount-of-peers-online",
            "text": "Definitely not 2 . Stake mining cannot possibly enforce that. An SPV style wallet could easily perform the necessary staking by communicating with other full nodes ( hcd  instances) on the network. It is true that the current wallet requires  hcd  to be running, but that will not always be the case.  Even if the software did try to enforce that, you could not stop people from writing utilities and such to do it via the peer-to-peer network without needing to run their own local instance anyways.",
            "title": "2. Isn't one of the main reasons for stake mining to ensure there are always a sufficient amount of peers online?"
        },
        {
            "location": "/faq/proof-of-stake/solo-mining/#3-what-happens-if-my-wallet-is-unreachable-or-locked-when-my-tickets-are-selected-by-miners",
            "text": "If your wallet is offline or locked 3  when your tickets are selected, you lose out on the rewards and your ticket is removed from the pool immediately. There are no \u201credos\u201d.",
            "title": "3. What happens if my wallet is unreachable or locked when my tickets are selected by miners?"
        },
        {
            "location": "/faq/proof-of-stake/solo-mining/#4-can-i-somehow-test-if-my-machine-is-reachable-for-voting-in-other-words-run-the-actions-of-a-miner-who-would-want-to-get-my-vote",
            "text": "You do not need to be reachable. Voting is deterministic on a per-block basis 3 . That is to say your wallet will know if your ticket is selected based on the current block and then a \u201cvote transaction\u201d (ssgen transaction) is broadcast to the network, just like other transactions.",
            "title": "4. Can I somehow test if my machine is reachable for voting? In other words, run the actions of a miner who would want to get my vote."
        },
        {
            "location": "/faq/proof-of-stake/solo-mining/#5-can-i-run-multiple-voting-only-wallets-with-the-same-seed-on-multiple-servers",
            "text": "You can have multiple voting-only wallets because they are not creating new addresses 4 . The problem comes in when you have two wallets creating transactions that involve new addresses because they do not know what the other one is doing.  If you are doing a hot/cold setup, you can create multiple voting-only hot wallets without any issues so long as they both are aware of the address you give voting rights to.  Continue to  Stake Pools FAQ",
            "title": "5. Can I run multiple voting-only wallets with the same seed on multiple servers?"
        },
        {
            "location": "/faq/proof-of-stake/solo-mining/#sources",
            "text": "coolsnady Forum,  Post 9,304 \u00a0 \u21a9    coolsnady Forum,  Post 9,311 \u00a0 \u21a9    coolsnady Forum,  Post 9,806 \u00a0 \u21a9 \u21a9    coolsnady Forum,  Post 12,697 \u00a0 \u21a9",
            "title": " Sources"
        },
        {
            "location": "/faq/proof-of-stake/buying-tickets-and-fees/",
            "text": "Buying Tickets and Fees\n\u00b6\n\n\n\n\n1. Is there a way to see tickets purchased by a local wallet?\n\u00b6\n\n\nUse the following command to show all of your tickets\n1\n:\n\n\nhcctl --wallet gettickets true\n\n\n\n\n\n\n2. Do I pay a transaction fee for the ssgen transaction?\n\u00b6\n\n\nNo, ssgen transactions do not impose a fee\n2\n (unlike the original ticket purchase transactions which are competing for limited space in each block). They are effectively like proof-of-work coinbase transactions in this regard.\n\n\n\n\n3. How do I change the ticket fee?\n\u00b6\n\n\nhcctl --wallet setticketfee <fee>\n\n\n\n\n\n\n4. How do I manually buy tickets?\n\u00b6\n\n\nhcctl --wallet purchaseticket <fromaccount> <spendlimit> <minconf>\n\n\n\n\nWhere:\n\n\n\n\n\n\n\n\nOption\n\n\nExplanation\n\n\n\n\n\n\n\n\n\n\nfromaccount\n\n\nUsually \u201cdefault\u201d (unless you have created a different one).\n\n\n\n\n\n\nspendlimit\n\n\nMaximum number of HC you want to spend on tickets.\n\n\n\n\n\n\nminconf\n\n\nThis can be set to 0.\n\n\n\n\n\n\n\n\n\n\n5. How should I set the ticketfee?\n\u00b6\n\n\nThe \nticketfee\n (or ticket fee) determines the order in which mempool tickets enter the voting pool. Higher fees encourage proof-of-work miners to put your tickets at the front of the queue. If you set the fee higher than the average your tickets are more likely to be included in the next block. The default txfee is 0.001 HC. It would seem then that the best idea is to set your txfee high so you are at the front of the line. But that is not always a good idea. In fact, it is rarely a good idea simply because the mempool queue is very short or zero most of the time. Do not forget that the txfee will eat into your HC profit as it is charged on every ticket and is non-refundable whether or not it votes.\n\n\nConsider a constant ticket price of 10 HC. Every block 20 tickets can move into the voting pool from the mempool. That is a value of 200 HC. Every block generates about 30 HC and returns 50HC to the voters. 3 HC is sent to the developers to help fund development of coolsnady so only 27 ends up in the hands of miners. This means that 77 HC is freed up each block to go back into tickets, assuming that all returns are reinvested. That is less than half of what the block can handle. The only way more HC can enter the mempool is by external investment (i.e., buying from an exchange) or from miners who have been saving their HC waiting for the ticket price to drop.\n\n\nIn the case of a ticket price drop, a miner is looking to get into the pool before the price changes again. This happens every 144 blocks (about 12 hours). It does not matter if it is in the first block or the 100th. In 144 blocks 2,880 tickets will be accepted with a value of 28,800 HC. There is not that sort of volume in the proof-of-stake network at this time. There is one scenario in which you might want to set your fee higher. If the stake cost is about to change in a few blocks, the mempool is not empty and you want to make sure you get the current price, it can help to set your fee a little higher than average to ensure you get in, especially if the next change will mean you miss a ticket.\n\n\nContinue to \nPoS Solo Mining FAQ\n\n\n\n\n Sources\n\u00b6\n\n\n\n\n\n\n\n\n\n\ncoolsnady Forum, \nPost 9,987\n\u00a0\n\u21a9\n\n\n\n\n\n\ncoolsnady Forum, \nPost 10,219\n\u00a0\n\u21a9",
            "title": "Buying Tickets and Fees"
        },
        {
            "location": "/faq/proof-of-stake/buying-tickets-and-fees/#buying-tickets-and-fees",
            "text": "",
            "title": " Buying Tickets and Fees"
        },
        {
            "location": "/faq/proof-of-stake/buying-tickets-and-fees/#1-is-there-a-way-to-see-tickets-purchased-by-a-local-wallet",
            "text": "Use the following command to show all of your tickets 1 :  hcctl --wallet gettickets true",
            "title": "1. Is there a way to see tickets purchased by a local wallet?"
        },
        {
            "location": "/faq/proof-of-stake/buying-tickets-and-fees/#2-do-i-pay-a-transaction-fee-for-the-ssgen-transaction",
            "text": "No, ssgen transactions do not impose a fee 2  (unlike the original ticket purchase transactions which are competing for limited space in each block). They are effectively like proof-of-work coinbase transactions in this regard.",
            "title": "2. Do I pay a transaction fee for the ssgen transaction?"
        },
        {
            "location": "/faq/proof-of-stake/buying-tickets-and-fees/#3-how-do-i-change-the-ticket-fee",
            "text": "hcctl --wallet setticketfee <fee>",
            "title": "3. How do I change the ticket fee?"
        },
        {
            "location": "/faq/proof-of-stake/buying-tickets-and-fees/#4-how-do-i-manually-buy-tickets",
            "text": "hcctl --wallet purchaseticket <fromaccount> <spendlimit> <minconf>  Where:     Option  Explanation      fromaccount  Usually \u201cdefault\u201d (unless you have created a different one).    spendlimit  Maximum number of HC you want to spend on tickets.    minconf  This can be set to 0.",
            "title": "4. How do I manually buy tickets?"
        },
        {
            "location": "/faq/proof-of-stake/buying-tickets-and-fees/#5-how-should-i-set-the-ticketfee",
            "text": "The  ticketfee  (or ticket fee) determines the order in which mempool tickets enter the voting pool. Higher fees encourage proof-of-work miners to put your tickets at the front of the queue. If you set the fee higher than the average your tickets are more likely to be included in the next block. The default txfee is 0.001 HC. It would seem then that the best idea is to set your txfee high so you are at the front of the line. But that is not always a good idea. In fact, it is rarely a good idea simply because the mempool queue is very short or zero most of the time. Do not forget that the txfee will eat into your HC profit as it is charged on every ticket and is non-refundable whether or not it votes.  Consider a constant ticket price of 10 HC. Every block 20 tickets can move into the voting pool from the mempool. That is a value of 200 HC. Every block generates about 30 HC and returns 50HC to the voters. 3 HC is sent to the developers to help fund development of coolsnady so only 27 ends up in the hands of miners. This means that 77 HC is freed up each block to go back into tickets, assuming that all returns are reinvested. That is less than half of what the block can handle. The only way more HC can enter the mempool is by external investment (i.e., buying from an exchange) or from miners who have been saving their HC waiting for the ticket price to drop.  In the case of a ticket price drop, a miner is looking to get into the pool before the price changes again. This happens every 144 blocks (about 12 hours). It does not matter if it is in the first block or the 100th. In 144 blocks 2,880 tickets will be accepted with a value of 28,800 HC. There is not that sort of volume in the proof-of-stake network at this time. There is one scenario in which you might want to set your fee higher. If the stake cost is about to change in a few blocks, the mempool is not empty and you want to make sure you get the current price, it can help to set your fee a little higher than average to ensure you get in, especially if the next change will mean you miss a ticket.  Continue to  PoS Solo Mining FAQ",
            "title": "5. How should I set the ticketfee?"
        },
        {
            "location": "/faq/proof-of-stake/buying-tickets-and-fees/#sources",
            "text": "coolsnady Forum,  Post 9,987 \u00a0 \u21a9    coolsnady Forum,  Post 10,219 \u00a0 \u21a9",
            "title": " Sources"
        },
        {
            "location": "/faq/proof-of-stake/voting-tickets/",
            "text": "Voting Tickets\n\u00b6\n\n\n\n\n1. When did proof-of-stake voting start?\n\u00b6\n\n\nProof-of-stake voting began\n1\n at block 4,096.\n\n\n\n\n2. In the source code TicketPoolSize is set to 8,192, but the current ticket pool size is larger than that. Why?\n\u00b6\n\n\nIt is intentional and is an integral part of the dynamic ticket price adjustment\n2\n. The \nTicketPoolSize\n is the target ticket pool size and it works very similar to the target difficulty for proof-of-work (PoW). The fact the current ticket pool size is larger than the target is what causes the ticket price to rise which in turn will eventually cause fewer tickets to be purchased and result in the number of tickets in the pool reducing back towards the target. If it falls under, the price will fall to encourage more ticket sales in order to increase the number of tickets in the pool towards the target.\n\n\n\n\n3. If I am unlucky and my ticket expires without voting, do I lose the transaction fee?\n\u00b6\n\n\nYes\n3\n.\n\n\n\n\n4. Voting on mainnet was on \u2018hold\u2019 up until block 4,096, with people buying tickets. Does this mean there will be a significantly higher risk for these tickets to expire?\n\u00b6\n\n\nNo\n3\n, the expiration time does not start until a ticket is actually mined into a block. The tickets were just sitting in the memory pool until they could be included in blocks starting with block 4,096.\n\n\n\n\n5. What happens if none (or less than 3) of the selected voters issue their ssgen transactions?\n\u00b6\n\n\nVotes are always determined by the current tip. Miners do not start mining for a new block until at least 3+ of the selected voters issue their ssgen transactions. So, if a found block does not manage to get the selected votes\n4\n, the block is simply orphaned by the next block another miner finds.\n\n\nFor a more concrete example, assume the current chain tip is at block 5,000. The voters determined by block 5,000 have already submitted their votes, so miners are chugging away looking for block 5,001. Now, a miner finds a solution for block 5,001 and submits it to the network. All of the daemons (and hence wallets) will see that 5,001 just showed up. However, the miners do not immediately start mining off of 5,001. Instead they continue mining off of 5,000 until 3+ votes for block 5,001 show up. At that point they all switch and start mining off of 5,001. If those 3+ votes never show up, another candidate block 5,001 will be found by the other miners still working on block 5,000 who will submit their (different) solution for block 5,001 to the network. Since each of these new candidate blocks for 5,001 have a different hash, different tickets are selected.\n\n\n\n\n6. What happens if a ticket I have missed a vote?\n\u00b6\n\n\nYour wallet will automatically revoke the ticket in the block after it is missed\n5\n, so you get them back just after they were missed as immature funds (that means they will not be spendable for 256 blocks when they mature).\n\n\nFor example:\n\n\nhcctl --wallet getstakeinfo\n\n\n\n\n\n\n\n\n\n\nOutput\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nallmempooltix\n\n\nAll of the stake tickets in the memory pool (waiting to be mined into a block).\n\n\n\n\n\n\nownmempooltix\n\n\nYour stake tickets in the memory pool (waiting to be mined into a block).\n\n\n\n\n\n\n\n\n\n\n7. What is the difference between a missed and revoked ticket?\n\u00b6\n\n\nMissed tickets are tickets that were called to vote, but did not. After a ticket has been missed, it can be revoked\n6\n. The wallet automatically revokes missed tickets it controls (assuming it is unlocked so it can sign the revocation transaction).\n\n\nAll \nrebroadcastmissed\n does is tell the wallet to ask the network daemon (\nhcd\n) to give it the list of missed tickets again to double check if any need to be revoked. Typically this is not needed unless, for example, an attempt to revoke a ticket was made but failed because the wallet was locked. In other words, if you notice that revoked does not equal missed, you might need to \nrebroadcastmissed\n. As said though, there is rarely a need for this since the wallet automatically does it on startup and looks for missed tickets on every block.\n\n\nContinue to \nProof-of-Work Mining\n\n\n\n\n Sources\n\u00b6\n\n\n\n\n\n\n\n\n\n\ncoolsnady Forum, \nPost 7,969\n\u00a0\n\u21a9\n\n\n\n\n\n\ncoolsnady Forum, \nPost 8,965\n\u00a0\n\u21a9\n\n\n\n\n\n\ncoolsnady Forum, \nPost 9,806\n\u00a0\n\u21a9\n\u21a9\n\n\n\n\n\n\ncoolsnady Forum, \nPost 10,219\n\u00a0\n\u21a9\n\n\n\n\n\n\ncoolsnady Forum, \nPost 13,912\n\u00a0\n\u21a9\n\n\n\n\n\n\ncoolsnady Forum, \nPost 14,763\n\u00a0\n\u21a9",
            "title": "Voting Tickets"
        },
        {
            "location": "/faq/proof-of-stake/voting-tickets/#voting-tickets",
            "text": "",
            "title": " Voting Tickets"
        },
        {
            "location": "/faq/proof-of-stake/voting-tickets/#1-when-did-proof-of-stake-voting-start",
            "text": "Proof-of-stake voting began 1  at block 4,096.",
            "title": "1. When did proof-of-stake voting start?"
        },
        {
            "location": "/faq/proof-of-stake/voting-tickets/#2-in-the-source-code-ticketpoolsize-is-set-to-8192-but-the-current-ticket-pool-size-is-larger-than-that-why",
            "text": "It is intentional and is an integral part of the dynamic ticket price adjustment 2 . The  TicketPoolSize  is the target ticket pool size and it works very similar to the target difficulty for proof-of-work (PoW). The fact the current ticket pool size is larger than the target is what causes the ticket price to rise which in turn will eventually cause fewer tickets to be purchased and result in the number of tickets in the pool reducing back towards the target. If it falls under, the price will fall to encourage more ticket sales in order to increase the number of tickets in the pool towards the target.",
            "title": "2. In the source code TicketPoolSize is set to 8,192, but the current ticket pool size is larger than that. Why?"
        },
        {
            "location": "/faq/proof-of-stake/voting-tickets/#3-if-i-am-unlucky-and-my-ticket-expires-without-voting-do-i-lose-the-transaction-fee",
            "text": "Yes 3 .",
            "title": "3. If I am unlucky and my ticket expires without voting, do I lose the transaction fee?"
        },
        {
            "location": "/faq/proof-of-stake/voting-tickets/#4-voting-on-mainnet-was-on-hold-up-until-block-4096-with-people-buying-tickets-does-this-mean-there-will-be-a-significantly-higher-risk-for-these-tickets-to-expire",
            "text": "No 3 , the expiration time does not start until a ticket is actually mined into a block. The tickets were just sitting in the memory pool until they could be included in blocks starting with block 4,096.",
            "title": "4. Voting on mainnet was on 'hold' up until block 4,096, with people buying tickets. Does this mean there will be a significantly higher risk for these tickets to expire?"
        },
        {
            "location": "/faq/proof-of-stake/voting-tickets/#5-what-happens-if-none-or-less-than-3-of-the-selected-voters-issue-their-ssgen-transactions",
            "text": "Votes are always determined by the current tip. Miners do not start mining for a new block until at least 3+ of the selected voters issue their ssgen transactions. So, if a found block does not manage to get the selected votes 4 , the block is simply orphaned by the next block another miner finds.  For a more concrete example, assume the current chain tip is at block 5,000. The voters determined by block 5,000 have already submitted their votes, so miners are chugging away looking for block 5,001. Now, a miner finds a solution for block 5,001 and submits it to the network. All of the daemons (and hence wallets) will see that 5,001 just showed up. However, the miners do not immediately start mining off of 5,001. Instead they continue mining off of 5,000 until 3+ votes for block 5,001 show up. At that point they all switch and start mining off of 5,001. If those 3+ votes never show up, another candidate block 5,001 will be found by the other miners still working on block 5,000 who will submit their (different) solution for block 5,001 to the network. Since each of these new candidate blocks for 5,001 have a different hash, different tickets are selected.",
            "title": "5. What happens if none (or less than 3) of the selected voters issue their ssgen transactions?"
        },
        {
            "location": "/faq/proof-of-stake/voting-tickets/#6-what-happens-if-a-ticket-i-have-missed-a-vote",
            "text": "Your wallet will automatically revoke the ticket in the block after it is missed 5 , so you get them back just after they were missed as immature funds (that means they will not be spendable for 256 blocks when they mature).  For example:  hcctl --wallet getstakeinfo     Output  Description      allmempooltix  All of the stake tickets in the memory pool (waiting to be mined into a block).    ownmempooltix  Your stake tickets in the memory pool (waiting to be mined into a block).",
            "title": "6. What happens if a ticket I have missed a vote?"
        },
        {
            "location": "/faq/proof-of-stake/voting-tickets/#7-what-is-the-difference-between-a-missed-and-revoked-ticket",
            "text": "Missed tickets are tickets that were called to vote, but did not. After a ticket has been missed, it can be revoked 6 . The wallet automatically revokes missed tickets it controls (assuming it is unlocked so it can sign the revocation transaction).  All  rebroadcastmissed  does is tell the wallet to ask the network daemon ( hcd ) to give it the list of missed tickets again to double check if any need to be revoked. Typically this is not needed unless, for example, an attempt to revoke a ticket was made but failed because the wallet was locked. In other words, if you notice that revoked does not equal missed, you might need to  rebroadcastmissed . As said though, there is rarely a need for this since the wallet automatically does it on startup and looks for missed tickets on every block.  Continue to  Proof-of-Work Mining",
            "title": "7. What is the difference between a missed and revoked ticket?"
        },
        {
            "location": "/faq/proof-of-stake/voting-tickets/#sources",
            "text": "coolsnady Forum,  Post 7,969 \u00a0 \u21a9    coolsnady Forum,  Post 8,965 \u00a0 \u21a9    coolsnady Forum,  Post 9,806 \u00a0 \u21a9 \u21a9    coolsnady Forum,  Post 10,219 \u00a0 \u21a9    coolsnady Forum,  Post 13,912 \u00a0 \u21a9    coolsnady Forum,  Post 14,763 \u00a0 \u21a9",
            "title": " Sources"
        },
        {
            "location": "/faq/proof-of-stake/stake-pools/",
            "text": "Stake Pools\n\u00b6\n\n\n\n\n1. Are there any other benefits to a stake pool other than not needing to run a full node and keeping your wallet unlocked? For example, will it have a better chance of winning or anything like that?\n\u00b6\n\n\nStake pools will usually implement multi-wallet redundancy by having many wallets physically distributed around the globe. This means there\u2019s less chance of a vote\nbeing missed because one wallet is down. It also reduces latency between the wallet and network which can reduce the chance of a vote being missed.\n\n\n\n\n2. Does a stakepool split the reward between all participants (% based on the amount of tickets you submitted to the pool)?\n\u00b6\n\n\nIt is technically possible to create a pool that supports proportional reward splitting\n1\n, but the current stakepool reference implementation \nhcstakepool\n doesn\u2019t enable this. It simply votes on your behalf. It does this by making the ticket voting rights a 1-of-2 multi-signature P2SH script. The pool signs the vote with its private key at the time the ticket is selected. Since it is a 1-of-2 multi-signature script though, it means if the pool failed to vote for you for whatever reason (extremely unlikely as the mainnet pool will have multiple redundancy and automatic failover), it would still be possible to vote on your own behalf because you have the second private key and could therefore provide a valid signature and satisfy the 1-of-2 requirement.\n\n\nAlso, it is important to note that the original ticket purchase contains a commitment to go to a reward address for which only you have the private key. The proof-of-stake voting consensus rules enforce the commitment, so it is impossible for the pool to steal your funds.\n\n\nIn order to split rewards the pool would have to be the recipient of all rewards and then be trusted to properly split the rewards amongst all of the participants according to their proportionality. It is expected that such a scheme will be developed with the understanding it is less secure than the approach the current pool design uses.\n\n\n\n\n3. I have to run my wallet to buy tickets, but will they vote properly without me if I shut it down and the pool votes for me instead?\n\u00b6\n\n\nYes\n2\n, that is correct. You only need to run your wallet in order to spend your coins to purchase the ticket which delegates your voting rights to the pool which will then vote on your behalf. The reward address is a consensus-enforced commitment in the ticket purchase for one of your own addresses for which only you have the private key.\n\n\n\n\n4. Are there any issues that could arise from a stake pool having too many people. For example, force voting a block in or out?\n\u00b6\n\n\nIt is certainly possible\n3\n, but one of the things that all pools should support is allowing each user to select their individual voting preferences. That way, whenever their ticket comes up and the pool votes on their behalf, it will vote according to their preferences.\n\n\n\n\n5. Are the vote bits set when you purchase a ticket or when your ticket is called to vote? Does this change when in a stakepool?\n\u00b6\n\n\nThe vote bits are set when you actually vote\n4\n (which really only makes sense because you might have bought the ticket weeks or months before a specific voting agenda even exists).\n\n\nA stakepool can operate however it wants since there is a lot of room for flexibility due to the way the ticket purchase commitment scheme is designed. That said, in general, people should avoid using stake pools that do not allow them control over how they want to vote on non-pool specific issues.\n\n\n\n\n6. What safeguards are in place to stop pool owners disappearing with the funds in the pool?\n\u00b6\n\n\nThe current pool design is such that the pool can NOT steal the funds\n5\n. You are only delegating voting rights (and in reality it is a 1-of-2 multisig which means either you OR the pool can vote). The ticket purchase contains a consensus-enforced commitment for the final subsidy address, so there is simply no way for the pool to steal the funds.\n\n\nThe worst that would happen if a pool owner disappears is the votes will be missed which results in the ticket being revoked which in turn causes the original coins to go back to the original coin owner (minus the initial transaction fee of course). However, as mentioned previously, because the ticket is a 1-of-2 multisig, each user could run their own wallet in order to vote should the pool owner disappear.\n\n\n\n\n7. Where can I see an example of a stake pool ticket on the block explorer?\n\u00b6\n\n\nStake pools involve \u2018Dc\u2019 addresses since the stake pool uses pay-to-script-hash addresses\n6\n. For example, see txid: \nc0abc0ec63a8de15550f067e2b6fde28f0432fb91b938574b282daa69f914103\n.\n\n\nContinue to \nPoS Voting Tickets FAQ\n\n\n\n\n Sources\n\u00b6\n\n\n\n\n\n\n\n\n\n\ncoolsnady Forum, \nPost 9,262\n\u00a0\n\u21a9\n\n\n\n\n\n\ncoolsnady Forum, \nPost 9,274\n\u00a0\n\u21a9\n\n\n\n\n\n\ncoolsnady Forum, \nPost 9,311\n\u00a0\n\u21a9\n\n\n\n\n\n\ncoolsnady Forum, \nPost 13,607\n\u00a0\n\u21a9\n\n\n\n\n\n\ncoolsnady Forum, \nPost 14,593\n\u00a0\n\u21a9\n\n\n\n\n\n\ncoolsnady Forum, \nPost 17,515\n\u00a0\n\u21a9",
            "title": "Stake Pools"
        },
        {
            "location": "/faq/proof-of-stake/stake-pools/#stake-pools",
            "text": "",
            "title": " Stake Pools"
        },
        {
            "location": "/faq/proof-of-stake/stake-pools/#1-are-there-any-other-benefits-to-a-stake-pool-other-than-not-needing-to-run-a-full-node-and-keeping-your-wallet-unlocked-for-example-will-it-have-a-better-chance-of-winning-or-anything-like-that",
            "text": "Stake pools will usually implement multi-wallet redundancy by having many wallets physically distributed around the globe. This means there\u2019s less chance of a vote\nbeing missed because one wallet is down. It also reduces latency between the wallet and network which can reduce the chance of a vote being missed.",
            "title": "1. Are there any other benefits to a stake pool other than not needing to run a full node and keeping your wallet unlocked? For example, will it have a better chance of winning or anything like that?"
        },
        {
            "location": "/faq/proof-of-stake/stake-pools/#2-does-a-stakepool-split-the-reward-between-all-participants-based-on-the-amount-of-tickets-you-submitted-to-the-pool",
            "text": "It is technically possible to create a pool that supports proportional reward splitting 1 , but the current stakepool reference implementation  hcstakepool  doesn\u2019t enable this. It simply votes on your behalf. It does this by making the ticket voting rights a 1-of-2 multi-signature P2SH script. The pool signs the vote with its private key at the time the ticket is selected. Since it is a 1-of-2 multi-signature script though, it means if the pool failed to vote for you for whatever reason (extremely unlikely as the mainnet pool will have multiple redundancy and automatic failover), it would still be possible to vote on your own behalf because you have the second private key and could therefore provide a valid signature and satisfy the 1-of-2 requirement.  Also, it is important to note that the original ticket purchase contains a commitment to go to a reward address for which only you have the private key. The proof-of-stake voting consensus rules enforce the commitment, so it is impossible for the pool to steal your funds.  In order to split rewards the pool would have to be the recipient of all rewards and then be trusted to properly split the rewards amongst all of the participants according to their proportionality. It is expected that such a scheme will be developed with the understanding it is less secure than the approach the current pool design uses.",
            "title": "2. Does a stakepool split the reward between all participants (% based on the amount of tickets you submitted to the pool)?"
        },
        {
            "location": "/faq/proof-of-stake/stake-pools/#3-i-have-to-run-my-wallet-to-buy-tickets-but-will-they-vote-properly-without-me-if-i-shut-it-down-and-the-pool-votes-for-me-instead",
            "text": "Yes 2 , that is correct. You only need to run your wallet in order to spend your coins to purchase the ticket which delegates your voting rights to the pool which will then vote on your behalf. The reward address is a consensus-enforced commitment in the ticket purchase for one of your own addresses for which only you have the private key.",
            "title": "3. I have to run my wallet to buy tickets, but will they vote properly without me if I shut it down and the pool votes for me instead?"
        },
        {
            "location": "/faq/proof-of-stake/stake-pools/#4-are-there-any-issues-that-could-arise-from-a-stake-pool-having-too-many-people-for-example-force-voting-a-block-in-or-out",
            "text": "It is certainly possible 3 , but one of the things that all pools should support is allowing each user to select their individual voting preferences. That way, whenever their ticket comes up and the pool votes on their behalf, it will vote according to their preferences.",
            "title": "4. Are there any issues that could arise from a stake pool having too many people. For example, force voting a block in or out?"
        },
        {
            "location": "/faq/proof-of-stake/stake-pools/#5-are-the-vote-bits-set-when-you-purchase-a-ticket-or-when-your-ticket-is-called-to-vote-does-this-change-when-in-a-stakepool",
            "text": "The vote bits are set when you actually vote 4  (which really only makes sense because you might have bought the ticket weeks or months before a specific voting agenda even exists).  A stakepool can operate however it wants since there is a lot of room for flexibility due to the way the ticket purchase commitment scheme is designed. That said, in general, people should avoid using stake pools that do not allow them control over how they want to vote on non-pool specific issues.",
            "title": "5. Are the vote bits set when you purchase a ticket or when your ticket is called to vote? Does this change when in a stakepool?"
        },
        {
            "location": "/faq/proof-of-stake/stake-pools/#6-what-safeguards-are-in-place-to-stop-pool-owners-disappearing-with-the-funds-in-the-pool",
            "text": "The current pool design is such that the pool can NOT steal the funds 5 . You are only delegating voting rights (and in reality it is a 1-of-2 multisig which means either you OR the pool can vote). The ticket purchase contains a consensus-enforced commitment for the final subsidy address, so there is simply no way for the pool to steal the funds.  The worst that would happen if a pool owner disappears is the votes will be missed which results in the ticket being revoked which in turn causes the original coins to go back to the original coin owner (minus the initial transaction fee of course). However, as mentioned previously, because the ticket is a 1-of-2 multisig, each user could run their own wallet in order to vote should the pool owner disappear.",
            "title": "6. What safeguards are in place to stop pool owners disappearing with the funds in the pool?"
        },
        {
            "location": "/faq/proof-of-stake/stake-pools/#7-where-can-i-see-an-example-of-a-stake-pool-ticket-on-the-block-explorer",
            "text": "Stake pools involve \u2018Dc\u2019 addresses since the stake pool uses pay-to-script-hash addresses 6 . For example, see txid:  c0abc0ec63a8de15550f067e2b6fde28f0432fb91b938574b282daa69f914103 .  Continue to  PoS Voting Tickets FAQ",
            "title": "7. Where can I see an example of a stake pool ticket on the block explorer?"
        },
        {
            "location": "/faq/proof-of-stake/stake-pools/#sources",
            "text": "coolsnady Forum,  Post 9,262 \u00a0 \u21a9    coolsnady Forum,  Post 9,274 \u00a0 \u21a9    coolsnady Forum,  Post 9,311 \u00a0 \u21a9    coolsnady Forum,  Post 13,607 \u00a0 \u21a9    coolsnady Forum,  Post 14,593 \u00a0 \u21a9    coolsnady Forum,  Post 17,515 \u00a0 \u21a9",
            "title": " Sources"
        },
        {
            "location": "/mining/proof-of-work/",
            "text": "Proof-of-Work (PoW) Mining\n\u00b6\n\n\n\n\nOverview\n\u00b6\n\n\nProof-of-work mining, more commonly referred to as PoW mining, is the activity\nof committing your computer\u2019s hardware and resources to process network\ntransactions and build the blocks that make up the blockchain in the Decred\nnetwork. Each time a block is created (by a miner), about 30 new Decred coins\nare made. These coins are then split up as follows:\n\n\n\n\n\n\n\n\nSubsidy\n\n\nParty\n\n\n\n\n\n\n\n\n\n\n60%\n\n\nPoW Miners\n\n\n\n\n\n\n30%\n\n\nPoS Voters\n\n\n\n\n\n\n10%\n\n\nDecred development subsidy\n\n\n\n\n\n\n\n\nYou will, on average, receive a reward that is roughly proportional to the\nhashrate of your miner and the overall hashrate of the network when you commit\nyour computer to PoW mining. To get started, you must have a computer with a\nvideo card. Most video cards can be used for mining (including the \u201cmobile\u201d\ntypes found in some laptops). In general, higher end video cards perform at\nhigher hashrates and therefore receive higher rewards.\n\n\n\n\nSolo Mining or Pool Mining\n\u00b6\n\n\n\n\n Solo Mining\n\n\n\n\n \nSolo mining is not recommended and is not covered by this documentation!\n The Decred network regularly sees a network hash rate of up to 10,000Gh/s. Solo mining is generally only done by advanced individuals or organized groups with a large cluster of GPUs so it is not addressed here.\n\n\n\n\n Pool Mining\n\n\n\n\nWhen you mine in a pool, your hashrate is combined with all the other pool miners\u2019 hashrates to look for the correct solution for a block. You will receive a reward based on the amount of work your miner performs in the pool.\nPool mining distributes shares based on blocks found so you can earn a steady amount of Decred rather than the \u201call or none\u201d of solo mining.\n\n\n\n\n Obtain a Decred Address to Receive Funds With\n\u00b6\n\n\nFollow the \ndcrctl Basics\n guide and create an address so you can withdraw mining rewards to it.\n\n\n\n\n Sign up for a Mining Pool\n\u00b6\n\n\nThese mining pools are known to support Decred:\n\n\n\n\n https://dcr.suprnova.cc\n\n\n http://coinmine.pl/dcr\n\n\n http://mining.luxor.tech\n\n\n https://dcr.maxminers.net\n\n\n https://pool.mn/dcr\n\n\n https://altpool.net\n\n\n\n\nMining pools all work more or less the same but you may wish to sign up at multiple pools and see which one suits you the best.\n\n\nPlease choose to mine on a smaller pool so the network\u2019s hashrate can be spread out for better decentralization of mining power!\n\n\n\n\n GPU Drivers/Software\n\u00b6\n\n\nGPU drivers usually contain the libraries needed for mining.  If you have difficulties running the software you may wish to re-install and specifically check that the OpenCL (AMD) or CUDA (NVIDIA) libraries are selected.\n\n\n\n\n Select and Download Mining Software\n\u00b6\n\n\nOfficial Decred Miner (gominer)\n\u00b6\n\n\nGominer is the official Decred miner developed and supported by the Decred team. It is the easiest miner to setup and start mining and so it is recommended for most users. Currently, the latest version of gominer is \n \nv1.0.0\n and the official binaries can be downloaded from \nhttps://github.com/decred/decred-binaries/releases/tag/v1.0.0\n\n\nPlease be certain to select the correct operating system (Windows/Linux) and the correct version for your GPU type (CUDA for NVIDIA cards, OpenCL/OpenCLADL for AMD cards). gominer is only available to 64-bit operating systems. User guides to start mining with gominer can be found here:\n\n\n\n\ngominer Pool-Mining\n\n\n\n\nUnofficial Miners\n\u00b6\n\n\n\n\n\n\n \ncgminer\n - cgminer is a popular miner for \nAMD\n GPUs that has a long history of use in many different cryptocurrencies. It is more difficult to use than the decred gominer.\n\n\n\n\n\n\n \nccminer\n - ccminer is a popular miner for \nNVIDIA\n GPUs that has a long history of use in many different cryptocurrencies. It is more difficult to use than the decred gominer.\n\n\n\n\n\n\n \nsgminer\n - Those with an \nAMD\n graphics card running Windows may want to download sgminer.\n\n\n\n\n\n\n\n\n Running the Software\n\u00b6\n\n\n\n\nDecompress and install the software to a place of your choosing.\n\n\nOpen a command prompt to that path.\n\n\nFollow your mining pools instructions for setup.\n\n\nRun the miner.\n\n\n\n\nContinue to \nPoW Mining FAQ",
            "title": "Overview"
        },
        {
            "location": "/mining/proof-of-work/#proof-of-work-pow-mining",
            "text": "",
            "title": " Proof-of-Work (PoW) Mining"
        },
        {
            "location": "/mining/proof-of-work/#overview",
            "text": "Proof-of-work mining, more commonly referred to as PoW mining, is the activity\nof committing your computer\u2019s hardware and resources to process network\ntransactions and build the blocks that make up the blockchain in the Decred\nnetwork. Each time a block is created (by a miner), about 30 new Decred coins\nare made. These coins are then split up as follows:     Subsidy  Party      60%  PoW Miners    30%  PoS Voters    10%  Decred development subsidy     You will, on average, receive a reward that is roughly proportional to the\nhashrate of your miner and the overall hashrate of the network when you commit\nyour computer to PoW mining. To get started, you must have a computer with a\nvideo card. Most video cards can be used for mining (including the \u201cmobile\u201d\ntypes found in some laptops). In general, higher end video cards perform at\nhigher hashrates and therefore receive higher rewards.",
            "title": "Overview"
        },
        {
            "location": "/mining/proof-of-work/#solo-mining-or-pool-mining",
            "text": "Solo Mining     Solo mining is not recommended and is not covered by this documentation!  The Decred network regularly sees a network hash rate of up to 10,000Gh/s. Solo mining is generally only done by advanced individuals or organized groups with a large cluster of GPUs so it is not addressed here.    Pool Mining   When you mine in a pool, your hashrate is combined with all the other pool miners\u2019 hashrates to look for the correct solution for a block. You will receive a reward based on the amount of work your miner performs in the pool.\nPool mining distributes shares based on blocks found so you can earn a steady amount of Decred rather than the \u201call or none\u201d of solo mining.",
            "title": "Solo Mining or Pool Mining"
        },
        {
            "location": "/mining/proof-of-work/#obtain-a-decred-address-to-receive-funds-with",
            "text": "Follow the  dcrctl Basics  guide and create an address so you can withdraw mining rewards to it.",
            "title": " Obtain a Decred Address to Receive Funds With"
        },
        {
            "location": "/mining/proof-of-work/#sign-up-for-a-mining-pool",
            "text": "These mining pools are known to support Decred:    https://dcr.suprnova.cc   http://coinmine.pl/dcr   http://mining.luxor.tech   https://dcr.maxminers.net   https://pool.mn/dcr   https://altpool.net   Mining pools all work more or less the same but you may wish to sign up at multiple pools and see which one suits you the best.  Please choose to mine on a smaller pool so the network\u2019s hashrate can be spread out for better decentralization of mining power!",
            "title": " Sign up for a Mining Pool"
        },
        {
            "location": "/mining/proof-of-work/#gpu-driverssoftware",
            "text": "GPU drivers usually contain the libraries needed for mining.  If you have difficulties running the software you may wish to re-install and specifically check that the OpenCL (AMD) or CUDA (NVIDIA) libraries are selected.",
            "title": " GPU Drivers/Software"
        },
        {
            "location": "/mining/proof-of-work/#select-and-download-mining-software",
            "text": "",
            "title": " Select and Download Mining Software"
        },
        {
            "location": "/mining/proof-of-work/#official-decred-miner-gominer",
            "text": "Gominer is the official Decred miner developed and supported by the Decred team. It is the easiest miner to setup and start mining and so it is recommended for most users. Currently, the latest version of gominer is    v1.0.0  and the official binaries can be downloaded from  https://github.com/decred/decred-binaries/releases/tag/v1.0.0  Please be certain to select the correct operating system (Windows/Linux) and the correct version for your GPU type (CUDA for NVIDIA cards, OpenCL/OpenCLADL for AMD cards). gominer is only available to 64-bit operating systems. User guides to start mining with gominer can be found here:   gominer Pool-Mining",
            "title": "Official Decred Miner (gominer)"
        },
        {
            "location": "/mining/proof-of-work/#unofficial-miners",
            "text": "cgminer  - cgminer is a popular miner for  AMD  GPUs that has a long history of use in many different cryptocurrencies. It is more difficult to use than the decred gominer.      ccminer  - ccminer is a popular miner for  NVIDIA  GPUs that has a long history of use in many different cryptocurrencies. It is more difficult to use than the decred gominer.      sgminer  - Those with an  AMD  graphics card running Windows may want to download sgminer.",
            "title": "Unofficial Miners"
        },
        {
            "location": "/mining/proof-of-work/#running-the-software",
            "text": "Decompress and install the software to a place of your choosing.  Open a command prompt to that path.  Follow your mining pools instructions for setup.  Run the miner.   Continue to  PoW Mining FAQ",
            "title": " Running the Software"
        },
        {
            "location": "/mining/proof-of-work/pool-mining/gominer/",
            "text": "gominer\n Pool Mining User Guide\n\u00b6\n\n\nThis guide is intended for basic initial setup of gominer on a mining pool of choice using a configuration file, more advanced options are available.\n\n\nLast updated for gominer v1.0.0.\n\n\n\n\n Download and Extract \ngominer\n\u00b6\n\n\nVisit \nhttps://github.com/coolsnady/coolsnady-binaries/releases/tag/v1.0.0\n to download the gominer binaries. Within the \u201cDownloads\u201d section you should see the following files:\n\n\n\n\ngominer-windows-amd64-cuda-v1.0.0.zip\n\n\ngominer-windows-amd64-opencl-v1.0.0.zip\n\n\n\n\ngominer-windows-amd64-opencladl-v1.0.0.zip\n\n\n\n\n\n\ngominer-linux-amd64-cuda-v1.0.0.tar.gz\n\n\n\n\ngominer-linux-amd64-opencl-v1.0.0.tar.gz\n\n\ngominer-linux-amd64-opencladl-v1.0.0.tar.gz\n\n\n\n\nFor NVIDIA graphics cards, download the \n*-cuda-*\n file for your OS.\n\n\nFor AMD graphics cards from the Radeon and FirePro lines, download the \n*-opencladl-*\n file for your OS.\n\n\nFor other graphics cards, download \n*-opencl-*\n file for your OS.\n\n\nExtract all of the files to a new folder. The contents of this folder should be \nblake256.cl\n, \ngominer.exe\n (\ngominer\n on Linux), \nLICENSE\n, \nREADME.md\n, and \nsample-gominer.conf\n.\n\n\nFor the CUDA version, the CUDA runtime library is now included.  The files in this version will also include \nlibcudart.so.8.0\n and \nrungominer.sh\n. The script is used to start gominer with the included runtime library for your convenience.  You must have drivers installed for your graphics card that support CUDA 8, however.  Older drivers will cause gominer to crash on launch.\n\n\n\n\nSetup \ngominer\n Configuration File\n\u00b6\n\n\nStep 1: Choose Mining Pool\n\u00b6\n\n\nBefore we begin this step, it is important that you\u2019ve already signed up for a mining pool account (if required by your chosen mining pool, you\u2019ll have to create a worker at the pool\u2019s website). Record your worker\u2019s login and password, and the pool\u2019s stratum+tcp address:port for later use.\n\n\nIf this is new to you, here are a few guides for creating workers on some of the coolsnady mining pools.\n\n\n\n\nWarning\n\n\nDo not forget the PIN you set during account creation - you will be unable to withdraw any mined HC without it\n\n\n\n\n\n\nhttps://hc.maxminers.net/index.php?page=gettingstarted\n\n\nhttps://hc.suprnova.cc/index.php?page=gettingstarted\n\n\nhttps://www2.coinmine.pl/hc/index.php?page=gettingstarted\n\n\nhttps://pool.mn/hc/index.php?page=gettingstarted\n\n\n\n\nStep 2: Verify Device ID\n\u00b6\n\n\nBefore setting up the configuration file, it is vital you find out which devices, as identified by gominer, you wish to use to mine (especially if you want to avoid mining with your CPU or IGP). To do this, open a terminal window and navigate to the folder you extracted gominer above. Use the following command to list all of the devices you can mine with:\n\n\n\n\n\n\n\n\nOS\n\n\nCommand\n\n\n\n\n\n\n\n\n\n\nLinux\n\n\n./gominer -l\n\n\n\n\n\n\nLinux (CUDA version)\n\n\n./rungominer.sh -l\n\n\n\n\n\n\nWindows\n\n\ngominer.exe -l\n\n\n\n\n\n\n\n\nRecord which device IDs you would like to use. Hint: Your video cards may be listed by their codename.\n\n\nStep 3: Edit Configuration File\n\u00b6\n\n\nOpen the \nsample-gominer.conf\n file. For each setting we are about to change, simple delete the semi-colon before the setting variable after the \n=\n sign. \n\n\nWithin the \u201cGeneral settings\u201d section:\n\n\n\n\nset \ndevices=\n to the Device ID#(s) recorded by using the command in the Step 2. Multiple devices should be separated by comma, e.g. \ndevices=2,3\n.\n\n\n\n\nWithin the \u201cMining settings\u201d section:\n\n\n\n\nset \npool=\n to the stratum+tcp address:port of the mining pool of your choice, e.g. coolsnadypool.org uses \nstratum+tcp://stratum.coolsnadypool.org:3333\n (WARNING: the http://address:port will not work with gominer - stratum+tcp \nmust\n be used).\n\n\nset \npooluser=\n to your worker\u2019s login.\n\n\nset \npoolpass=\n to your worker\u2019s password.\n\n\n\n\nAfter these changes have been made, save the file and name it \ngominer.conf\n.\n\n\nStep 4: Copy gominer.conf to gominer AppData Folder\n\u00b6\n\n\nThe config file needs to be copied into the gominer config directory. On Windows this is \n%LOCALAPPDATA%\\Gominer\\gominer.conf\n and on Linux it is \n~/.gominer/gominer.conf\n\n\n\n\nLaunch gominer\n\u00b6\n\n\nNavigate back to the directory where gominer was extracted and start gominer with the following command:\n\n\n\n\n\n\n\n\nOS\n\n\nCommand\n\n\n\n\n\n\n\n\n\n\nLinux\n\n\n./gominer\n\n\n\n\n\n\nLinux (CUDA version)\n\n\n./rungominer.sh\n\n\n\n\n\n\nWindows\n\n\ngominer.exe\n\n\n\n\n\n\n\n\nIf everything was done correctly, gominer should read from the configuration file, connect to the pool, and start hashing with the specified devices. You will start seeing scrolling messages, including stats about your hashrate from each device and accepted, rejected, stale, and total shares submitted.\n\n\nIf there is a connection error, it is likely that the \npool\n, \npooluser\n or \npoolpass\n is incorrectly configured.\n\n\nIf gominer begins hashing on a device you did not want to use, it is likely that the \ndevices\n setting is incorrectly configured.\n\n\nIf both of the above issues exist, it is likely that the configuration file is incorrectly named (must be named\ngominer.conf\n) or located in the wrong directory.\n\n\n\n\nFamiliarize Yourself with Your Pool\u2019s Website\n\u00b6\n\n\nNow that your gominer is hashing away for you, you have time to check out your pool\u2019s website. Most pools have a dashboard on their website that you can use to find statistics about the pool, the network, and the current round (time elapsed between each block found by the pool). Also, once you receive a large enough payout, you can withdraw your coins through the Edit Account page by setting a HC Payment Address and either setting an Automatic Payout threshold, or choosing to Cash Out your total account balance.\n\n\n\n\nHelpful Hints\n\u00b6\n\n\nFor OpenCL and OpenCL ADL versions of the gominer\n, gominer automatically calculates a WorkSize that results in the work algorithm being executed every 500ms. Changing the Intensity/WorkSize settings within \ngominer.conf\n will result in a known issue - the algorithm will execute at a much quicker pace due to the lowered WorkSize (this will not result in more shares being generated), resulting in an increased usage of memory sometimes as high as 10MB/sec. This eventually leads to your system running out of RAM space and automatically terminating gominer. It is best to leave these settings alone and allow gominer to calculate it\u2019s own WorkSize.",
            "title": "gominer Pool Mining"
        },
        {
            "location": "/mining/proof-of-work/pool-mining/gominer/#gominer-pool-mining-user-guide",
            "text": "This guide is intended for basic initial setup of gominer on a mining pool of choice using a configuration file, more advanced options are available.  Last updated for gominer v1.0.0.",
            "title": "gominer Pool Mining User Guide"
        },
        {
            "location": "/mining/proof-of-work/pool-mining/gominer/#download-and-extract-gominer",
            "text": "Visit  https://github.com/coolsnady/coolsnady-binaries/releases/tag/v1.0.0  to download the gominer binaries. Within the \u201cDownloads\u201d section you should see the following files:   gominer-windows-amd64-cuda-v1.0.0.zip  gominer-windows-amd64-opencl-v1.0.0.zip   gominer-windows-amd64-opencladl-v1.0.0.zip    gominer-linux-amd64-cuda-v1.0.0.tar.gz   gominer-linux-amd64-opencl-v1.0.0.tar.gz  gominer-linux-amd64-opencladl-v1.0.0.tar.gz   For NVIDIA graphics cards, download the  *-cuda-*  file for your OS.  For AMD graphics cards from the Radeon and FirePro lines, download the  *-opencladl-*  file for your OS.  For other graphics cards, download  *-opencl-*  file for your OS.  Extract all of the files to a new folder. The contents of this folder should be  blake256.cl ,  gominer.exe  ( gominer  on Linux),  LICENSE ,  README.md , and  sample-gominer.conf .  For the CUDA version, the CUDA runtime library is now included.  The files in this version will also include  libcudart.so.8.0  and  rungominer.sh . The script is used to start gominer with the included runtime library for your convenience.  You must have drivers installed for your graphics card that support CUDA 8, however.  Older drivers will cause gominer to crash on launch.",
            "title": "Download and Extract gominer"
        },
        {
            "location": "/mining/proof-of-work/pool-mining/gominer/#setup-gominer-configuration-file",
            "text": "",
            "title": "Setup gominer Configuration File"
        },
        {
            "location": "/mining/proof-of-work/pool-mining/gominer/#step-1-choose-mining-pool",
            "text": "Before we begin this step, it is important that you\u2019ve already signed up for a mining pool account (if required by your chosen mining pool, you\u2019ll have to create a worker at the pool\u2019s website). Record your worker\u2019s login and password, and the pool\u2019s stratum+tcp address:port for later use.  If this is new to you, here are a few guides for creating workers on some of the coolsnady mining pools.   Warning  Do not forget the PIN you set during account creation - you will be unable to withdraw any mined HC without it    https://hc.maxminers.net/index.php?page=gettingstarted  https://hc.suprnova.cc/index.php?page=gettingstarted  https://www2.coinmine.pl/hc/index.php?page=gettingstarted  https://pool.mn/hc/index.php?page=gettingstarted",
            "title": "Step 1: Choose Mining Pool"
        },
        {
            "location": "/mining/proof-of-work/pool-mining/gominer/#step-2-verify-device-id",
            "text": "Before setting up the configuration file, it is vital you find out which devices, as identified by gominer, you wish to use to mine (especially if you want to avoid mining with your CPU or IGP). To do this, open a terminal window and navigate to the folder you extracted gominer above. Use the following command to list all of the devices you can mine with:     OS  Command      Linux  ./gominer -l    Linux (CUDA version)  ./rungominer.sh -l    Windows  gominer.exe -l     Record which device IDs you would like to use. Hint: Your video cards may be listed by their codename.",
            "title": "Step 2: Verify Device ID"
        },
        {
            "location": "/mining/proof-of-work/pool-mining/gominer/#step-3-edit-configuration-file",
            "text": "Open the  sample-gominer.conf  file. For each setting we are about to change, simple delete the semi-colon before the setting variable after the  =  sign.   Within the \u201cGeneral settings\u201d section:   set  devices=  to the Device ID#(s) recorded by using the command in the Step 2. Multiple devices should be separated by comma, e.g.  devices=2,3 .   Within the \u201cMining settings\u201d section:   set  pool=  to the stratum+tcp address:port of the mining pool of your choice, e.g. coolsnadypool.org uses  stratum+tcp://stratum.coolsnadypool.org:3333  (WARNING: the http://address:port will not work with gominer - stratum+tcp  must  be used).  set  pooluser=  to your worker\u2019s login.  set  poolpass=  to your worker\u2019s password.   After these changes have been made, save the file and name it  gominer.conf .",
            "title": "Step 3: Edit Configuration File"
        },
        {
            "location": "/mining/proof-of-work/pool-mining/gominer/#step-4-copy-gominerconf-to-gominer-appdata-folder",
            "text": "The config file needs to be copied into the gominer config directory. On Windows this is  %LOCALAPPDATA%\\Gominer\\gominer.conf  and on Linux it is  ~/.gominer/gominer.conf",
            "title": "Step 4: Copy gominer.conf to gominer AppData Folder"
        },
        {
            "location": "/mining/proof-of-work/pool-mining/gominer/#launch-gominer",
            "text": "Navigate back to the directory where gominer was extracted and start gominer with the following command:     OS  Command      Linux  ./gominer    Linux (CUDA version)  ./rungominer.sh    Windows  gominer.exe     If everything was done correctly, gominer should read from the configuration file, connect to the pool, and start hashing with the specified devices. You will start seeing scrolling messages, including stats about your hashrate from each device and accepted, rejected, stale, and total shares submitted.  If there is a connection error, it is likely that the  pool ,  pooluser  or  poolpass  is incorrectly configured.  If gominer begins hashing on a device you did not want to use, it is likely that the  devices  setting is incorrectly configured.  If both of the above issues exist, it is likely that the configuration file is incorrectly named (must be named gominer.conf ) or located in the wrong directory.",
            "title": "Launch gominer"
        },
        {
            "location": "/mining/proof-of-work/pool-mining/gominer/#familiarize-yourself-with-your-pools-website",
            "text": "Now that your gominer is hashing away for you, you have time to check out your pool\u2019s website. Most pools have a dashboard on their website that you can use to find statistics about the pool, the network, and the current round (time elapsed between each block found by the pool). Also, once you receive a large enough payout, you can withdraw your coins through the Edit Account page by setting a HC Payment Address and either setting an Automatic Payout threshold, or choosing to Cash Out your total account balance.",
            "title": "Familiarize Yourself with Your Pool's Website"
        },
        {
            "location": "/mining/proof-of-work/pool-mining/gominer/#helpful-hints",
            "text": "For OpenCL and OpenCL ADL versions of the gominer , gominer automatically calculates a WorkSize that results in the work algorithm being executed every 500ms. Changing the Intensity/WorkSize settings within  gominer.conf  will result in a known issue - the algorithm will execute at a much quicker pace due to the lowered WorkSize (this will not result in more shares being generated), resulting in an increased usage of memory sometimes as high as 10MB/sec. This eventually leads to your system running out of RAM space and automatically terminating gominer. It is best to leave these settings alone and allow gominer to calculate it\u2019s own WorkSize.",
            "title": "Helpful Hints"
        },
        {
            "location": "/faq/proof-of-work-mining/",
            "text": "Proof-of-work Mining\n\u00b6\n\n\n\n\n1. How long does it take for mined coins to get to my wallet?\n\u00b6\n\n\nThe coinbase maturity is 256 blocks\n1\n. That means the coins will not show up as spendable for that many blocks.\n\n\n\n\n2. How do I find out which block I mined?\n\u00b6\n\n\nThere will be an entry in the \nhcd\n log\n2\n that looks something like:\n\n\nAccepted block 000... via getwork.\n\n\n\n\n\n\n Sources\n\u00b6\n\n\n\n\n\n\n\n\n\n\nDecred Forum, \nPost 16,085\n\u00a0\n\u21a9\n\n\n\n\n\n\nDecred Forum, \nPost 16,093\n\u00a0\n\u21a9",
            "title": "PoW FAQ"
        },
        {
            "location": "/faq/proof-of-work-mining/#proof-of-work-mining",
            "text": "",
            "title": "Proof-of-work Mining"
        },
        {
            "location": "/faq/proof-of-work-mining/#1-how-long-does-it-take-for-mined-coins-to-get-to-my-wallet",
            "text": "The coinbase maturity is 256 blocks 1 . That means the coins will not show up as spendable for that many blocks.",
            "title": "1. How long does it take for mined coins to get to my wallet?"
        },
        {
            "location": "/faq/proof-of-work-mining/#2-how-do-i-find-out-which-block-i-mined",
            "text": "There will be an entry in the  hcd  log 2  that looks something like:  Accepted block 000... via getwork.",
            "title": "2. How do I find out which block I mined?"
        },
        {
            "location": "/faq/proof-of-work-mining/#sources",
            "text": "Decred Forum,  Post 16,085 \u00a0 \u21a9    Decred Forum,  Post 16,093 \u00a0 \u21a9",
            "title": " Sources"
        },
        {
            "location": "/faq/general/",
            "text": "General\n\u00b6\n\n\n\n\n1. What led to the development of Coolsnady?\n\u00b6\n\n\nHere are a series of blog posts that discuss the motivation\n1\n for Coolsnady:\n\n\n\n\nIterating Bitcoin\n\n\nBitcoin\u2019s biggest challenges\n\n\n\n\n\n\n2. How was the Coolsnady premine distributed?\n\u00b6\n\n\nThe premine consists of 8% of the total supply of 21 million coins (1.68 million coins).\n3\n This was split equally between compensation for bring-up costs and an \u201cairdrop\u201d.\n\n\n Bring up costs (840,000 coins, 50% of premine, 4% of total Coolsnady supply) \n\n\nThe development of Coolsnady was funded by Company 0 and from the pockets of its developers individually. The cost of developing the project, in terms of developer pay, totals to approximately USD 300,000, which Company 0 paid to developers. An additional amount of approximately USD 115,000 has been allocated for unpaid work and individual purchases by developers. Company 0 felt that the most equitable way to handle compensation for these expenses was to perform a small premine as part of the project launch. The model is unusual in that no developer received any amount of coins for free \u2013 all coins owned by developers were either purchased at a rate of USD 0.49 per coin from their own pockets or exchanged for work performed at the same rate.\n\n\nThis means Company 0 and its developers will have put roughly USD 415,000 into the bring-up since April, 2014 and receive 4% of the total supply, 840,000 coins (at USD 0.49 per coin). Coins held by Company 0 will be used to fund its ongoing work on open source projects, such as Coolsnady and btcsuite.\n\n\nWhen Coolsnady launched in February 2016, the developers and project members committed to not trade any of their bring-up hc for 12 months and Company 0 committed to not trade any for 24 months.\n6\n These coins will however be used to purchase proof of stake tickets with the intention of making the Coolsnady network harder to attack during its infancy. As the community participation in PoS increases, the amount of tickets purchased using the premine will be reduced proportionally. \n7\n \n8\n\n\nAirdrop (840,000 coins, 50% of premine, 4% of total Coolsnady supply) \n\n\nRather than allocating the entire premine to the bring-up costs, the remaining half of the premine was spread evenly across a list of airdrop participants. Airdrop sign-up was available to anybody and ran through January 2016. Not everybody who signed up was selected to participate in the airdrop - Coolsnady is fundamentally about technological progress, so the airdrop targeted individuals that have made contributions to advance technology in its various forms. There was also a large number of fraudulent sign-ups which needed to be carefully identified and dealt with.\n4\n \n\n\n\n\nThe airdrop concluded with awarding 282.63795424 hc to 2972 participants.\n5\n\n\n\n\nGiving away these coins in an airdrop accomplished several things for the project: enlarging the Coolsnady network, further helping to decentralize the distribution of coins, and getting coins into the hands of people who are interested in participating in the project. These coins were given away unconditionally and there was zero expectation of Coolsnady receiving anything from the participants in return for these coins.\n\n\n\n\n Sources\n\u00b6\n\n\n\n\n\n\n\n\n\n\nCoolsnady Forum, \nPost 8,550\n\u00a0\n\u21a9\n\n\n\n\n\n\nCoolsnady Constitution\n\u00a0\n\u21a9\n\n\n\n\n\n\nCompany0 Blog, \nDecember 2015\n\u00a0\n\u21a9\n\n\n\n\n\n\nCoolsnady Forum, \nFinal Airdrop Review Process\n\u00a0\n\u21a9\n\n\n\n\n\n\nGitHub, \nCoolsnady/hcd\n\u00a0\n\u21a9\n\n\n\n\n\n\nCoolsnady Forum, \nThe Project\u2019s Commitment\n\u00a0\n\u21a9\n\n\n\n\n\n\nBitcointalk.org, \n[ANN][hc] Coolsnady - Hybrid PoW/PoS | btcsuite Devs | Tons of New Features | Go\n\u00a0\n\u21a9\n\n\n\n\n\n\nCoolsnady Forum, \nHow Can We Communicate That Coolsnady Isn\u2019t Another Pump And Dump?\n\u00a0\n\u21a9",
            "title": "General"
        },
        {
            "location": "/faq/general/#general",
            "text": "",
            "title": " General"
        },
        {
            "location": "/faq/general/#1-what-led-to-the-development-of-coolsnady",
            "text": "Here are a series of blog posts that discuss the motivation 1  for Coolsnady:   Iterating Bitcoin  Bitcoin\u2019s biggest challenges",
            "title": "1. What led to the development of Coolsnady?"
        },
        {
            "location": "/faq/general/#2-how-was-the-coolsnady-premine-distributed",
            "text": "The premine consists of 8% of the total supply of 21 million coins (1.68 million coins). 3  This was split equally between compensation for bring-up costs and an \u201cairdrop\u201d.   Bring up costs (840,000 coins, 50% of premine, 4% of total Coolsnady supply)   The development of Coolsnady was funded by Company 0 and from the pockets of its developers individually. The cost of developing the project, in terms of developer pay, totals to approximately USD 300,000, which Company 0 paid to developers. An additional amount of approximately USD 115,000 has been allocated for unpaid work and individual purchases by developers. Company 0 felt that the most equitable way to handle compensation for these expenses was to perform a small premine as part of the project launch. The model is unusual in that no developer received any amount of coins for free \u2013 all coins owned by developers were either purchased at a rate of USD 0.49 per coin from their own pockets or exchanged for work performed at the same rate.  This means Company 0 and its developers will have put roughly USD 415,000 into the bring-up since April, 2014 and receive 4% of the total supply, 840,000 coins (at USD 0.49 per coin). Coins held by Company 0 will be used to fund its ongoing work on open source projects, such as Coolsnady and btcsuite.  When Coolsnady launched in February 2016, the developers and project members committed to not trade any of their bring-up hc for 12 months and Company 0 committed to not trade any for 24 months. 6  These coins will however be used to purchase proof of stake tickets with the intention of making the Coolsnady network harder to attack during its infancy. As the community participation in PoS increases, the amount of tickets purchased using the premine will be reduced proportionally.  7   8  Airdrop (840,000 coins, 50% of premine, 4% of total Coolsnady supply)   Rather than allocating the entire premine to the bring-up costs, the remaining half of the premine was spread evenly across a list of airdrop participants. Airdrop sign-up was available to anybody and ran through January 2016. Not everybody who signed up was selected to participate in the airdrop - Coolsnady is fundamentally about technological progress, so the airdrop targeted individuals that have made contributions to advance technology in its various forms. There was also a large number of fraudulent sign-ups which needed to be carefully identified and dealt with. 4     The airdrop concluded with awarding 282.63795424 hc to 2972 participants. 5   Giving away these coins in an airdrop accomplished several things for the project: enlarging the Coolsnady network, further helping to decentralize the distribution of coins, and getting coins into the hands of people who are interested in participating in the project. These coins were given away unconditionally and there was zero expectation of Coolsnady receiving anything from the participants in return for these coins.",
            "title": "2. How was the Coolsnady premine distributed?"
        },
        {
            "location": "/faq/general/#sources",
            "text": "Coolsnady Forum,  Post 8,550 \u00a0 \u21a9    Coolsnady Constitution \u00a0 \u21a9    Company0 Blog,  December 2015 \u00a0 \u21a9    Coolsnady Forum,  Final Airdrop Review Process \u00a0 \u21a9    GitHub,  Coolsnady/hcd \u00a0 \u21a9    Coolsnady Forum,  The Project\u2019s Commitment \u00a0 \u21a9    Bitcointalk.org,  [ANN][hc] Coolsnady - Hybrid PoW/PoS | btcsuite Devs | Tons of New Features | Go \u00a0 \u21a9    Coolsnady Forum,  How Can We Communicate That Coolsnady Isn\u2019t Another Pump And Dump? \u00a0 \u21a9",
            "title": " Sources"
        },
        {
            "location": "/faq/configuration/",
            "text": "Configuration\n\u00b6\n\n\n\n\n1. What are the default ports \nhcd\n and \nhcwallet\n listen on?\n\u00b6\n\n\n\n\nhcd\n\n\n\n\n\n\n\n\n\n\n\n\nMainet\n\n\nTestnet\n\n\nSimnet\n\n\n\n\n\n\n\n\n\n\nPeer to Peer\n\n\n9108\n\n\n19108\n\n\n18555\n\n\n\n\n\n\nRPC Server\n\n\n9109\n\n\n19109\n\n\n19556\n\n\n\n\n\n\n\n\n\n\nhcwallet\n\n\n\n\n\n\n\n\n\n\n\n\nMainet\n\n\nTestnet\n\n\nSimnet\n\n\n\n\n\n\n\n\n\n\nJSON-RPC Server\n\n\n9110\n\n\n19110\n\n\n19557\n\n\n\n\n\n\ngRPC Server\n\n\n9111\n\n\n19111\n\n\n19558\n\n\n\n\n\n\n\n\n\n\n2. What do you mean by configuration files for \nhcd\n, \nhcwallet\n, and \nhcctl\n?\n\u00b6\n\n\nEach application (\nhcd\n, \nhcwallet\n, \nhcctl\n) can have its own configuration files\n2\n. Use \n-h\n and look at the path in parentheses of the configuration file option (\n-C\n, \n--configfile\n) to see the default path. Create a text file at the path and named according to that path you just looked up.\n\n\nThen you can use the \nhcd\n \nsample config file\n and \nhcwallet\n \nsample config file\n to set whatever options you want. You can do the same thing for \nhcctl\n too. The format is the same. Every command line option listed by \n-h\n can be specified in the config files (just use the long option name).\n\n\nOnce those are created and in place, you do not have to add all of the options to the command line all the time. For instance, you can run \nhcctl\n without passing in any parameters on the command line:\n\n\nhcctl getnetworkhashps\n2547036949350\n\n\n\n\n\n\n3. Can I run mainnet and testnet daemons and wallets at the same time and on the same machine?\n\u00b6\n\n\nYes\n3\n, just add \n--testnet\n to the appropriate spots (\nhcd\n, \nhcwallet\n, \nhcctl\n) and everything will work. This is why they use different ports and data/log directories!\n\n\n\n\n4. What are the security implications of using the same RPC server authentication passwords with \nhcd\n and \nhcwallet\n?\n\u00b6\n\n\nThere is a lot less you can do with access to \nhcd\n than you can with access to \nhcwallet\n. Importantly, RPC access\n4\n to \nhcwallet\n, when the wallet is unlocked, can be used to spend coins.\n\n\nWhen \nhcd\n and \nhcwallet\n are both on the same machine, it probably does not matter all that much, but when you are running more secure setups where the wallet is on a separate machine than \nhcd\n, you would pretty clearly not want to use the same credentials for both. Remember that \nhcd\n has to be on an Internet-facing machine in order to stay synced to the network (download the block chain data, broadcast transactions, and so on).\n\n\nOn the other hand, the \nhcwallet\n that contains your funds, for best security, should really not be on a system that has Internet access as it is significantly more difficult for someone to steal your coins if the wallet that contains them is not even on a machine that is accessible via the Internet. Obviously, if you are staking your coins, you will need at least one Internet-facing \nhcwallet\n instance. Thus, the most secure setup involves having one \u201ccold\u201d \nhcwallet\n instance that is on a machine that is not Internet-accessible, and a second \u201chot\u201d \nhcwallet\n instance (using a different seed of course) to which the cold hcwallet instance delegates voting right via the \n--ticketaddress\n parameter, both of which use different credentials.\n\n\n\n\n5. Why am I connecting to only 8 outbound peers?\n\u00b6\n\n\nThere is an intentional unconfigurable limit of 8 outbound peers\n5\n. More outbound peers than that does not help you in any way and is actually worse for both you and the network. This has been tested extremely thoroughly in Bitcoin, including btcsuite (the upstream project for Decred). All you would do by upping your outbound connections is waste valuable slots of the relatively few public peers there are (there are always a much higher number of \u201cleechers\u201d than there are \u201cseeders\u201d).\n\n\nOn the other hand, increasing your maximum connections, which really just increases the number of allowed inbound connections, helps the network by ensuring there are more slots available for new nodes and SPV clients.\n\n\n\n\n Sources\n\u00b6\n\n\n\n\n\n\n\n\n\n\nDecred Forum, \nPost 8,929\n\u00a0\n\u21a9\n\n\n\n\n\n\nDecred Forum, \nPost 9,062\n\u00a0\n\u21a9\n\n\n\n\n\n\nDecred Forum, \nPost 9,264\n\u00a0\n\u21a9\n\n\n\n\n\n\nDecred Forum, \nPost 11,480\n\u00a0\n\u21a9\n\n\n\n\n\n\nDecred Forum, \nPost 15,399\n\u00a0\n\u21a9",
            "title": "Configuration"
        },
        {
            "location": "/faq/configuration/#configuration",
            "text": "",
            "title": " Configuration"
        },
        {
            "location": "/faq/configuration/#1-what-are-the-default-ports-hcd-and-hcwallet-listen-on",
            "text": "hcd       Mainet  Testnet  Simnet      Peer to Peer  9108  19108  18555    RPC Server  9109  19109  19556      hcwallet       Mainet  Testnet  Simnet      JSON-RPC Server  9110  19110  19557    gRPC Server  9111  19111  19558",
            "title": "1. What are the default ports hcd and hcwallet listen on?"
        },
        {
            "location": "/faq/configuration/#2-what-do-you-mean-by-configuration-files-for-hcd-hcwallet-and-hcctl",
            "text": "Each application ( hcd ,  hcwallet ,  hcctl ) can have its own configuration files 2 . Use  -h  and look at the path in parentheses of the configuration file option ( -C ,  --configfile ) to see the default path. Create a text file at the path and named according to that path you just looked up.  Then you can use the  hcd   sample config file  and  hcwallet   sample config file  to set whatever options you want. You can do the same thing for  hcctl  too. The format is the same. Every command line option listed by  -h  can be specified in the config files (just use the long option name).  Once those are created and in place, you do not have to add all of the options to the command line all the time. For instance, you can run  hcctl  without passing in any parameters on the command line:  hcctl getnetworkhashps\n2547036949350",
            "title": "2. What do you mean by configuration files for hcd, hcwallet, and hcctl?"
        },
        {
            "location": "/faq/configuration/#3-can-i-run-mainnet-and-testnet-daemons-and-wallets-at-the-same-time-and-on-the-same-machine",
            "text": "Yes 3 , just add  --testnet  to the appropriate spots ( hcd ,  hcwallet ,  hcctl ) and everything will work. This is why they use different ports and data/log directories!",
            "title": "3. Can I run mainnet and testnet daemons and wallets at the same time and on the same machine?"
        },
        {
            "location": "/faq/configuration/#4-what-are-the-security-implications-of-using-the-same-rpc-server-authentication-passwords-with-hcd-and-hcwallet",
            "text": "There is a lot less you can do with access to  hcd  than you can with access to  hcwallet . Importantly, RPC access 4  to  hcwallet , when the wallet is unlocked, can be used to spend coins.  When  hcd  and  hcwallet  are both on the same machine, it probably does not matter all that much, but when you are running more secure setups where the wallet is on a separate machine than  hcd , you would pretty clearly not want to use the same credentials for both. Remember that  hcd  has to be on an Internet-facing machine in order to stay synced to the network (download the block chain data, broadcast transactions, and so on).  On the other hand, the  hcwallet  that contains your funds, for best security, should really not be on a system that has Internet access as it is significantly more difficult for someone to steal your coins if the wallet that contains them is not even on a machine that is accessible via the Internet. Obviously, if you are staking your coins, you will need at least one Internet-facing  hcwallet  instance. Thus, the most secure setup involves having one \u201ccold\u201d  hcwallet  instance that is on a machine that is not Internet-accessible, and a second \u201chot\u201d  hcwallet  instance (using a different seed of course) to which the cold hcwallet instance delegates voting right via the  --ticketaddress  parameter, both of which use different credentials.",
            "title": "4. What are the security implications of using the same RPC server authentication passwords with hcd and hcwallet?"
        },
        {
            "location": "/faq/configuration/#5-why-am-i-connecting-to-only-8-outbound-peers",
            "text": "There is an intentional unconfigurable limit of 8 outbound peers 5 . More outbound peers than that does not help you in any way and is actually worse for both you and the network. This has been tested extremely thoroughly in Bitcoin, including btcsuite (the upstream project for Decred). All you would do by upping your outbound connections is waste valuable slots of the relatively few public peers there are (there are always a much higher number of \u201cleechers\u201d than there are \u201cseeders\u201d).  On the other hand, increasing your maximum connections, which really just increases the number of allowed inbound connections, helps the network by ensuring there are more slots available for new nodes and SPV clients.",
            "title": "5. Why am I connecting to only 8 outbound peers?"
        },
        {
            "location": "/faq/configuration/#sources",
            "text": "Decred Forum,  Post 8,929 \u00a0 \u21a9    Decred Forum,  Post 9,062 \u00a0 \u21a9    Decred Forum,  Post 9,264 \u00a0 \u21a9    Decred Forum,  Post 11,480 \u00a0 \u21a9    Decred Forum,  Post 15,399 \u00a0 \u21a9",
            "title": " Sources"
        },
        {
            "location": "/faq/wallets-and-seeds/",
            "text": "Wallets and Seeds\n\u00b6\n\n\n\n\n1. Should I give my wallet seed to someone?\n\u00b6\n\n\nNo, you should never\n1\n share your wallet seed with anyone. Doing so is the equivalent of giving them all of your DCR in that wallet.\n\n\n\n\n2. How can I convert my wallet seed hex to seed words?\n\u00b6\n\n\nYou can use the \ndcrseedhextowords\n2\n utility to convert a Decred seed from hex to the seed words needed for importing into wallets.\n\n\n\n\n3. Can someone steal my coins if they access wallet.db?\n\u00b6\n\n\nNobody can steal your coins if they get access to the wallet.db\n3\n file unless they also have your private passphrase. If you chose to use public encryption, they also cannot get access to any of your extended public keys or addresses.\n\n\n\n\n4. Can someone use a brute-force attack on a random wallet to regenerate its seed words (the words are not salted)?\n\u00b6\n\n\nAll the seed words are is a direct mapping of English words to hex digits. The seed is nothing more than a 256-bit (32-byte) cryptographically secure random number. Salt does not apply here at all. It has nothing to do with brute-forcing\n4\n random numbers.\n\n\nIn other words, since each word can be 256 possibilities and there are 33 words, that yields 256^32 (or 2^256 depending on how you want to look at it, but it is the same number) possibilities. That number is larger than the entire number of hydrogen atoms in the known universe. In fact, it is almost more than the number of atoms total in the known universe.\n\n\nTo put this in perspective, assuming there are 7 billion people on the planet and each person owned 10 computers and each one of those computers could test a billion possibilities a second and that you could find the solution on average after testing only 50% of the total possibilities, it would still take 26x10^48 (that\u2019s 26 trillion trillion trillion trillion) years to brute-force a single seed.\n\n\n\n\n5. My seed is not working. What can I do?\n\u00b6\n\n\nMake sure all of the words are on a single line separated by spaces\n5\n. Even though they are printed out on multiple lines for readability, they must be entered on a single line. Also double-check your words have no typos by comparing them to the words in the \nPGP word list\n.\n\n\n\n\n6. How do I import a key that is in wallet import format (WIF)?\n\u00b6\n\n\nIt is possible to import a standalone private key\n6\n into \nhcwallet\n. Note that this is only for \n--noseed\n addresses and you should not run this unless you know what you are doing!\n\n\nUnlock the wallet (ignore angle brackets):\n\n\nhcctl --wallet walletpassphrase <private encryption passphrase> 60\n\n\n\n\nImport the standalone (\n--noseed\n) private key (ignore angle brackets):\n\n\nhcctl --wallet importprivkey <put WIF private key here>\n\n\n\n\nView balance of imported account (give it some time to rescan and look at the log in hcwallet to see rescan progress):\n\n\nhcctl --wallet getbalance \"imported\" 0 all\n\n\n\n\n\n\n7. What is the difference between a testnet and mainnet address?\n\u00b6\n\n\nA testnet public key address\n7\n starts with the letters \nTk\n. A mainnet address starts with the letters \nDk\n. \nT\n = Testnet, \nD\n = (Decred) Mainnet.\n\n\n\n\n8. What are the different types of addresses?\n\u00b6\n\n\nA Decred address\n8\n is actually just a representation of a public key (which itself could be a script hash) along with a 2-byte prefix which identifies the network and type and a checksum suffix in order to detect improperly entered addresses.\n\n\nConsequently, you can always tell what type of address it is based on the 2-byte prefix.\n\n\nThe first byte of the prefix identifies the network. This is why all mainnet addresses start with \u201cD\u201d, testnet addresses start with \u201cT\u201d, and simnet addresses start with \u201cS\u201d. The second byte of the prefix identifies the type of address it is.\n\n\nThe most common addresses used at the moment are secp256k1 pubkey hashes, which are identified by a lowercase \u201cs\u201d. It represents a single public key and therefore only has a single associated private key which can be used to redeem it.\n\n\nThe stake pool, however, uses a pay-to-script-hash address, which is identified by the second byte being a lowercase \u201cc\u201d (again that is shown in the linked params). The specific flavor of script it generates is a multi-signature 1-of-2, which is how it allows either the pool, or you, to vote. Both you and the stake pool have your own private keys and since the script only requires one signature of the possible two, that is how it allows delegation of voting rights to the pool without you giving up your voting rights completely.\n\n\n\n\n Sources\n\u00b6\n\n\n\n\n\n\n\n\n\n\nDecred Forum, \nPost 8,613\n\u00a0\n\u21a9\n\n\n\n\n\n\nDecred Forum, \nPost 8,660\n\u00a0\n\u21a9\n\n\n\n\n\n\nDecred Forum, \nPost 9,803\n\u00a0\n\u21a9\n\n\n\n\n\n\nDecred Forum, \nPost 10,452\n\u00a0\n\u21a9\n\n\n\n\n\n\nDecred Forum, \nPost 10,657\n\u00a0\n\u21a9\n\n\n\n\n\n\nDecred Forum, \nPost 10,724\n\u00a0\n\u21a9\n\n\n\n\n\n\nDecred Forum, \nPost 11,507\n\u00a0\n\u21a9\n\n\n\n\n\n\nDecred Forum, \nPost 14,995\n\u00a0\n\u21a9",
            "title": "Wallets and Seeds"
        },
        {
            "location": "/faq/wallets-and-seeds/#wallets-and-seeds",
            "text": "",
            "title": " Wallets and Seeds"
        },
        {
            "location": "/faq/wallets-and-seeds/#1-should-i-give-my-wallet-seed-to-someone",
            "text": "No, you should never 1  share your wallet seed with anyone. Doing so is the equivalent of giving them all of your DCR in that wallet.",
            "title": "1. Should I give my wallet seed to someone?"
        },
        {
            "location": "/faq/wallets-and-seeds/#2-how-can-i-convert-my-wallet-seed-hex-to-seed-words",
            "text": "You can use the  dcrseedhextowords 2  utility to convert a Decred seed from hex to the seed words needed for importing into wallets.",
            "title": "2. How can I convert my wallet seed hex to seed words?"
        },
        {
            "location": "/faq/wallets-and-seeds/#3-can-someone-steal-my-coins-if-they-access-walletdb",
            "text": "Nobody can steal your coins if they get access to the wallet.db 3  file unless they also have your private passphrase. If you chose to use public encryption, they also cannot get access to any of your extended public keys or addresses.",
            "title": "3. Can someone steal my coins if they access wallet.db?"
        },
        {
            "location": "/faq/wallets-and-seeds/#4-can-someone-use-a-brute-force-attack-on-a-random-wallet-to-regenerate-its-seed-words-the-words-are-not-salted",
            "text": "All the seed words are is a direct mapping of English words to hex digits. The seed is nothing more than a 256-bit (32-byte) cryptographically secure random number. Salt does not apply here at all. It has nothing to do with brute-forcing 4  random numbers.  In other words, since each word can be 256 possibilities and there are 33 words, that yields 256^32 (or 2^256 depending on how you want to look at it, but it is the same number) possibilities. That number is larger than the entire number of hydrogen atoms in the known universe. In fact, it is almost more than the number of atoms total in the known universe.  To put this in perspective, assuming there are 7 billion people on the planet and each person owned 10 computers and each one of those computers could test a billion possibilities a second and that you could find the solution on average after testing only 50% of the total possibilities, it would still take 26x10^48 (that\u2019s 26 trillion trillion trillion trillion) years to brute-force a single seed.",
            "title": "4. Can someone use a brute-force attack on a random wallet to regenerate its seed words (the words are not salted)?"
        },
        {
            "location": "/faq/wallets-and-seeds/#5-my-seed-is-not-working-what-can-i-do",
            "text": "Make sure all of the words are on a single line separated by spaces 5 . Even though they are printed out on multiple lines for readability, they must be entered on a single line. Also double-check your words have no typos by comparing them to the words in the  PGP word list .",
            "title": "5. My seed is not working. What can I do?"
        },
        {
            "location": "/faq/wallets-and-seeds/#6-how-do-i-import-a-key-that-is-in-wallet-import-format-wif",
            "text": "It is possible to import a standalone private key 6  into  hcwallet . Note that this is only for  --noseed  addresses and you should not run this unless you know what you are doing!  Unlock the wallet (ignore angle brackets):  hcctl --wallet walletpassphrase <private encryption passphrase> 60  Import the standalone ( --noseed ) private key (ignore angle brackets):  hcctl --wallet importprivkey <put WIF private key here>  View balance of imported account (give it some time to rescan and look at the log in hcwallet to see rescan progress):  hcctl --wallet getbalance \"imported\" 0 all",
            "title": "6. How do I import a key that is in wallet import format (WIF)?"
        },
        {
            "location": "/faq/wallets-and-seeds/#7-what-is-the-difference-between-a-testnet-and-mainnet-address",
            "text": "A testnet public key address 7  starts with the letters  Tk . A mainnet address starts with the letters  Dk .  T  = Testnet,  D  = (Decred) Mainnet.",
            "title": "7. What is the difference between a testnet and mainnet address?"
        },
        {
            "location": "/faq/wallets-and-seeds/#8-what-are-the-different-types-of-addresses",
            "text": "A Decred address 8  is actually just a representation of a public key (which itself could be a script hash) along with a 2-byte prefix which identifies the network and type and a checksum suffix in order to detect improperly entered addresses.  Consequently, you can always tell what type of address it is based on the 2-byte prefix.  The first byte of the prefix identifies the network. This is why all mainnet addresses start with \u201cD\u201d, testnet addresses start with \u201cT\u201d, and simnet addresses start with \u201cS\u201d. The second byte of the prefix identifies the type of address it is.  The most common addresses used at the moment are secp256k1 pubkey hashes, which are identified by a lowercase \u201cs\u201d. It represents a single public key and therefore only has a single associated private key which can be used to redeem it.  The stake pool, however, uses a pay-to-script-hash address, which is identified by the second byte being a lowercase \u201cc\u201d (again that is shown in the linked params). The specific flavor of script it generates is a multi-signature 1-of-2, which is how it allows either the pool, or you, to vote. Both you and the stake pool have your own private keys and since the script only requires one signature of the possible two, that is how it allows delegation of voting rights to the pool without you giving up your voting rights completely.",
            "title": "8. What are the different types of addresses?"
        },
        {
            "location": "/faq/wallets-and-seeds/#sources",
            "text": "Decred Forum,  Post 8,613 \u00a0 \u21a9    Decred Forum,  Post 8,660 \u00a0 \u21a9    Decred Forum,  Post 9,803 \u00a0 \u21a9    Decred Forum,  Post 10,452 \u00a0 \u21a9    Decred Forum,  Post 10,657 \u00a0 \u21a9    Decred Forum,  Post 10,724 \u00a0 \u21a9    Decred Forum,  Post 11,507 \u00a0 \u21a9    Decred Forum,  Post 14,995 \u00a0 \u21a9",
            "title": " Sources"
        },
        {
            "location": "/faq/web-client/",
            "text": "Web Client\n\u00b6\n\n\n\n\n1. How secure is the web client?\n\u00b6\n\n\nThe web client is a fork of \nCopay\n, so it is as secure as that\n1\n. The seed (and hence private keys) are kept and computed locally in your browser\u2019s local storage and everything is run client-side. The server never has access to any of the private data needed to spend coins.\n\n\n\n\n2. Can you solo stake mine with the web client?\n\u00b6\n\n\nNo, recall that the browser wallet runs locally on your machine. That would not lend itself well to running 24/7. As a result, the browser wallet will never be able to solo stake\n2\n. It would however be possible to support stake pooling with it. Stake pools provide you with the ability to not have a wallet running 24/7 since it will be the pool\u2019s responsibility to be online and cast a vote on your behalf at that point.\n\n\n\n\n3. Is it safe to delete the wallet and start over?\n\u00b6\n\n\nIt is safe\n3\n. The only difference is you will need to go to \nImport Wallet\n this time instead of creating a new one.\n\n\n\n\n Sources\n\u00b6\n\n\n\n\n\n\n\n\n\n\nDecred Forum, \nPost 7,981\n\u00a0\n\u21a9\n\n\n\n\n\n\nDecred Forum, \nPost 9,093\n\u00a0\n\u21a9\n\n\n\n\n\n\nDecred Forum, \nPost 10,652\n\u00a0\n\u21a9",
            "title": "Web Client"
        },
        {
            "location": "/faq/web-client/#web-client",
            "text": "",
            "title": " Web Client"
        },
        {
            "location": "/faq/web-client/#1-how-secure-is-the-web-client",
            "text": "The web client is a fork of  Copay , so it is as secure as that 1 . The seed (and hence private keys) are kept and computed locally in your browser\u2019s local storage and everything is run client-side. The server never has access to any of the private data needed to spend coins.",
            "title": "1. How secure is the web client?"
        },
        {
            "location": "/faq/web-client/#2-can-you-solo-stake-mine-with-the-web-client",
            "text": "No, recall that the browser wallet runs locally on your machine. That would not lend itself well to running 24/7. As a result, the browser wallet will never be able to solo stake 2 . It would however be possible to support stake pooling with it. Stake pools provide you with the ability to not have a wallet running 24/7 since it will be the pool\u2019s responsibility to be online and cast a vote on your behalf at that point.",
            "title": "2. Can you solo stake mine with the web client?"
        },
        {
            "location": "/faq/web-client/#3-is-it-safe-to-delete-the-wallet-and-start-over",
            "text": "It is safe 3 . The only difference is you will need to go to  Import Wallet  this time instead of creating a new one.",
            "title": "3. Is it safe to delete the wallet and start over?"
        },
        {
            "location": "/faq/web-client/#sources",
            "text": "Decred Forum,  Post 7,981 \u00a0 \u21a9    Decred Forum,  Post 9,093 \u00a0 \u21a9    Decred Forum,  Post 10,652 \u00a0 \u21a9",
            "title": " Sources"
        },
        {
            "location": "/faq/blocks/",
            "text": "Blocks\n\u00b6\n\n\n\n\n1. Can a block become orphaned after being confirmed multiple times?\n\u00b6\n\n\nOnly if there is a reorg that is sufficiently long\n1\n. In order for that to happen, you need more hash power working on the other side of a fork than the hash power that is working on the current best chain.\n\n\n\n\n2. Can we remove the testnet block explorer given that one for mainnet is available?\n\u00b6\n\n\nTestnet will continue to be a testing ground for new features, so it makes sense to keep the testnet block explorer\n2\n up.\n\n\n\n\n3. What do \u201c[INF] CHAN: Adding orphan block\u201d messages mean?\n\u00b6\n\n\nIt just means a block that you do not have the parent for was received\n3\n. It pretty much always happens when restarting \nhcd\n due to the way the sync works. You are still syncing up to the latest block, but the remote peer, that is ahead of you, sent a notification that a new block showed up, one for which you do not have the parent yet.\n\n\nRather than ignoring it, once you are sufficiently close to being synced, it essentially saves them for later so once you do have the parent blocks those newer blocks automatically get connected.\n\n\n\n\n4. Should I download the blockchain again with every new software release?\n\u00b6\n\n\nYou should almost never have to download the chain again\n4\n on an upgrade unless it is just a super massive change where it makes sense to start over. Typically though, it should migrate things so it just works.\n\n\n\n\n5. What is the genesis block number?\n\u00b6\n\n\nThe genesis block\n5\n is block height 0 (block number 0). Every block after that increases by 1.\n\n\n\n\n6. What do \u201c[INF] CHAN: FORK: Block 000\u2026\u201d messages mean?\n\u00b6\n\n\nHere is an example message:\n\n\n[INF] CHAN: FORK: Block 0000000000001aedcf1b82b087a1d05ef787550174da1012e473e8ee8c178937 (height 17879) forks the chain at height 17878/block 000000000000150f863186cab6ef5c433bcc155d2f683394f8e65cb037f80b16, but does not cause a reorganize\n\n\n\n\nIt means two miners found a solution to a block around the same time and both submitted their solved blocks to the network\n6\n. Both are equally valid, however your node saw the other solution (\n000000000000147d33cde5e9823122924fb43405418712720eb6457956d8edbb\n) first, so from your node\u2019s point of view, the new block (\n0000000000001aedcf1b82b087a1d05ef787550174da1012e473e8ee8c178937\n) was on a side chain.\n\n\nSince it takes blocks time to relay, other nodes might have seen 0000000000001aedcf1b82b087a1d05ef787550174da1012e473e8ee8c178937 first which means to them the other solution that your node saw first (\n000000000000147d33cde5e9823122924fb43405418712720eb6457956d8edbb\n) was the one on the side chain.\n\n\nThis is totally normal and resolves itself whenever the next block is found since it will now define the longest chain and whichever solution was not built on will be orphaned.\n\n\nIn this case, block #17880 (\n000000000000154c6091747245e3c2620447c71b346aed09548e74b4543d0d66\n) ended up building on top of 000000000000147d33cde5e9823122924fb43405418712720eb6457956d8edbb, so the other solution (\n0000000000001aedcf1b82b087a1d05ef787550174da1012e473e8ee8c178937\n) was orphaned.\n\n\n\n\n Sources\n\u00b6\n\n\n\n\n\n\n\n\n\n\nDecred Forum, \nPost 8,918\n\u00a0\n\u21a9\n\n\n\n\n\n\nDecred Forum, \nPost 9,621\n\u00a0\n\u21a9\n\n\n\n\n\n\nDecred Forum, \nPost 14,660\n\u00a0\n\u21a9\n\n\n\n\n\n\nDecred Forum, \nPost 14,788\n\u00a0\n\u21a9\n\n\n\n\n\n\nDecred Forum, \nPost 16,987\n\u00a0\n\u21a9\n\n\n\n\n\n\nDecred Forum, \nPost 17,791\n\u00a0\n\u21a9",
            "title": "Blocks"
        },
        {
            "location": "/faq/blocks/#blocks",
            "text": "",
            "title": " Blocks"
        },
        {
            "location": "/faq/blocks/#1-can-a-block-become-orphaned-after-being-confirmed-multiple-times",
            "text": "Only if there is a reorg that is sufficiently long 1 . In order for that to happen, you need more hash power working on the other side of a fork than the hash power that is working on the current best chain.",
            "title": "1. Can a block become orphaned after being confirmed multiple times?"
        },
        {
            "location": "/faq/blocks/#2-can-we-remove-the-testnet-block-explorer-given-that-one-for-mainnet-is-available",
            "text": "Testnet will continue to be a testing ground for new features, so it makes sense to keep the testnet block explorer 2  up.",
            "title": "2. Can we remove the testnet block explorer given that one for mainnet is available?"
        },
        {
            "location": "/faq/blocks/#3-what-do-inf-chan-adding-orphan-block-messages-mean",
            "text": "It just means a block that you do not have the parent for was received 3 . It pretty much always happens when restarting  hcd  due to the way the sync works. You are still syncing up to the latest block, but the remote peer, that is ahead of you, sent a notification that a new block showed up, one for which you do not have the parent yet.  Rather than ignoring it, once you are sufficiently close to being synced, it essentially saves them for later so once you do have the parent blocks those newer blocks automatically get connected.",
            "title": "3. What do \"[INF] CHAN: Adding orphan block\" messages mean?"
        },
        {
            "location": "/faq/blocks/#4-should-i-download-the-blockchain-again-with-every-new-software-release",
            "text": "You should almost never have to download the chain again 4  on an upgrade unless it is just a super massive change where it makes sense to start over. Typically though, it should migrate things so it just works.",
            "title": "4. Should I download the blockchain again with every new software release?"
        },
        {
            "location": "/faq/blocks/#5-what-is-the-genesis-block-number",
            "text": "The genesis block 5  is block height 0 (block number 0). Every block after that increases by 1.",
            "title": "5. What is the genesis block number?"
        },
        {
            "location": "/faq/blocks/#6-what-do-inf-chan-fork-block-000-messages-mean",
            "text": "Here is an example message:  [INF] CHAN: FORK: Block 0000000000001aedcf1b82b087a1d05ef787550174da1012e473e8ee8c178937 (height 17879) forks the chain at height 17878/block 000000000000150f863186cab6ef5c433bcc155d2f683394f8e65cb037f80b16, but does not cause a reorganize  It means two miners found a solution to a block around the same time and both submitted their solved blocks to the network 6 . Both are equally valid, however your node saw the other solution ( 000000000000147d33cde5e9823122924fb43405418712720eb6457956d8edbb ) first, so from your node\u2019s point of view, the new block ( 0000000000001aedcf1b82b087a1d05ef787550174da1012e473e8ee8c178937 ) was on a side chain.  Since it takes blocks time to relay, other nodes might have seen 0000000000001aedcf1b82b087a1d05ef787550174da1012e473e8ee8c178937 first which means to them the other solution that your node saw first ( 000000000000147d33cde5e9823122924fb43405418712720eb6457956d8edbb ) was the one on the side chain.  This is totally normal and resolves itself whenever the next block is found since it will now define the longest chain and whichever solution was not built on will be orphaned.  In this case, block #17880 ( 000000000000154c6091747245e3c2620447c71b346aed09548e74b4543d0d66 ) ended up building on top of 000000000000147d33cde5e9823122924fb43405418712720eb6457956d8edbb, so the other solution ( 0000000000001aedcf1b82b087a1d05ef787550174da1012e473e8ee8c178937 ) was orphaned.",
            "title": "6. What do \"[INF] CHAN: FORK: Block 000...\" messages mean?"
        },
        {
            "location": "/faq/blocks/#sources",
            "text": "Decred Forum,  Post 8,918 \u00a0 \u21a9    Decred Forum,  Post 9,621 \u00a0 \u21a9    Decred Forum,  Post 14,660 \u00a0 \u21a9    Decred Forum,  Post 14,788 \u00a0 \u21a9    Decred Forum,  Post 16,987 \u00a0 \u21a9    Decred Forum,  Post 17,791 \u00a0 \u21a9",
            "title": " Sources"
        },
        {
            "location": "/faq/errors/",
            "text": "Common Errors and Solutions\n\u00b6\n\n\nProof-of-Stake\n\u00b6\n\n\n1. Some of my missed/expired tickets are still locked after more than a day.\n\u00b6\n\n\n\n\nDecrediton\n\n\n\n\n\n\n\n\nDelete the wallet and restore from seed\n\n\n\n\n\n\nOpen Tickets view, click import script button, paste the stakepool script into the textbox, enter the private passphrase and click Save.\n\n\n\n\n\n\nWait until the rescan completes.\n\n\n\n\n\n\n\n\nCommand Line\n\n\n\n\n\n\n\n\nStart the wallet process with the \n--enablevoting\n flag. It will not issue revocations without it.\n\n\n\n\n\n\nUnlock the wallet with \nhcctl --wallet walletpassphrase <yourpassphrase> 0\n. The wallet must be unlocked for it to be able to create the revocations and sign them.\n\n\n\n\n\n\nInstruct hcd to notify the wallet about missed tickets again so it will issue the revocations with \nhcctl rebroadcastmissed\n.\n\n\n\n\n\n\nAt that point, you should see some details about the revocation transactions in the wallet log.\nOnce those revocation transactions are mined into a block (which should be the next block),\nyou will see the funds move to the immaturestakegeneration category in the \nhcctl --wallet\n\ngetbalance output. Finally, after 256 blocks, they will move to the spendable category and thus be available to spend.",
            "title": "Common Errors and Solutions"
        },
        {
            "location": "/faq/errors/#common-errors-and-solutions",
            "text": "",
            "title": " Common Errors and Solutions"
        },
        {
            "location": "/faq/errors/#proof-of-stake",
            "text": "",
            "title": "Proof-of-Stake"
        },
        {
            "location": "/faq/errors/#1-some-of-my-missedexpired-tickets-are-still-locked-after-more-than-a-day",
            "text": "Decrediton     Delete the wallet and restore from seed    Open Tickets view, click import script button, paste the stakepool script into the textbox, enter the private passphrase and click Save.    Wait until the rescan completes.     Command Line     Start the wallet process with the  --enablevoting  flag. It will not issue revocations without it.    Unlock the wallet with  hcctl --wallet walletpassphrase <yourpassphrase> 0 . The wallet must be unlocked for it to be able to create the revocations and sign them.    Instruct hcd to notify the wallet about missed tickets again so it will issue the revocations with  hcctl rebroadcastmissed .    At that point, you should see some details about the revocation transactions in the wallet log.\nOnce those revocation transactions are mined into a block (which should be the next block),\nyou will see the funds move to the immaturestakegeneration category in the  hcctl --wallet \ngetbalance output. Finally, after 256 blocks, they will move to the spendable category and thus be available to spend.",
            "title": "1. Some of my missed/expired tickets are still locked after more than a day."
        },
        {
            "location": "/advanced/manual-cli-install/",
            "text": "Manual CLI Installation\n\u00b6\n\n\nLast updated for v1.2.0.\n\n\n\n\nThe newest binary releases can be found \nhere\n. With the exception of the \n.exe\n and \n.dmg\n files, they are archives of the latest executable binaries for each release. Although most of this will be extract and go, instructions are provided for \nWindows\n, \nmacOS\n, and \nLinux\n below (assumed proficiency for FreeBSD users).\n\n\nWindows\n\u00b6\n\n\n\n\nNote\n\n\nWindows 7/8/10 provides native support for \n.zip\n files, therefore it is preferable to use the \n.zip\n file. If you decide to download the \n.tar.gz\n file, it will require two separate extractions in some third-party application (7-Zip, WinRAR, etc.) to get to the actual binaries. Instructions are provided for the \n.zip\n file.\n\n\n\n\n\n\n\n\nDownload the correct file for your computer:\n\n\n\n\n\n\n\n\nArchitecture\n\n\nFilename\n\n\n\n\n\n\n\n\n\n\n32-bit\n\n\ndecred-windows-386-v1.2.0.zip\n\n\n\n\n\n\n64-bit\n\n\ndecred-windows-amd64-v1.2.0.zip\n\n\n\n\n\n\n\n\n\n\n\n\nNavigate to download location and extract the \n.zip\n file:\n\n\nRight click on the \n.zip\n file, select \u201cExtract All\u2026\u201d and a prompt should open asking for the directory to use. The default will extract the \n.zip\n to a folder with the same name. It should include \nhcctl\n, \nhcd\n, \nhcwallet\n, \nsample-hcctl.conf\n, \nsample-hcd.conf\n, and \nsample-hcwallet.conf\n.\n\n\n\n\n\n\nmacOS\n\u00b6\n\n\n\n\n\n\nDownload the correct file for your computer:\n\n\n\n\n\n\n\n\nArchitecture\n\n\nFilename\n\n\n\n\n\n\n\n\n\n\n64-bit\n\n\ndecred-darwin-amd64-v1.2.0.tar.gz\n\n\n\n\n\n\n\n\n\n\n\n\nNavigate to download location and extract the \n.tar.gz\n file:\n\n\nFinder:\n simply double click on the \n.tar.gz\n file.\n\n\nTerminal:\n use the \ntar -xvzf filename.tar.gz\n command.\n\n\nBoth of these should extract the \n.tar.gz\n file into a folder that shares the same name. (e.g. \ntar -xvzf decred-darwin-amd64-v1.2.0.tar.gz\n should extract to \ndecred-darwin-amd64-v1.2.0\n). It should include \nhcctl\n, \nhcd\n, \nhcwallet\n, \nsample-hcctl.conf\n, \nsample-hcd.conf\n, and \nsample-hcwallet.conf\n.\n\n\n\n\n\n\n\n\nNote\n\n\nIf you are using Safari on macOS Sierra and have the \u2018Open \u201csafe\u201d files after downloading\u2019 preference enabled, \n.gz\n and \n.zip\n files are automatically extracted after download. The \ntar -xvzf filename.tar.gz\n command results in this error: \ntar: Error opening archive: Failed to open 'filename.tar.gz'\n. Use \ntar -xvzf filename.tar\n instead (remove the \n.gz\n from the previous command).\n\n\n\n\nLinux\n\u00b6\n\n\n\n\n\n\nDownload the correct file for your computer:\n\n\n\n\n\n\n\n\nArchitecture\n\n\nFilename\n\n\n\n\n\n\n\n\n\n\n32-bit\n\n\ndecred-linux-386-v1.2.0.tar.gz\n\n\n\n\n\n\n64-bit\n\n\ndecred-linux-amd64-v1.2.0.tar.gz\n\n\n\n\n\n\n32-bit ARM\n\n\ndecred-linux-arm-v1.2.0.tar.gz\n\n\n\n\n\n\n64-bit ARM\n\n\ndecred-linux-arm64-v1.2.0.tar.gz\n\n\n\n\n\n\n\n\n\n\n\n\nNavigate to download location and extract the \n.tar.gz\n file:\n\n\nUbuntu File Browser:\n simply right click on the \n.tar.gz\n file and select \u201cExtract Here\u201d.\n\n\nTerminal:\n use the \ntar -xvzf filename.tar.gz\n command.\n\n\nBoth of these should extract the \n.tar.gz\n file into a folder that shares the same name. (e.g. \ntar -xvzf decred-linux-amd64-v1.2.0.tar.gz\n should extract to \ndecred-linux-amd64-v1.2.0\n). It should include \nhcctl\n, \nhcd\n, \nhcwallet\n, \nsample-hcctl.conf\n, \nsample-hcd.conf\n, and \nsample-hcwallet.conf\n.\n\n\n\n\n\n\n\n\nMinimum Configuration\n\u00b6\n\n\nAt the very minimum, for \nhcd\n, \nhcwallet\n, and \nhcctl\n to be able to communicate with each other, they need to be launched with the same \nrpcuser\n/\nrpcpass\n combination. For manual configuration please follow these steps:\n\n\n\n\n\n\nIf the OS-specific home directories listed in \nConfiguration File Locations\n do not exist, please create them for \nhcd\n, \nhcwallet\n, and \nhcctl\n.\n\n\n\n\n\n\nChoose an arbitrary username and password, these will only be used for each application to communicate via remote procedure call. The easiest configuration is to set them all equal.\n\n\n\n\n\n\nUsing your favorite text editor, create a new text file and add the following lines:\n\n\n[Application Options]\nrpcuser=<chosen-username>\nrpcpass=<chosen-password>\n\n\n\nSave it as \nhcd.conf\n in \nhcd\n\u2018s home directory.\n\n\n\n\n\n\nCreate another new text file and add the following lines:\n\n\n[Application Options]\nusername=<chosen-username>\npassword=<chosen-password>\n\n\n\nSave it as \nhcwallet.conf\n in \nhcwallet\n\u2018s home directory.\n\n\n\n\n\n\nCreate a third text file and add the following lines:\n\n\n[Application Options]\nrpcuser=<chosen-username>\nrpcpass=<chosen-password>\n\n\n\nSave it as \nhcctl.conf\n in \nhcctl\n\u2018s home directory.\n\n\n\n\n\n\nPlease see the \nsample config\n for more customization options.",
            "title": "Manual CLI Installation"
        },
        {
            "location": "/advanced/manual-cli-install/#manual-cli-installation",
            "text": "Last updated for v1.2.0.   The newest binary releases can be found  here . With the exception of the  .exe  and  .dmg  files, they are archives of the latest executable binaries for each release. Although most of this will be extract and go, instructions are provided for  Windows ,  macOS , and  Linux  below (assumed proficiency for FreeBSD users).",
            "title": " Manual CLI Installation"
        },
        {
            "location": "/advanced/manual-cli-install/#windows",
            "text": "Note  Windows 7/8/10 provides native support for  .zip  files, therefore it is preferable to use the  .zip  file. If you decide to download the  .tar.gz  file, it will require two separate extractions in some third-party application (7-Zip, WinRAR, etc.) to get to the actual binaries. Instructions are provided for the  .zip  file.     Download the correct file for your computer:     Architecture  Filename      32-bit  decred-windows-386-v1.2.0.zip    64-bit  decred-windows-amd64-v1.2.0.zip       Navigate to download location and extract the  .zip  file:  Right click on the  .zip  file, select \u201cExtract All\u2026\u201d and a prompt should open asking for the directory to use. The default will extract the  .zip  to a folder with the same name. It should include  hcctl ,  hcd ,  hcwallet ,  sample-hcctl.conf ,  sample-hcd.conf , and  sample-hcwallet.conf .",
            "title": "Windows"
        },
        {
            "location": "/advanced/manual-cli-install/#macos",
            "text": "Download the correct file for your computer:     Architecture  Filename      64-bit  decred-darwin-amd64-v1.2.0.tar.gz       Navigate to download location and extract the  .tar.gz  file:  Finder:  simply double click on the  .tar.gz  file.  Terminal:  use the  tar -xvzf filename.tar.gz  command.  Both of these should extract the  .tar.gz  file into a folder that shares the same name. (e.g.  tar -xvzf decred-darwin-amd64-v1.2.0.tar.gz  should extract to  decred-darwin-amd64-v1.2.0 ). It should include  hcctl ,  hcd ,  hcwallet ,  sample-hcctl.conf ,  sample-hcd.conf , and  sample-hcwallet.conf .     Note  If you are using Safari on macOS Sierra and have the \u2018Open \u201csafe\u201d files after downloading\u2019 preference enabled,  .gz  and  .zip  files are automatically extracted after download. The  tar -xvzf filename.tar.gz  command results in this error:  tar: Error opening archive: Failed to open 'filename.tar.gz' . Use  tar -xvzf filename.tar  instead (remove the  .gz  from the previous command).",
            "title": "macOS"
        },
        {
            "location": "/advanced/manual-cli-install/#linux",
            "text": "Download the correct file for your computer:     Architecture  Filename      32-bit  decred-linux-386-v1.2.0.tar.gz    64-bit  decred-linux-amd64-v1.2.0.tar.gz    32-bit ARM  decred-linux-arm-v1.2.0.tar.gz    64-bit ARM  decred-linux-arm64-v1.2.0.tar.gz       Navigate to download location and extract the  .tar.gz  file:  Ubuntu File Browser:  simply right click on the  .tar.gz  file and select \u201cExtract Here\u201d.  Terminal:  use the  tar -xvzf filename.tar.gz  command.  Both of these should extract the  .tar.gz  file into a folder that shares the same name. (e.g.  tar -xvzf decred-linux-amd64-v1.2.0.tar.gz  should extract to  decred-linux-amd64-v1.2.0 ). It should include  hcctl ,  hcd ,  hcwallet ,  sample-hcctl.conf ,  sample-hcd.conf , and  sample-hcwallet.conf .",
            "title": "Linux"
        },
        {
            "location": "/advanced/manual-cli-install/#minimum-configuration",
            "text": "At the very minimum, for  hcd ,  hcwallet , and  hcctl  to be able to communicate with each other, they need to be launched with the same  rpcuser / rpcpass  combination. For manual configuration please follow these steps:    If the OS-specific home directories listed in  Configuration File Locations  do not exist, please create them for  hcd ,  hcwallet , and  hcctl .    Choose an arbitrary username and password, these will only be used for each application to communicate via remote procedure call. The easiest configuration is to set them all equal.    Using your favorite text editor, create a new text file and add the following lines:  [Application Options]\nrpcuser=<chosen-username>\nrpcpass=<chosen-password>  Save it as  hcd.conf  in  hcd \u2018s home directory.    Create another new text file and add the following lines:  [Application Options]\nusername=<chosen-username>\npassword=<chosen-password>  Save it as  hcwallet.conf  in  hcwallet \u2018s home directory.    Create a third text file and add the following lines:  [Application Options]\nrpcuser=<chosen-username>\nrpcpass=<chosen-password>  Save it as  hcctl.conf  in  hcctl \u2018s home directory.    Please see the  sample config  for more customization options.",
            "title": "Minimum Configuration"
        },
        {
            "location": "/advanced/storing-login-details/",
            "text": "# \n Storing Login Details\n\n\nAll parameters that are specified on the command line while starting hcd,\nhcwallet and hcctl can also be kept in configuration files. This is\na good way of storing your login credentials so that you do not need\nto include them in scripts or type them into the terminal all the\ntime.\n\n\n\n\nConfiguration File Basics\n\u00b6\n\n\nIf unfamiliar with the basics of configuration files, please review the information found in our \nStartup Options Intro\n page.\n\n\n\n\nhcd.conf\n\u00b6\n\n\nChoose any username and password you want in the following steps. You do not need to register these\nanywhere and they will only be used to allow \nhcwallet\n and \nhcctl\n to communicate with \nhcd\n.\n\n\n\n\nUsing the Sample Config File\n\n\n\n\nPlease follow the steps below if you\u2019ve already copied the sample configuration files into their appropriate directories.\n\n\n\n\nNavigate to your \nhcd\n application folder as described in our \nStartup Options Intro\n. \n\n\nOpen \nhcd.conf\n in a text editor.\n\n\n\n\nFind the following lines:\n\n\n;rpcuser=\n \n\n\n;rpcpass=\n\n\n\n\n\n\nUncomment the lines by removing the semi-colon and add your chosen username and password to the appropriate lines.\n\n\n\n\n\n\n\n\nCreating a New Config File\n\n\n\n\nPlease follow the steps below if you have \nnot\n copied the sample configuration files into their appropriate directories.\n\n\n\n\nNavigate to your \nhcd\n application folder as described above in our \nStartup Options Intro\n.\n\n\nCreate a new text file.\n\n\nRename it \nhcd.conf\n.\n\n\nOpen \nhcd.conf\n in a text editor.\n\n\nAdd the following lines:\n\n\n\n\n[Application Options]\n\nrpcuser=<username>\nrpcpass=<password>\n\n\n\n\n\n\nhcwallet.conf\n\u00b6\n\n\nThe procedure for \nhcwallet.conf\n is very similar to the procedure for \nhcd.conf\n. \n\n\nPlease note that if the values of \nusername=\n and \npassword=\n in \nhcwallet.conf\n do not match the values of \nrpcuser=\n and \nrpcpass=\n in  \nhcd.conf\n, you will need to set \nhcdusername=\n and \nhcdpassword=\n  in \nhcwallet.conf\n to the \nrpcuser\n/\nrpcpass\n values found in \nhcd.conf\n (it is easiest to set all of the username/passwords the same).\n\n\n\n\nUsing the Sample Config File\n\n\n\n\nPlease follow the steps below if you\u2019ve already copied the sample configuration files into their appropriate directories.\n\n\n\n\nNavigate to your \nhcwallet\n application folder as described in our \nStartup Options Intro\n. \n\n\nOpen \nhcwallet.conf\n in a text editor.\n\n\n\n\nFind the following lines:\n\n\n;username=\n \n\n\n;password=\n\n\n\n\n\n\nUncomment the lines by removing the semi-colon and add your chosen username and password to the appropriate lines.\n\n\n\n\n\n\n\n\nCreating a New Config File\n\n\n\n\nPlease follow the steps below if you have \nnot\n copied the sample configuration files into their appropriate directories.\n\n\n\n\nNavigate to your \nhcwallet\n application folder as described in our \nStartup Options Intro\n.\n\n\nCreate a new text file.\n\n\nRename it \nhcwallet.conf\n.\n\n\nOpen \nhcwallet.conf\n in a text editor.\n\n\nAdd the following lines:\n\n\n\n\n[Application Options]\n\nusername=<username>\npassword=<password>\n\n\n\n\nIf you set the optional public password for the wallet (the second password\nduring the wallet creation) you can also add that to \nhcwallet.conf\n:\n\n\nwalletpass=<yourwalletpassword>\n\n\n\n\nYou cannot specify your private wallet passphrase in the config files. That must be entered manually with \nhcctl\n. \n\n\n\n\nhcctl.conf\n\u00b6\n\n\nIt is again easiest to set the username/passwords the same amongst \nhcd.conf\n, \nhcwallet.conf\n, and \nhcctl.conf\n. If you used different credentials for hcwallet you will need to specify one here and the other on the command line when issuing commands.\n\n\n\n\nUsing the Sample Config File\n\n\n\n\nPlease follow the steps below if you\u2019ve already copied the sample configuration files into their appropriate directories.\n\n\n\n\nNavigate to your \nhcctl\n application folder as described in our \nStartup Options Intro\n. \n\n\nOpen \nhcctl.conf\n in a text editor.\n\n\n\n\nFind the following lines:\n\n\n;rpcuser=\n \n\n\n;rpcpass=\n\n\n\n\n\n\nUncomment the lines by removing the semi-colon and add your chosen username and password to the appropriate lines.\n\n\n\n\n\n\n\n\nCreating a New Config File\n\n\n\n\nPlease follow the steps below if you have \nnot\n copied the sample configuration files into their appropriate directories.\n\n\n\n\nNavigate to your \nhcctl\n application folder as described in our \nStartup Options Intro\n.\n\n\nCreate a new text file.\n\n\nRename it \nhcctl.conf\n.\n\n\nOpen \nhcctl.conf\n in a text editor.\n\n\nAdd the following lines:\n\n\n\n\n[Application Options]\n\nrpcuser=<username>\nrpcpass=<password>\n\n\n\n\n\n\nAdditional Configuration Options\n\u00b6\n\n\nAll command line options can be put in the config file.\nThe sample config files in the release package give additional\noptions or you can run one of the programs with the \n-h\n flag to show a list and description of all options for the specified application.\n\n\nThere is also a full list of options for each application which can be found \nhere\n.",
            "title": "Storing Login Details"
        },
        {
            "location": "/advanced/storing-login-details/#configuration-file-basics",
            "text": "If unfamiliar with the basics of configuration files, please review the information found in our  Startup Options Intro  page.",
            "title": "Configuration File Basics"
        },
        {
            "location": "/advanced/storing-login-details/#hcdconf",
            "text": "Choose any username and password you want in the following steps. You do not need to register these\nanywhere and they will only be used to allow  hcwallet  and  hcctl  to communicate with  hcd .   Using the Sample Config File   Please follow the steps below if you\u2019ve already copied the sample configuration files into their appropriate directories.   Navigate to your  hcd  application folder as described in our  Startup Options Intro .   Open  hcd.conf  in a text editor.   Find the following lines:  ;rpcuser=    ;rpcpass=    Uncomment the lines by removing the semi-colon and add your chosen username and password to the appropriate lines.     Creating a New Config File   Please follow the steps below if you have  not  copied the sample configuration files into their appropriate directories.   Navigate to your  hcd  application folder as described above in our  Startup Options Intro .  Create a new text file.  Rename it  hcd.conf .  Open  hcd.conf  in a text editor.  Add the following lines:   [Application Options]\n\nrpcuser=<username>\nrpcpass=<password>",
            "title": "hcd.conf"
        },
        {
            "location": "/advanced/storing-login-details/#hcwalletconf",
            "text": "The procedure for  hcwallet.conf  is very similar to the procedure for  hcd.conf .   Please note that if the values of  username=  and  password=  in  hcwallet.conf  do not match the values of  rpcuser=  and  rpcpass=  in   hcd.conf , you will need to set  hcdusername=  and  hcdpassword=   in  hcwallet.conf  to the  rpcuser / rpcpass  values found in  hcd.conf  (it is easiest to set all of the username/passwords the same).   Using the Sample Config File   Please follow the steps below if you\u2019ve already copied the sample configuration files into their appropriate directories.   Navigate to your  hcwallet  application folder as described in our  Startup Options Intro .   Open  hcwallet.conf  in a text editor.   Find the following lines:  ;username=    ;password=    Uncomment the lines by removing the semi-colon and add your chosen username and password to the appropriate lines.     Creating a New Config File   Please follow the steps below if you have  not  copied the sample configuration files into their appropriate directories.   Navigate to your  hcwallet  application folder as described in our  Startup Options Intro .  Create a new text file.  Rename it  hcwallet.conf .  Open  hcwallet.conf  in a text editor.  Add the following lines:   [Application Options]\n\nusername=<username>\npassword=<password>  If you set the optional public password for the wallet (the second password\nduring the wallet creation) you can also add that to  hcwallet.conf :  walletpass=<yourwalletpassword>  You cannot specify your private wallet passphrase in the config files. That must be entered manually with  hcctl .",
            "title": "hcwallet.conf"
        },
        {
            "location": "/advanced/storing-login-details/#hcctlconf",
            "text": "It is again easiest to set the username/passwords the same amongst  hcd.conf ,  hcwallet.conf , and  hcctl.conf . If you used different credentials for hcwallet you will need to specify one here and the other on the command line when issuing commands.   Using the Sample Config File   Please follow the steps below if you\u2019ve already copied the sample configuration files into their appropriate directories.   Navigate to your  hcctl  application folder as described in our  Startup Options Intro .   Open  hcctl.conf  in a text editor.   Find the following lines:  ;rpcuser=    ;rpcpass=    Uncomment the lines by removing the semi-colon and add your chosen username and password to the appropriate lines.     Creating a New Config File   Please follow the steps below if you have  not  copied the sample configuration files into their appropriate directories.   Navigate to your  hcctl  application folder as described in our  Startup Options Intro .  Create a new text file.  Rename it  hcctl.conf .  Open  hcctl.conf  in a text editor.  Add the following lines:   [Application Options]\n\nrpcuser=<username>\nrpcpass=<password>",
            "title": "hcctl.conf"
        },
        {
            "location": "/advanced/storing-login-details/#additional-configuration-options",
            "text": "All command line options can be put in the config file.\nThe sample config files in the release package give additional\noptions or you can run one of the programs with the  -h  flag to show a list and description of all options for the specified application.  There is also a full list of options for each application which can be found  here .",
            "title": "Additional Configuration Options"
        },
        {
            "location": "/advanced/program-options/",
            "text": "Program Options\n\u00b6\n\n\n\n\nThe default options are sane for most users, although you may need to\nset your credentials. This means \nhcd\n will\nwork \u2018out of the box\u2019 for most users. However, there are also a wide\nvariety of flags that can be used to control its behavior. The following section\nprovides a usage overview which enumerates the flags. An interesting\npoint to note is that the long form of all of these options (except\n\n-C\n) can be specified in a configuration file that is automatically\nparsed when hcd starts up.\nThe \n-C\n (\n--configfile\n)\nflag, as shown below, can be used to override the default location.\nYou can always get a list of all options by using the \n-h\n flag.\n\n\n\n\nUsage\n\u00b6\n\n\nhcd [OPTIONS]\n\n\n\n\n\n\nApplication options\n\u00b6\n\n\n\n\n\n\n\n\nOption\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\n-A\n or \n--appdata=\n\n\nPath to hcd home directory ($HOME/.hcd)\n\n\n\n\n\n\n-V\n or \n--version\n\n\nDisplay version information and exit\n\n\n\n\n\n\n-C\n or \n--configfile=\n\n\nPath to configuration file\n\n\n\n\n\n\n-b\n or \n--datadir=\n\n\nDirectory to store data\n\n\n\n\n\n\n--logdir=\n\n\nDirectory to log output. ($HOME/.hcd/logs)\n\n\n\n\n\n\n-a\n or \n--addpeer=\n\n\nAdd a peer to connect with at startup\n\n\n\n\n\n\n--connect=\n\n\nConnect only to the specified peers at startup\n\n\n\n\n\n\n--nolisten\n\n\nDisable listening for incoming connections \u2013 NOTE: Listening is automatically disabled if the \n--connect\n or \n--proxy\n options are used without also specifying listen interfaces via \n--listen\n\n\n\n\n\n\n--listen=\n\n\nAdd an interface/port to listen for connections (default all interfaces port: \n9108\n, testnet: \n19108\n)\n\n\n\n\n\n\n--maxpeers=\n\n\nMax number of inbound and outbound peers (125)\n\n\n\n\n\n\n--nobanning\n\n\nDisable banning of misbehaving peers\n\n\n\n\n\n\n--banduration=\n\n\nHow long to ban misbehaving peers. Valid time units are {s, m, h}.  Minimum 1 second (24h0m0s)\n\n\n\n\n\n\n--banthreshold\n\n\nMaximum allowed ban score before disconnecting banning misbehaving peers. (default: 100)\n\n\n\n\n\n\n--whitelist=\n\n\nAdd an IP network or IP that will not be banned. (eg. 192.168.1.0/24 or ::1)\n\n\n\n\n\n\n-u\n or \n--rpcuser=\n\n\nUsername for RPC connections\n\n\n\n\n\n\n-P\n or \n--rpcpass=\n\n\nPassword for RPC connections\n\n\n\n\n\n\n--rpclimituser=\n\n\nUsername for limited RPC connections\n\n\n\n\n\n\n--rpclimitpass=\n\n\nPassword for limited RPC connections\n\n\n\n\n\n\n--rpclisten=\n\n\nAdd an interface/port to listen for RPC connections (default port: \n8334\n, testnet: \n18334\n)\n\n\n\n\n\n\n--rpccert=\n\n\nFile containing the certificate file\n\n\n\n\n\n\n--rpckey=\n\n\nFile containing the certificate key\n\n\n\n\n\n\n--rpcmaxclients=\n\n\nMax number of RPC clients for standard connections (10)\n\n\n\n\n\n\n--rpcmaxwebsockets=\n\n\nMax number of RPC clients for standard connections (25)\n\n\n\n\n\n\n--norpc\n\n\nDisable built-in RPC server \u2013 NOTE: The RPC server is disabled by default if no \nrpcuser\n/\nrpcpass\n is specified\n\n\n\n\n\n\n--notls\n\n\nDisable TLS for the RPC server \u2013 NOTE: This is only allowed if the RPC server is bound to localhost\n\n\n\n\n\n\n--nodnsseed\n\n\nDisable DNS seeding for peers\n\n\n\n\n\n\n--externalip=\n\n\nAdd an ip to the list of local addresses we claim to listen on to peers\n\n\n\n\n\n\n--proxy=\n\n\nConnect via SOCKS5 proxy (eg. 127.0.0.1:9050)\n\n\n\n\n\n\n--proxyuser=\n\n\nUsername for proxy server\n\n\n\n\n\n\n--proxypass=\n\n\nPassword for proxy server\n\n\n\n\n\n\n--onion=\n\n\nConnect to tor hidden services via SOCKS5 proxy (eg. 127.0.0.1:9050)\n\n\n\n\n\n\n--onionuser=\n\n\nUsername for onion proxy server\n\n\n\n\n\n\n--onionpass=\n\n\nPassword for onion proxy server\n\n\n\n\n\n\n--noonion=\n\n\nDisable connecting to tor hidden services\n\n\n\n\n\n\n--torisolation\n\n\nEnable Tor stream isolation by randomizing user credentials for each connection\n\n\n\n\n\n\n--testnet\n\n\nUse the test network\n\n\n\n\n\n\n--simnet\n\n\nUse the simulation test network\n\n\n\n\n\n\n--nocheckpoints=\n\n\nDisable built-in checkpoints. Don\u2019t do this unless you know what you\u2019re doing.\n\n\n\n\n\n\n--dbtype=\n\n\nDatabase backend to use for the Block Chain (leveldb)\n\n\n\n\n\n\n--profile=\n\n\nEnable HTTP profiling on given port \u2013 NOTE port must be between 1024 and 65536 (6060)\n\n\n\n\n\n\n--cpuprofile=\n\n\nWrite CPU profile to the specified file\n\n\n\n\n\n\n--memprofile=\n\n\nWrite mem profile to the specified file\n\n\n\n\n\n\n--dumpblockchain=\n\n\nWrite blockchain as a gob-encoded map to the specified file\n\n\n\n\n\n\n--miningtimeoffset=\n\n\nOffset the mining timestamp of a block by this many seconds (positive values are in the past)\n\n\n\n\n\n\n-d\n or \n--debuglevel:\n\n\nLogging level for all subsystems {trace, debug, info, warn, error, critical} \u2013 You may also specify <subsystem>=<level>,<subsystem2>=<level>,\u2026 to set the log level for individual subsystems \u2013 Use show to list available subsystems (info)\n\n\n\n\n\n\n--upnp\n\n\nUse UPnP to map our listening port outside of NAT\n\n\n\n\n\n\n--minrelaytxfee\n\n\nThe minimum transaction fee in hc/kB to be considered a non-zero fee. (default: 0.001)\n\n\n\n\n\n\n--limitfreerelay=\n\n\nLimit relay of transactions with no transaction fee to the given amount in thousands of bytes per minute (15)\n\n\n\n\n\n\n--norelaypriority\n\n\nDo not require free or low-fee transactions to have high priority for relaying\n\n\n\n\n\n\n--maxorphantx=\n\n\nMax number of orphan transactions to keep in memory (1000)\n\n\n\n\n\n\n--generate=\n\n\nGenerate (mine) decreds using the CPU\n\n\n\n\n\n\n--miningaddr=\n\n\nAdd the specified payment address to the list of addresses to use for generated blocks \u2013 At least one address is required if the generate option is set\n\n\n\n\n\n\n--blockminsize=\n\n\nMininum block size in bytes to be used when creating a block\n\n\n\n\n\n\n--blockmaxsize=\n\n\nMaximum block size in bytes to be used when creating a block (750000)\n\n\n\n\n\n\n--blockprioritysize=\n\n\nSize in bytes for high-priority/low-fee transactions when creating a block (50000)\n\n\n\n\n\n\n--getworkkey=\n\n\nDEPRECATED \u2013 Use the \u2013miningaddr option instead\n\n\n\n\n\n\n--nopeerbloomfilters\n\n\nDisable bloom filtering support\n\n\n\n\n\n\n--sigcachemaxsize=\n\n\nThe maximum number of entries in the signature verification cache (default: 100000)\n\n\n\n\n\n\n--nonaggressive\n\n\nDisable mining off of the parent block of the blockchain if there aren\u2019t enough voters\n\n\n\n\n\n\n--nominingstatesync\n\n\nDisable synchronizing the mining state with other nodes\n\n\n\n\n\n\n--allowoldvotes\n\n\nEnable the addition of very old votes to the mempool\n\n\n\n\n\n\n--blocksonly\n\n\nDo not accept transactions from remote peers.\n\n\n\n\n\n\n--relaynonstd\n\n\nRelay non-standard transactions regardless of the default settings for the active network.\n\n\n\n\n\n\n--rejectnonstd\n\n\nReject non-standard transactions regardless of the default settings for the active network.\n\n\n\n\n\n\n--txindex\n\n\nMaintain a full hash-based transaction index which makes all transactions available via the getrawtransaction RPC\n\n\n\n\n\n\n--droptxindex\n\n\nDeletes the hash-based transaction index from the database on start up and then exits.\n\n\n\n\n\n\n--addrindex\n\n\nMaintain a full address-based transaction index which makes the searchrawtransactions RPC available\n\n\n\n\n\n\n--dropaddrindex\n\n\nDeletes the address-based transaction index from the database on start up and then exits.\n\n\n\n\n\n\n--noexistsaddrindex\n\n\nDisable the exists address index, which tracks whether or not an address has even been used.\n\n\n\n\n\n\n--dropexistsaddrindex\n\n\nDeletes the exists address index from the database on start up and then exits.\n\n\n\n\n\n\n--piperx=\n\n\nFile descriptor of read end pipe to enable parent -> child process communication\n\n\n\n\n\n\n--pipetx=\n\n\nFile descriptor of write end pipe to enable parent <- child process communication\n\n\n\n\n\n\n--lifetimeevents\n\n\nSend lifetime notifications over the TX pipe\n\n\n\n\n\n\n\n\n\n\nHelp options\n\u00b6\n\n\n\n\n\n\n\n\nOption\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\n-h\n or \n--help\n\n\nShow this help message\n\n\n\n\n\n\n\n\n\n\nPoS Commands\n\u00b6\n\n\nWhile it\u2019s easy to get started PoS mining, there\u2019s a lot happening in\nthe background. Let\u2019s have a look at some of the information\navailable:\n\n\nhcctl -u <username> - P <password> --wallet <command>\n\n\n\n\ngetbalance (\"account\" minconf=1 \"balancetype\")\n Gets the balance\nfor the given account (not address). On its own it will display\nspendable coins. To see all coins, you need to set balancetype to all\ne.g. \u2018getbalance * 0 all\u2019 will show the wallet\u2019s total balance.\n\n\ngetstakeinfo\n{\n  \"blockheight\": 171403,\n  \"poolsize\": 40957,\n  \"difficulty\": 68.20149389,\n  \"allmempooltix\": 9,\n  \"ownmempooltix\": 0,\n  \"immature\": 4,\n  \"live\": 25,\n  \"proportionlive\": 0.000061527943941663,\n  \"voted\": 50,\n  \"totalsubsidy\": 81.95590153,\n  \"missed\": 3,\n  \"proportionmissed\": 0.026713124274099883,\n  \"revoked\": 3,\n  \"expired\": 0\n}\n\n\n\n\nThe \ngetstakeinfo\n command returns a list of data about your PoS mining results.\n\n\n\n\n\n\n\n\nOutput\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nblockheight\n\n\nThe lastest block number.\n\n\n\n\n\n\npoolsize\n\n\nThe number of tickets currently in the voting pool.\n\n\n\n\n\n\ndifficulty\n\n\nThis is the cost of a ticket. It goes up or down depending on the number of tickets currently in the pool as well as the number of tickets over the last 2880 blocks using an exponential moving average \nSource(https://github.com/decred/hcd/blob/master/chaincfg/params.go#L336). The network will adjust the price to try to keep the pool size near the target of 40,960 tickets. Note this doesn\u2019t mean the price will always go up if above this number, nor will it always go down if below. The rate that tickets enter the pool also affects the price. It is adjusted every 144 blocks.\n\n\n\n\n\n\nallmempooltix\n\n\nOnly 20 tickets per block are accepted into the voting pool. Extra tickets wait in the mempool. Tickets are accepted into the voting pool according to ticketfee which is 0.001 hc/kB by default. See PoS mining#Purchasing-Tickets for more information.\n\n\n\n\n\n\nownmempooltix\n\n\nYour tickets that are waiting in the mempool.\n\n\n\n\n\n\nimmature\n\n\nAll tickets have a 256 (about a day) maturity time during which they cannot be selected to vote. This indicates how many of your tickets are in this state.\n\n\n\n\n\n\nlive\n\n\nTickets in the voting pool that are active and able to vote when selected.\n\n\n\n\n\n\nproportionlive\n\n\nProportion of your live tickets in the voting pool.\n\n\n\n\n\n\nvoted\n\n\nNumber of your tickets that have voted in this wallet.\n\n\n\n\n\n\ntotalsubsidy\n\n\nTotal amount this wallet has earned through voting.\n\n\n\n\n\n\nmissed\n\n\nTickets that were selected to vote but didn\u2019t, likely because the wallet was offline.\n\n\n\n\n\n\nproportionmissed\n\n\nProportion of all missed tickets that were yours.\n\n\n\n\n\n\nrevoked\n\n\nNumber of revoked tickets. Since missed tickets are revoked (removed from the voting pool without voting) this number will usually (but not always) equal missed tickets.\n\n\n\n\n\n\nexpired\n\n\nNumber of tickets that did not vote and reached the expiry (40960 blocks). The chance of this is about 1 in 200 and funds used to purchase the ticket (but not fees) are returned.\n\n\n\n\n\n\n\n\n\n\nhcctl parameters\n\u00b6\n\n\nChain server commands\n\u00b6\n\n\nNote that some commands have been omitted from this list. They include\nduplicate commands, unimplemented commands and those that have limited\nutility to the general userbase.  You can always see all commands\nwith \nhcctl -l\n.\n\n\n\n\n\n\n\n\nCommand\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\ngetbestblock\n\n\nGet the most recent block and hash in the chain.\n\n\n\n\n\n\ngetbestblockhash\n\n\nGet the hash of the most recent block in the chain.\n\n\n\n\n\n\ngetblockcount\n\n\nGet the current number of blocks in the chain.\n\n\n\n\n\n\ngetdifficulty\n\n\nGet the current PoW mining difficulty.\n\n\n\n\n\n\ngethashespersec\n\n\nGet the network hash rate.\n\n\n\n\n\n\ngetinfo\n\n\nDisplays some basic info about the network including current block number and network difficulty.\n\n\n\n\n\n\ngetmininginfo\n\n\nProbably the most useful PoW command. Shows the current block, size and difficulty, as well as the total network hash rate per second.\n\n\n\n\n\n\ngetnettotals\n\n\nGets the amount of data sent and received by the daemon.\n\n\n\n\n\n\ngetpeerinfo\n\n\nSimilar to getnettotals, includes network data transfer, time connected, block height when daemon was started and current block height.\n\n\n\n\n\n\ngetstakedifficulty\n\n\nReturns current PoS difficulty.\n\n\n\n\n\n\ngetticketpoolvalue\n\n\nGets the hc value of all tickets in the pool.\n\n\n\n\n\n\nhelp (\"command\")\n\n\nShow the help for a command.\n\n\n\n\n\n\nmissedtickets\n\n\nShow all of your tickets that missed voting.\n\n\n\n\n\n\nrebroadcastmissed\n\n\nRebroadcast missed tickets to the network. This is done automatically upon starting the wallet.\n\n\n\n\n\n\nrebroadcastwinners\n\n\nAs above, but for voted tickets.\n\n\n\n\n\n\nstop\n\n\nStop the daemon.\n\n\n\n\n\n\n\n\nWallet server commands (--wallet)\n\u00b6\n\n\n\n\n\n\n\n\nCommand\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\naddmultisigaddress nrequired [\"key\",...] (\"account\")\n\n\nAdds an address that requires multiple signatures to use.\n\n\n\n\n\n\nconsolidate inputs (\"account\")\n\n\nCleans up funds in multiple addresses in an account and puts it in a single address. Note there is a transaction fee to use this command.\n\n\n\n\n\n\ncreatemultisig nrequired [\"key\",...]\n\n\nUsed for multi signature wallets.\n\n\n\n\n\n\ncreatenewaccount \"account\"\n\n\nCreate a new account. Note, this makes a new account within the current wallet, NOT a new wallet.\n\n\n\n\n\n\ndumpprivkey \"address\"\n\n\nDisabled on mainnet for security reasons.\n\n\n\n\n\n\nencryptwallet \"passphrase\"\n\n\nEncrypt the wallet with the given phrase\n\n\n\n\n\n\ngetaccount \"address\"\n\n\nThis command will tell you what account the given address belongs to.\n\n\n\n\n\n\ngetaccountaddress \"account\"\n\n\nReturn the first address in the given account (default is \u2018default\u2019).\n\n\n\n\n\n\ngetaddressesbyaccount \"account\"\n\n\nGet all the addresses in the given account.\n\n\n\n\n\n\ngetbalance (\"account\" minconf=1 \"balancetype\")\n\n\nGet the spendable balance in the given account. To get the entire balance in the wallet, use \u2018getbalance * 0 all\u2019.\n\n\n\n\n\n\ngetbalancetomaintain\n\n\nThis is the minimum balance to maintain in the wallet when using auto stake buying.\n\n\n\n\n\n\ngetmasterpubkey\n\n\nGet the public key for your wallet. This will allow people to view, but not spend funds in your wallet. It is safe to provide to others.\n\n\n\n\n\n\ngetnewaddress (\"account\" verbose=false)\n\n\nGet a new address in the given account.\n\n\n\n\n\n\ngetreceivedbyaccount \"account\" (minconf=1)\n\n\nGets the total amount of hc ever received by this wallet. This includes stake returns so it could be quite large if you\u2019re PoS mining.\n\n\n\n\n\n\ngetreceivedbyaddress \"address\" (minconf=1)\n\n\nGet funds received by the given address.\n\n\n\n\n\n\ngetseed\n\n\nDisabled on mainnet for security.\n\n\n\n\n\n\ngetstakeinfo\n\n\nRetrieve useful information on the current status of the PoS pool. See \nPoS Commands.\n\n\n\n\n\n\ngetticketfee\n\n\nGet the average fee being paid for tickets.\n\n\n\n\n\n\ngetticketmaxprice\n\n\nGet the maximum price that your wallet will auto purchase tickets for.\n\n\n\n\n\n\ngettickets includeimmature\n\n\nGet all your current tickets. Second argument should be true if you want to see immature tickets too.\n\n\n\n\n\n\ngettransaction \"txid\" (includewatchonly=false)\n\n\nGet the transaction associated with the given id.\n\n\n\n\n\n\nlistaccounts (minconf=1)\n\n\nSee all accounts and their spendable balance in your wallet.\n\n\n\n\n\n\nlistreceivedbyaccount (minconf=1 includeempty=false includewatchonly=false)\n\n\nGet a list of all your accounts and the amount of hc that has been received by them.\n\n\n\n\n\n\nlistreceivedbyaddress (minconf=1 includeempty=false includewatchonly=false)\n\n\nGet a list of all your addresses and the amount of hc that has been received by them.\n\n\n\n\n\n\nlistsinceblock (\"blockhash\" targetconfirmations=1 includewatchonly=false)\n\n\nList transactions that have occurred since the given block hash.\n\n\n\n\n\n\nlisttransactions (\"account\" count=10 from=0 includewatchonly=false)\n\n\nList the number of transactions as specified by \u2018count\u2019 in the given account.\n\n\n\n\n\n\npurchaseticket \"fromaccount\" spendlimit (minconf=1 \"ticketaddress\" \"comment\")\n\n\nManually purchase PoS tickets. \u2018fromaccount\u2019 will usually be \u201cdefault\u201d. \u2018spendlimit\u2019 is the amount you want to spend on tickets in total, not per ticket.\n\n\n\n\n\n\nrenameaccount \"oldaccount\" \"newaccount\"\n\n\nRename an account in your wallet.\n\n\n\n\n\n\nsendfrom \"fromaccount\" \"toaddress\" amount (minconf=1 \"comment\" \"commentto\")\n\n\nSend hc from the given account to the given address. You can add an optional comment.\n\n\n\n\n\n\nsendtoaddress \"address\" amount (\"comment\" \"commentto\")\n\n\nSimilar to above but uses the default account to send from.\n\n\n\n\n\n\nsetbalancetomaintain balance\n\n\nUsed for auto staking. The wallet will auto buy tickets until it reaches this threshold.\n\n\n\n\n\n\nsetticketfee fee\n\n\nSet the (non-refundable) fee for purchasing stake tickets. See \nFAQ#Ticket fee\n\n\n\n\n\n\nsetticketmaxprice max\n\n\nSet the maximum price the wallet will pay when auto buying tickets.\n\n\n\n\n\n\nsetticketvotebits \"txhash\" votebits (\"votebitsext\")\n\n\nSets the given ticket to vote \u2018yes\u2019 or \u2018no\u2019 (default yes)\n\n\n\n\n\n\nsettxfee amount\n\n\nSets the fee per kB of transaction data you are willing to pay. Note this is NOT the same as setticketfee above.\n\n\n\n\n\n\nwalletlock\n\n\nLock the wallet (no funds can be sent).\n\n\n\n\n\n\nwalletpassphrase \"passphrase\" timeout\n\n\nUnlock the wallet using the given pass phrase for the given time period in seconds. 0 will unlock the wallet until it is restarted.\n\n\n\n\n\n\nwalletpassphrasechange \"oldpassphrase\" \"newpassphrase\"\n\n\nChange your wallet passphrase.",
            "title": "Program Options"
        },
        {
            "location": "/advanced/program-options/#program-options",
            "text": "The default options are sane for most users, although you may need to\nset your credentials. This means  hcd  will\nwork \u2018out of the box\u2019 for most users. However, there are also a wide\nvariety of flags that can be used to control its behavior. The following section\nprovides a usage overview which enumerates the flags. An interesting\npoint to note is that the long form of all of these options (except -C ) can be specified in a configuration file that is automatically\nparsed when hcd starts up.\nThe  -C  ( --configfile )\nflag, as shown below, can be used to override the default location.\nYou can always get a list of all options by using the  -h  flag.",
            "title": " Program Options"
        },
        {
            "location": "/advanced/program-options/#usage",
            "text": "hcd [OPTIONS]",
            "title": "Usage"
        },
        {
            "location": "/advanced/program-options/#application-options",
            "text": "Option  Description      -A  or  --appdata=  Path to hcd home directory ($HOME/.hcd)    -V  or  --version  Display version information and exit    -C  or  --configfile=  Path to configuration file    -b  or  --datadir=  Directory to store data    --logdir=  Directory to log output. ($HOME/.hcd/logs)    -a  or  --addpeer=  Add a peer to connect with at startup    --connect=  Connect only to the specified peers at startup    --nolisten  Disable listening for incoming connections \u2013 NOTE: Listening is automatically disabled if the  --connect  or  --proxy  options are used without also specifying listen interfaces via  --listen    --listen=  Add an interface/port to listen for connections (default all interfaces port:  9108 , testnet:  19108 )    --maxpeers=  Max number of inbound and outbound peers (125)    --nobanning  Disable banning of misbehaving peers    --banduration=  How long to ban misbehaving peers. Valid time units are {s, m, h}.  Minimum 1 second (24h0m0s)    --banthreshold  Maximum allowed ban score before disconnecting banning misbehaving peers. (default: 100)    --whitelist=  Add an IP network or IP that will not be banned. (eg. 192.168.1.0/24 or ::1)    -u  or  --rpcuser=  Username for RPC connections    -P  or  --rpcpass=  Password for RPC connections    --rpclimituser=  Username for limited RPC connections    --rpclimitpass=  Password for limited RPC connections    --rpclisten=  Add an interface/port to listen for RPC connections (default port:  8334 , testnet:  18334 )    --rpccert=  File containing the certificate file    --rpckey=  File containing the certificate key    --rpcmaxclients=  Max number of RPC clients for standard connections (10)    --rpcmaxwebsockets=  Max number of RPC clients for standard connections (25)    --norpc  Disable built-in RPC server \u2013 NOTE: The RPC server is disabled by default if no  rpcuser / rpcpass  is specified    --notls  Disable TLS for the RPC server \u2013 NOTE: This is only allowed if the RPC server is bound to localhost    --nodnsseed  Disable DNS seeding for peers    --externalip=  Add an ip to the list of local addresses we claim to listen on to peers    --proxy=  Connect via SOCKS5 proxy (eg. 127.0.0.1:9050)    --proxyuser=  Username for proxy server    --proxypass=  Password for proxy server    --onion=  Connect to tor hidden services via SOCKS5 proxy (eg. 127.0.0.1:9050)    --onionuser=  Username for onion proxy server    --onionpass=  Password for onion proxy server    --noonion=  Disable connecting to tor hidden services    --torisolation  Enable Tor stream isolation by randomizing user credentials for each connection    --testnet  Use the test network    --simnet  Use the simulation test network    --nocheckpoints=  Disable built-in checkpoints. Don\u2019t do this unless you know what you\u2019re doing.    --dbtype=  Database backend to use for the Block Chain (leveldb)    --profile=  Enable HTTP profiling on given port \u2013 NOTE port must be between 1024 and 65536 (6060)    --cpuprofile=  Write CPU profile to the specified file    --memprofile=  Write mem profile to the specified file    --dumpblockchain=  Write blockchain as a gob-encoded map to the specified file    --miningtimeoffset=  Offset the mining timestamp of a block by this many seconds (positive values are in the past)    -d  or  --debuglevel:  Logging level for all subsystems {trace, debug, info, warn, error, critical} \u2013 You may also specify <subsystem>=<level>,<subsystem2>=<level>,\u2026 to set the log level for individual subsystems \u2013 Use show to list available subsystems (info)    --upnp  Use UPnP to map our listening port outside of NAT    --minrelaytxfee  The minimum transaction fee in hc/kB to be considered a non-zero fee. (default: 0.001)    --limitfreerelay=  Limit relay of transactions with no transaction fee to the given amount in thousands of bytes per minute (15)    --norelaypriority  Do not require free or low-fee transactions to have high priority for relaying    --maxorphantx=  Max number of orphan transactions to keep in memory (1000)    --generate=  Generate (mine) decreds using the CPU    --miningaddr=  Add the specified payment address to the list of addresses to use for generated blocks \u2013 At least one address is required if the generate option is set    --blockminsize=  Mininum block size in bytes to be used when creating a block    --blockmaxsize=  Maximum block size in bytes to be used when creating a block (750000)    --blockprioritysize=  Size in bytes for high-priority/low-fee transactions when creating a block (50000)    --getworkkey=  DEPRECATED \u2013 Use the \u2013miningaddr option instead    --nopeerbloomfilters  Disable bloom filtering support    --sigcachemaxsize=  The maximum number of entries in the signature verification cache (default: 100000)    --nonaggressive  Disable mining off of the parent block of the blockchain if there aren\u2019t enough voters    --nominingstatesync  Disable synchronizing the mining state with other nodes    --allowoldvotes  Enable the addition of very old votes to the mempool    --blocksonly  Do not accept transactions from remote peers.    --relaynonstd  Relay non-standard transactions regardless of the default settings for the active network.    --rejectnonstd  Reject non-standard transactions regardless of the default settings for the active network.    --txindex  Maintain a full hash-based transaction index which makes all transactions available via the getrawtransaction RPC    --droptxindex  Deletes the hash-based transaction index from the database on start up and then exits.    --addrindex  Maintain a full address-based transaction index which makes the searchrawtransactions RPC available    --dropaddrindex  Deletes the address-based transaction index from the database on start up and then exits.    --noexistsaddrindex  Disable the exists address index, which tracks whether or not an address has even been used.    --dropexistsaddrindex  Deletes the exists address index from the database on start up and then exits.    --piperx=  File descriptor of read end pipe to enable parent -> child process communication    --pipetx=  File descriptor of write end pipe to enable parent <- child process communication    --lifetimeevents  Send lifetime notifications over the TX pipe",
            "title": "Application options"
        },
        {
            "location": "/advanced/program-options/#help-options",
            "text": "Option  Description      -h  or  --help  Show this help message",
            "title": "Help options"
        },
        {
            "location": "/advanced/program-options/#pos-commands",
            "text": "While it\u2019s easy to get started PoS mining, there\u2019s a lot happening in\nthe background. Let\u2019s have a look at some of the information\navailable:  hcctl -u <username> - P <password> --wallet <command>  getbalance (\"account\" minconf=1 \"balancetype\")  Gets the balance\nfor the given account (not address). On its own it will display\nspendable coins. To see all coins, you need to set balancetype to all\ne.g. \u2018getbalance * 0 all\u2019 will show the wallet\u2019s total balance.  getstakeinfo\n{\n  \"blockheight\": 171403,\n  \"poolsize\": 40957,\n  \"difficulty\": 68.20149389,\n  \"allmempooltix\": 9,\n  \"ownmempooltix\": 0,\n  \"immature\": 4,\n  \"live\": 25,\n  \"proportionlive\": 0.000061527943941663,\n  \"voted\": 50,\n  \"totalsubsidy\": 81.95590153,\n  \"missed\": 3,\n  \"proportionmissed\": 0.026713124274099883,\n  \"revoked\": 3,\n  \"expired\": 0\n}  The  getstakeinfo  command returns a list of data about your PoS mining results.     Output  Description      blockheight  The lastest block number.    poolsize  The number of tickets currently in the voting pool.    difficulty  This is the cost of a ticket. It goes up or down depending on the number of tickets currently in the pool as well as the number of tickets over the last 2880 blocks using an exponential moving average  Source(https://github.com/decred/hcd/blob/master/chaincfg/params.go#L336). The network will adjust the price to try to keep the pool size near the target of 40,960 tickets. Note this doesn\u2019t mean the price will always go up if above this number, nor will it always go down if below. The rate that tickets enter the pool also affects the price. It is adjusted every 144 blocks.    allmempooltix  Only 20 tickets per block are accepted into the voting pool. Extra tickets wait in the mempool. Tickets are accepted into the voting pool according to ticketfee which is 0.001 hc/kB by default. See PoS mining#Purchasing-Tickets for more information.    ownmempooltix  Your tickets that are waiting in the mempool.    immature  All tickets have a 256 (about a day) maturity time during which they cannot be selected to vote. This indicates how many of your tickets are in this state.    live  Tickets in the voting pool that are active and able to vote when selected.    proportionlive  Proportion of your live tickets in the voting pool.    voted  Number of your tickets that have voted in this wallet.    totalsubsidy  Total amount this wallet has earned through voting.    missed  Tickets that were selected to vote but didn\u2019t, likely because the wallet was offline.    proportionmissed  Proportion of all missed tickets that were yours.    revoked  Number of revoked tickets. Since missed tickets are revoked (removed from the voting pool without voting) this number will usually (but not always) equal missed tickets.    expired  Number of tickets that did not vote and reached the expiry (40960 blocks). The chance of this is about 1 in 200 and funds used to purchase the ticket (but not fees) are returned.",
            "title": "PoS Commands"
        },
        {
            "location": "/advanced/program-options/#hcctl-parameters",
            "text": "",
            "title": "hcctl parameters"
        },
        {
            "location": "/advanced/program-options/#chain-server-commands",
            "text": "Note that some commands have been omitted from this list. They include\nduplicate commands, unimplemented commands and those that have limited\nutility to the general userbase.  You can always see all commands\nwith  hcctl -l .     Command  Description      getbestblock  Get the most recent block and hash in the chain.    getbestblockhash  Get the hash of the most recent block in the chain.    getblockcount  Get the current number of blocks in the chain.    getdifficulty  Get the current PoW mining difficulty.    gethashespersec  Get the network hash rate.    getinfo  Displays some basic info about the network including current block number and network difficulty.    getmininginfo  Probably the most useful PoW command. Shows the current block, size and difficulty, as well as the total network hash rate per second.    getnettotals  Gets the amount of data sent and received by the daemon.    getpeerinfo  Similar to getnettotals, includes network data transfer, time connected, block height when daemon was started and current block height.    getstakedifficulty  Returns current PoS difficulty.    getticketpoolvalue  Gets the hc value of all tickets in the pool.    help (\"command\")  Show the help for a command.    missedtickets  Show all of your tickets that missed voting.    rebroadcastmissed  Rebroadcast missed tickets to the network. This is done automatically upon starting the wallet.    rebroadcastwinners  As above, but for voted tickets.    stop  Stop the daemon.",
            "title": "Chain server commands"
        },
        {
            "location": "/advanced/program-options/#wallet-server-commands-4545wallet",
            "text": "Command  Description      addmultisigaddress nrequired [\"key\",...] (\"account\")  Adds an address that requires multiple signatures to use.    consolidate inputs (\"account\")  Cleans up funds in multiple addresses in an account and puts it in a single address. Note there is a transaction fee to use this command.    createmultisig nrequired [\"key\",...]  Used for multi signature wallets.    createnewaccount \"account\"  Create a new account. Note, this makes a new account within the current wallet, NOT a new wallet.    dumpprivkey \"address\"  Disabled on mainnet for security reasons.    encryptwallet \"passphrase\"  Encrypt the wallet with the given phrase    getaccount \"address\"  This command will tell you what account the given address belongs to.    getaccountaddress \"account\"  Return the first address in the given account (default is \u2018default\u2019).    getaddressesbyaccount \"account\"  Get all the addresses in the given account.    getbalance (\"account\" minconf=1 \"balancetype\")  Get the spendable balance in the given account. To get the entire balance in the wallet, use \u2018getbalance * 0 all\u2019.    getbalancetomaintain  This is the minimum balance to maintain in the wallet when using auto stake buying.    getmasterpubkey  Get the public key for your wallet. This will allow people to view, but not spend funds in your wallet. It is safe to provide to others.    getnewaddress (\"account\" verbose=false)  Get a new address in the given account.    getreceivedbyaccount \"account\" (minconf=1)  Gets the total amount of hc ever received by this wallet. This includes stake returns so it could be quite large if you\u2019re PoS mining.    getreceivedbyaddress \"address\" (minconf=1)  Get funds received by the given address.    getseed  Disabled on mainnet for security.    getstakeinfo  Retrieve useful information on the current status of the PoS pool. See  PoS Commands.    getticketfee  Get the average fee being paid for tickets.    getticketmaxprice  Get the maximum price that your wallet will auto purchase tickets for.    gettickets includeimmature  Get all your current tickets. Second argument should be true if you want to see immature tickets too.    gettransaction \"txid\" (includewatchonly=false)  Get the transaction associated with the given id.    listaccounts (minconf=1)  See all accounts and their spendable balance in your wallet.    listreceivedbyaccount (minconf=1 includeempty=false includewatchonly=false)  Get a list of all your accounts and the amount of hc that has been received by them.    listreceivedbyaddress (minconf=1 includeempty=false includewatchonly=false)  Get a list of all your addresses and the amount of hc that has been received by them.    listsinceblock (\"blockhash\" targetconfirmations=1 includewatchonly=false)  List transactions that have occurred since the given block hash.    listtransactions (\"account\" count=10 from=0 includewatchonly=false)  List the number of transactions as specified by \u2018count\u2019 in the given account.    purchaseticket \"fromaccount\" spendlimit (minconf=1 \"ticketaddress\" \"comment\")  Manually purchase PoS tickets. \u2018fromaccount\u2019 will usually be \u201cdefault\u201d. \u2018spendlimit\u2019 is the amount you want to spend on tickets in total, not per ticket.    renameaccount \"oldaccount\" \"newaccount\"  Rename an account in your wallet.    sendfrom \"fromaccount\" \"toaddress\" amount (minconf=1 \"comment\" \"commentto\")  Send hc from the given account to the given address. You can add an optional comment.    sendtoaddress \"address\" amount (\"comment\" \"commentto\")  Similar to above but uses the default account to send from.    setbalancetomaintain balance  Used for auto staking. The wallet will auto buy tickets until it reaches this threshold.    setticketfee fee  Set the (non-refundable) fee for purchasing stake tickets. See  FAQ#Ticket fee    setticketmaxprice max  Set the maximum price the wallet will pay when auto buying tickets.    setticketvotebits \"txhash\" votebits (\"votebitsext\")  Sets the given ticket to vote \u2018yes\u2019 or \u2018no\u2019 (default yes)    settxfee amount  Sets the fee per kB of transaction data you are willing to pay. Note this is NOT the same as setticketfee above.    walletlock  Lock the wallet (no funds can be sent).    walletpassphrase \"passphrase\" timeout  Unlock the wallet using the given pass phrase for the given time period in seconds. 0 will unlock the wallet until it is restarted.    walletpassphrasechange \"oldpassphrase\" \"newpassphrase\"  Change your wallet passphrase.",
            "title": "Wallet server commands (--wallet)"
        },
        {
            "location": "/advanced/block-header-specifications/",
            "text": "Block Header Specifications\n\u00b6\n\n\n\n\nBlock header format\n\u00b6\n\n\nCoolsnady block headers occupy 180 bytes when serialized. The\nserialization format for a block header is displayed below:\n\n\n\n\n\n\n\n\nField\n\n\nDescription\n\n\nSize\n\n\n\n\n\n\n\n\n\n\nVersion\n\n\nBlock header version\n\n\n4 bytes\n\n\n\n\n\n\nPrevBlock\n\n\nHash of the previous block\n\n\n32 bytes\n\n\n\n\n\n\nMerkleRoot\n\n\nMerkle tree hash calculated using all transactions in the block\n\n\n32 bytes\n\n\n\n\n\n\nStakeRoot\n\n\nMerkle tree hash calculated using all stake transactions in the block\n\n\n32 bytes\n\n\n\n\n\n\nVoteBits\n\n\nBit flags. Currently only used to signify votes on the previous merkle root\n\n\n2 bytes\n\n\n\n\n\n\nFinalState\n\n\nCommitment to the final state of the PRNG (for lottery purposes)\n\n\n6 bytes\n\n\n\n\n\n\nVoters\n\n\nNumber of participating voters in the block\n\n\n2 bytes\n\n\n\n\n\n\nFreshStake\n\n\nNumber of new tickets in the block\n\n\n1 byte\n\n\n\n\n\n\nRevocations\n\n\nNumber of revocations present in the block\n\n\n1 byte\n\n\n\n\n\n\nPoolSize\n\n\nSize of the ticket pool\n\n\n4 bytes\n\n\n\n\n\n\nBits\n\n\nDifficulty target for the block\n\n\n4 bytes\n\n\n\n\n\n\nSBits\n\n\nStake difficulty target for the block\n\n\n8 bytes\n\n\n\n\n\n\nHeight\n\n\nThe number of blocks that precede the block in the blockchain\n\n\n4 bytes\n\n\n\n\n\n\nSize\n\n\nNumber of bytes that the serialized block occupies\n\n\n4 bytes\n\n\n\n\n\n\nTimestamp\n\n\nTime that the block was created\n\n\n4 bytes\n\n\n\n\n\n\nNonce\n\n\nThe nonce used to generate the block\n\n\n4 bytes\n\n\n\n\n\n\nExtraData\n\n\nAny other data (may be used later for consensus purposes)\n\n\n32 bytes\n\n\n\n\n\n\nStakeVersion\n\n\nThe stake version used for voting on the created block\n\n\n4 bytes\n\n\n\n\n\n\n\n\n\n\nExample encoded block header\n\u00b6\n\n\n        0x01, 0x00, 0x00, 0x00, // Version\n        0x6f, 0xe2, 0x8c, 0x0a, 0xb6, 0xf1, 0xb3, 0x72, // PrevBlock\n        0xc1, 0xa6, 0xa2, 0x46, 0xae, 0x63, 0xf7, 0x4f,\n        0x93, 0x1e, 0x83, 0x65, 0xe1, 0x5a, 0x08, 0x9c,\n        0x68, 0xd6, 0x19, 0x00, 0x00, 0x00, 0x00, 0x00,\n        0x3b, 0xa3, 0xed, 0xfd, 0x7a, 0x7b, 0x12, 0xb2, // MerkleRoot\n        0x7a, 0xc7, 0x2c, 0x3e, 0x67, 0x76, 0x8f, 0x61,\n        0x7f, 0xc8, 0x1b, 0xc3, 0x88, 0x8a, 0x51, 0x32,\n        0x3a, 0x9f, 0xb8, 0xaa, 0x4b, 0x1e, 0x5e, 0x4a,\n        0x3b, 0xa3, 0xed, 0xfd, 0x7a, 0x7b, 0x12, 0xb2, // StakeRoot\n        0x7a, 0xc7, 0x2c, 0x3e, 0x67, 0x76, 0x8f, 0x61,\n        0x7f, 0xc8, 0x1b, 0xc3, 0x88, 0x8a, 0x51, 0x32,\n        0x3a, 0x9f, 0xb8, 0xaa, 0x4b, 0x1e, 0x5e, 0x4a,\n        0x00, 0x00,                                     // VoteBits\n        0x00, 0x00, 0x00, 0x00, 0x00, 0x00,             // FinalState\n        0x00, 0x00,                                     // Voters\n        0x00,                                           // FreshStake\n        0x00,                                           // Revocations\n        0x00, 0x00, 0x00, 0x00,                         // PoolSize\n        0xff, 0xff, 0x00, 0x1d,                         // Bits\n        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // SBits\n        0x00, 0x00, 0x00, 0x00,                         // Height\n        0x00, 0x00, 0x00, 0x00,                         // Size\n        0x29, 0xab, 0x5f, 0x49,                         // Timestamp\n        0xf3, 0xe0, 0x01, 0x00,                         // Nonce\n        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // ExtraData\n        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n        0x03, 0x00, 0x00, 0x00,                         // StakeVersion\n\n\n\n\n\n\nExample encoded block header as raw bytes\n\u00b6\n\n\n        010000006fe28c0ab6f1b372c1a6a246ae63f74f931e8365e15a089c68d61900\n        000000003ba3edfd7a7b12b27ac72c3e67768f617fc81bc3888a51323a9fb8aa\n        4b1e5e4a3ba3edfd7a7b12b27ac72c3e67768f617fc81bc3888a51323a9fb8aa\n        4b1e5e4a0000000000000000000000000000000ffff001d00000000000000000\n        00000000000000029ab5f49f3e00100000000000000000000000000000000000\n        000000000000000000000000000000003000000\n\n\n\n\n\n\nMining details\n\u00b6\n\n\nBoth getwork and getblocktemplate are implemented, but neither is\nprecisely the same as in Bitcoin. getwork is very similar, but returns\na non-int32 reversed byte string to work off of. The \u2018data\u2019 field\nrefers to the properly padded blake256 input of 3x64 byte chunks. Only\nthe last chunk needs to be modified when mining.\n\n\nExample \ngetwork\n response:\n\n\n{\n  \"data\": \"00000000bf9d58482135c4d8d9445af7604b24ccf1d31b33df33abf21a4e11f52c\n000000ef9d462a20d734def40076f0027faa8ef8d9c52d68c46741d03b1732377a556ed9cbf3b\n694e65c1b287e8fd2be2e2243a74356d1ef95413d9fc74ffb8a8a07530100e11754a6af500500\n03000115000000096f1d28d1354d000000000a0d0000591300009329a55600000000000000000\n00000000000000000000000000000000000000000000000000000000000000080000001000000\n00000005a0\",\n  \"target\": \"000000000000000000000000000000000000000000000000000000096f000000\"\n}\n\n\n\n\ngetblocktemplate\n also returns a full header and data about the\ntransactions that are included in the block. An example:\n\n\n{\n  \"header\": \"...\",\n  \"sigoplimit\": 20000,\n  \"sizelimit\": 1000000,\n  \"transactions\": [\n    {\n      \"data\": \"...\",\n      \"hash\": \"9e72fdd4f0ac763da72ef672e6a4a9ec157412439fc578f979a6643fb9ad3bb6\",\n      \"depends\": [],\n      \"fee\": 1000,\n      \"sigops\": 2,\n      \"txtype\": \"regular\"\n    }\n  ],\n  \"stransactions\": [\n    {\n      \"data\": \"...\",\n      \"hash\": \"53b4dd7e041f492d9b2de54215b8fff107885313e4556eadabec7784b936f96e\",\n      \"depends\": [],\n      \"fee\": 0,\n      \"sigops\": 1,\n      \"txtype\": \"vote\"\n    },\n    {\n      \"data\": \"...\",\n      \"hash\": \"316819cd5ab8a67d56e81cb02f2386a52ce9e88e2984c8fb773b9a7435a843fe\",\n      \"depends\": [],\n      \"fee\": 0,\n      \"sigops\": 1,\n      \"txtype\": \"vote\"\n    },\n    {\n      \"data\": \"...\",\n      \"hash\": \"ec478ed0572049dea679feeb2cfac70740644dde18ad9241d9075501ea293f25\",\n      \"depends\": [],\n      \"fee\": 0,\n      \"sigops\": 1,\n      \"txtype\": \"vote\"\n    },\n    {\n      \"data\": \"...\",\n      \"hash\": \"c83befd244e25cc79b79956d1046003c605aaee672da14c03f4a12a42ba85126\",\n      \"depends\": [],\n      \"fee\": 0,\n      \"sigops\": 1,\n      \"txtype\": \"vote\"\n    },\n    {\n      \"data\": \"...\",\n      \"hash\": \"17e7cad2a56540c64c6a655263de22bf45c3ed4d43d059f808038212e3c7d840\",\n      \"depends\": [],\n      \"fee\": 0,\n      \"sigops\": 1,\n      \"txtype\": \"vote\"\n    },\n    {\n      \"data\": \"...\",\n      \"hash\": \"e4f17fd4f487fdbf8c24cd1bde1b621203561e9edce975c9f649961160819afb\",\n      \"depends\": [],\n      \"fee\": 1000,\n      \"sigops\": 3,\n      \"txtype\": \"ticket\"\n    },\n    {\n      \"data\": \"...\",\n      \"hash\": \"e214c31c466a60772cfc463b856c29236c7db10126d0a7a4da000aba0e2a58bb\",\n      \"depends\": [],\n      \"fee\": 1000,\n      \"sigops\": 2,\n      \"txtype\": \"ticket\"\n    },\n    {\n      \"data\": \"...\",\n      \"hash\": \"2dd201d2960a8e44cbe33caae34d8cdb4c7a9bcfcfc397e88fb5e4afd9e3e425\",\n      \"depends\": [],\n      \"fee\": 1000,\n      \"sigops\": 2,\n      \"txtype\": \"ticket\"\n    },\n    {\n      \"data\": \"...\",\n      \"hash\": \"b00a34879e4dffacd79f1adae07cf78a415c733695cb309290843f81b860a570\",\n      \"depends\": [],\n      \"fee\": 1000,\n      \"sigops\": 3,\n      \"txtype\": \"ticket\"\n    }\n  ],\n  \"coinbaseaux\": {\n    \"flags\": \"062f646372642f\"\n  },\n  \"coinbasevalue\": 247524752,\n  \"longpollid\": \"0000005de504d40790bbcccdbe7c693b5bbc0e4871c2d9375625e5248be2f645-1453664716\",\n  \"target\": \"0000006f09000000000000000000000000000000000000000000000000000000\",\n  \"maxtime\": 1453671916,\n  \"mintime\": 1453664454,\n  \"mutable\": [\n    \"time\",\n    \"transactions/add\",\n    \"prevblock\",\n    \"coinbase/append\"\n  ],\n  \"noncerange\": \"00000000ffffffff\",\n  \"capabilities\": [\n    \"proposal\"\n  ]\n}\n\n\n\n\nMining is performed by incrementing the nonce until the block\nheader is below the target. ExtraData is allowed to be used as an\nextra nonce for fast hashing devices like ASICs, but a soft fork\nmay change this at some point (to allow it to be used for other\nconsensus data structures).",
            "title": "Block Header Specifications"
        },
        {
            "location": "/advanced/block-header-specifications/#block-header-specifications",
            "text": "",
            "title": " Block Header Specifications"
        },
        {
            "location": "/advanced/block-header-specifications/#block-header-format",
            "text": "Coolsnady block headers occupy 180 bytes when serialized. The\nserialization format for a block header is displayed below:     Field  Description  Size      Version  Block header version  4 bytes    PrevBlock  Hash of the previous block  32 bytes    MerkleRoot  Merkle tree hash calculated using all transactions in the block  32 bytes    StakeRoot  Merkle tree hash calculated using all stake transactions in the block  32 bytes    VoteBits  Bit flags. Currently only used to signify votes on the previous merkle root  2 bytes    FinalState  Commitment to the final state of the PRNG (for lottery purposes)  6 bytes    Voters  Number of participating voters in the block  2 bytes    FreshStake  Number of new tickets in the block  1 byte    Revocations  Number of revocations present in the block  1 byte    PoolSize  Size of the ticket pool  4 bytes    Bits  Difficulty target for the block  4 bytes    SBits  Stake difficulty target for the block  8 bytes    Height  The number of blocks that precede the block in the blockchain  4 bytes    Size  Number of bytes that the serialized block occupies  4 bytes    Timestamp  Time that the block was created  4 bytes    Nonce  The nonce used to generate the block  4 bytes    ExtraData  Any other data (may be used later for consensus purposes)  32 bytes    StakeVersion  The stake version used for voting on the created block  4 bytes",
            "title": "Block header format"
        },
        {
            "location": "/advanced/block-header-specifications/#example-encoded-block-header",
            "text": "0x01, 0x00, 0x00, 0x00, // Version\n        0x6f, 0xe2, 0x8c, 0x0a, 0xb6, 0xf1, 0xb3, 0x72, // PrevBlock\n        0xc1, 0xa6, 0xa2, 0x46, 0xae, 0x63, 0xf7, 0x4f,\n        0x93, 0x1e, 0x83, 0x65, 0xe1, 0x5a, 0x08, 0x9c,\n        0x68, 0xd6, 0x19, 0x00, 0x00, 0x00, 0x00, 0x00,\n        0x3b, 0xa3, 0xed, 0xfd, 0x7a, 0x7b, 0x12, 0xb2, // MerkleRoot\n        0x7a, 0xc7, 0x2c, 0x3e, 0x67, 0x76, 0x8f, 0x61,\n        0x7f, 0xc8, 0x1b, 0xc3, 0x88, 0x8a, 0x51, 0x32,\n        0x3a, 0x9f, 0xb8, 0xaa, 0x4b, 0x1e, 0x5e, 0x4a,\n        0x3b, 0xa3, 0xed, 0xfd, 0x7a, 0x7b, 0x12, 0xb2, // StakeRoot\n        0x7a, 0xc7, 0x2c, 0x3e, 0x67, 0x76, 0x8f, 0x61,\n        0x7f, 0xc8, 0x1b, 0xc3, 0x88, 0x8a, 0x51, 0x32,\n        0x3a, 0x9f, 0xb8, 0xaa, 0x4b, 0x1e, 0x5e, 0x4a,\n        0x00, 0x00,                                     // VoteBits\n        0x00, 0x00, 0x00, 0x00, 0x00, 0x00,             // FinalState\n        0x00, 0x00,                                     // Voters\n        0x00,                                           // FreshStake\n        0x00,                                           // Revocations\n        0x00, 0x00, 0x00, 0x00,                         // PoolSize\n        0xff, 0xff, 0x00, 0x1d,                         // Bits\n        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // SBits\n        0x00, 0x00, 0x00, 0x00,                         // Height\n        0x00, 0x00, 0x00, 0x00,                         // Size\n        0x29, 0xab, 0x5f, 0x49,                         // Timestamp\n        0xf3, 0xe0, 0x01, 0x00,                         // Nonce\n        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // ExtraData\n        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n        0x03, 0x00, 0x00, 0x00,                         // StakeVersion",
            "title": "Example encoded block header"
        },
        {
            "location": "/advanced/block-header-specifications/#example-encoded-block-header-as-raw-bytes",
            "text": "010000006fe28c0ab6f1b372c1a6a246ae63f74f931e8365e15a089c68d61900\n        000000003ba3edfd7a7b12b27ac72c3e67768f617fc81bc3888a51323a9fb8aa\n        4b1e5e4a3ba3edfd7a7b12b27ac72c3e67768f617fc81bc3888a51323a9fb8aa\n        4b1e5e4a0000000000000000000000000000000ffff001d00000000000000000\n        00000000000000029ab5f49f3e00100000000000000000000000000000000000\n        000000000000000000000000000000003000000",
            "title": "Example encoded block header as raw bytes"
        },
        {
            "location": "/advanced/block-header-specifications/#mining-details",
            "text": "Both getwork and getblocktemplate are implemented, but neither is\nprecisely the same as in Bitcoin. getwork is very similar, but returns\na non-int32 reversed byte string to work off of. The \u2018data\u2019 field\nrefers to the properly padded blake256 input of 3x64 byte chunks. Only\nthe last chunk needs to be modified when mining.  Example  getwork  response:  {\n  \"data\": \"00000000bf9d58482135c4d8d9445af7604b24ccf1d31b33df33abf21a4e11f52c\n000000ef9d462a20d734def40076f0027faa8ef8d9c52d68c46741d03b1732377a556ed9cbf3b\n694e65c1b287e8fd2be2e2243a74356d1ef95413d9fc74ffb8a8a07530100e11754a6af500500\n03000115000000096f1d28d1354d000000000a0d0000591300009329a55600000000000000000\n00000000000000000000000000000000000000000000000000000000000000080000001000000\n00000005a0\",\n  \"target\": \"000000000000000000000000000000000000000000000000000000096f000000\"\n}  getblocktemplate  also returns a full header and data about the\ntransactions that are included in the block. An example:  {\n  \"header\": \"...\",\n  \"sigoplimit\": 20000,\n  \"sizelimit\": 1000000,\n  \"transactions\": [\n    {\n      \"data\": \"...\",\n      \"hash\": \"9e72fdd4f0ac763da72ef672e6a4a9ec157412439fc578f979a6643fb9ad3bb6\",\n      \"depends\": [],\n      \"fee\": 1000,\n      \"sigops\": 2,\n      \"txtype\": \"regular\"\n    }\n  ],\n  \"stransactions\": [\n    {\n      \"data\": \"...\",\n      \"hash\": \"53b4dd7e041f492d9b2de54215b8fff107885313e4556eadabec7784b936f96e\",\n      \"depends\": [],\n      \"fee\": 0,\n      \"sigops\": 1,\n      \"txtype\": \"vote\"\n    },\n    {\n      \"data\": \"...\",\n      \"hash\": \"316819cd5ab8a67d56e81cb02f2386a52ce9e88e2984c8fb773b9a7435a843fe\",\n      \"depends\": [],\n      \"fee\": 0,\n      \"sigops\": 1,\n      \"txtype\": \"vote\"\n    },\n    {\n      \"data\": \"...\",\n      \"hash\": \"ec478ed0572049dea679feeb2cfac70740644dde18ad9241d9075501ea293f25\",\n      \"depends\": [],\n      \"fee\": 0,\n      \"sigops\": 1,\n      \"txtype\": \"vote\"\n    },\n    {\n      \"data\": \"...\",\n      \"hash\": \"c83befd244e25cc79b79956d1046003c605aaee672da14c03f4a12a42ba85126\",\n      \"depends\": [],\n      \"fee\": 0,\n      \"sigops\": 1,\n      \"txtype\": \"vote\"\n    },\n    {\n      \"data\": \"...\",\n      \"hash\": \"17e7cad2a56540c64c6a655263de22bf45c3ed4d43d059f808038212e3c7d840\",\n      \"depends\": [],\n      \"fee\": 0,\n      \"sigops\": 1,\n      \"txtype\": \"vote\"\n    },\n    {\n      \"data\": \"...\",\n      \"hash\": \"e4f17fd4f487fdbf8c24cd1bde1b621203561e9edce975c9f649961160819afb\",\n      \"depends\": [],\n      \"fee\": 1000,\n      \"sigops\": 3,\n      \"txtype\": \"ticket\"\n    },\n    {\n      \"data\": \"...\",\n      \"hash\": \"e214c31c466a60772cfc463b856c29236c7db10126d0a7a4da000aba0e2a58bb\",\n      \"depends\": [],\n      \"fee\": 1000,\n      \"sigops\": 2,\n      \"txtype\": \"ticket\"\n    },\n    {\n      \"data\": \"...\",\n      \"hash\": \"2dd201d2960a8e44cbe33caae34d8cdb4c7a9bcfcfc397e88fb5e4afd9e3e425\",\n      \"depends\": [],\n      \"fee\": 1000,\n      \"sigops\": 2,\n      \"txtype\": \"ticket\"\n    },\n    {\n      \"data\": \"...\",\n      \"hash\": \"b00a34879e4dffacd79f1adae07cf78a415c733695cb309290843f81b860a570\",\n      \"depends\": [],\n      \"fee\": 1000,\n      \"sigops\": 3,\n      \"txtype\": \"ticket\"\n    }\n  ],\n  \"coinbaseaux\": {\n    \"flags\": \"062f646372642f\"\n  },\n  \"coinbasevalue\": 247524752,\n  \"longpollid\": \"0000005de504d40790bbcccdbe7c693b5bbc0e4871c2d9375625e5248be2f645-1453664716\",\n  \"target\": \"0000006f09000000000000000000000000000000000000000000000000000000\",\n  \"maxtime\": 1453671916,\n  \"mintime\": 1453664454,\n  \"mutable\": [\n    \"time\",\n    \"transactions/add\",\n    \"prevblock\",\n    \"coinbase/append\"\n  ],\n  \"noncerange\": \"00000000ffffffff\",\n  \"capabilities\": [\n    \"proposal\"\n  ]\n}  Mining is performed by incrementing the nonce until the block\nheader is below the target. ExtraData is allowed to be used as an\nextra nonce for fast hashing devices like ASICs, but a soft fork\nmay change this at some point (to allow it to be used for other\nconsensus data structures).",
            "title": "Mining details"
        },
        {
            "location": "/advanced/blockchain-parameters/",
            "text": "Blockchain Parameters\n\u00b6\n\n\n\n\nBlockchain parameters\n\u00b6\n\n\n\n\n\n\n\n\nParameter\n\n\nValue\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nMaximum block size\n\n\n393,216\n\n\nThe maximum size of a block in bytes.\n\n\n\n\n\n\nInitial block reward\n\n\n31.19582664\n\n\nThe initial reward in DCR for mining a block.\n\n\n\n\n\n\nBlock reward multiplier\n\n\n100/101\n\n\nThe block reward is multiplied by this whenever the block price changes. Basically what that means is that every reward cycle (see below) the block reward given for mining a block is reduced by approximately 1%.\n\n\n\n\n\n\nBlock reward change\n\n\n6,144 blocks\n\n\nThe number of blocks between block reward changes. This occurs approximately every 3 weeks. Coolsnady uses a more frequent change cycle (about 3 weeks compared to Bitcoins 4 years), but the magnitude of the change is much less (about 1% per cycle whereas Bitcoin is 50%). This is designed to reduce the shock in markets when a change occurs.\n\n\n\n\n\n\nBlock reward share\n\n\n60/30/10\n\n\nThe reward for a block is split between miners and the Coolsnady development team as follows: PoW miners get 60% of the reward to reimburse them for electricity and hardware expenses. PoS miners get 6% of the reward each (30% for 5 votes) \n. This encourages people to hold their coins and invest in the Coolsnady network. The development team receives 10% to help ensure the future of Coolsnady by funding ongoing development.\n\n\n\n\n\n\n\n\n\n\nPoS network parameters\n\u00b6\n\n\n\n\n\n\n\n\nParameter\n\n\nValue\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nMinimumStakeDiff\n\n\n2\n\n\nThe minimum price for a stake ticket.\n\n\n\n\n\n\nTicketPoolSize\n\n\n8,192\n\n\nThis is multiplied by TicketsPerBlock to get the desired voting pool size (40,960).\n\n\n\n\n\n\nTicketsPerBlock\n\n\n5\n\n\nThis many tickets will be chosen to vote each block.\n\n\n\n\n\n\nTicketMaturity\n\n\n256\n\n\nTime in blocks (about a day) until a ticket is able to vote after being purchased.\n\n\n\n\n\n\nTicketExpiry\n\n\n40,960\n\n\nTickets that haven\u2019t voted after this many blocks will be revoked (about 142 days).\n\n\n\n\n\n\nCoinbaseMaturity\n\n\n256\n\n\nThe number of blocks required before newly mined coins can be spent.\n\n\n\n\n\n\nSStxChangeMaturity\n\n\n1\n\n\nAfter voting, this many blocks must pass for stake and reward to return to PoS miners.\n\n\n\n\n\n\nTicketPoolSizeWeight\n\n\n4\n\n\nTickets will not change price up or down by more than this multiplier in one update.\n\n\n\n\n\n\nStakeDiffAlpha\n\n\n1\n\n\nThis is the stake difficulty EMA calculation alpha (smoothing) value. It is different from a normal EMA alpha. Closer to 1 \u2013> smoother.\n\n\n\n\n\n\nStakeDiffWindowSize\n\n\n144\n\n\nThe number of blocks in a window. Averaged per window, used below.\n\n\n\n\n\n\nStakeDiffWindows\n\n\n20\n\n\nAn exponential moving average over this many windows is used to calculate stake cost.\n\n\n\n\n\n\nMaxFreshStakePerBlock\n\n\n20\n\n\nThis many new tickets will be added from the mempool to the voting pool each block.\n\n\n\n\n\n\nStakeEnabledHeight\n\n\n256 + 256\n\n\nHistoric. This is the height in which the first ticket could possibly mature. Since coins were locked until block 256, no tickets could be purchased until then. After that, there was another 256 blocks before they matured.\n\n\n\n\n\n\nStakeValidationHeight\n\n\n4,096\n\n\nHistoric. Stake mining did not occur before this block.\n\n\n\n\n\n\nStakeBaseSigScript\n\n\n[]byte{0x00, 0x00}\n\n\nThis is the consensus stakebase signature script for all votes on the network. This isn\u2019t signed in any way, so without forcing it to be this value, miners/daemons could freely change it. Ensures the block is on the right network.",
            "title": "Blockchain Parameters"
        },
        {
            "location": "/advanced/blockchain-parameters/#blockchain-parameters",
            "text": "",
            "title": " Blockchain Parameters"
        },
        {
            "location": "/advanced/blockchain-parameters/#blockchain-parameters_1",
            "text": "Parameter  Value  Description      Maximum block size  393,216  The maximum size of a block in bytes.    Initial block reward  31.19582664  The initial reward in DCR for mining a block.    Block reward multiplier  100/101  The block reward is multiplied by this whenever the block price changes. Basically what that means is that every reward cycle (see below) the block reward given for mining a block is reduced by approximately 1%.    Block reward change  6,144 blocks  The number of blocks between block reward changes. This occurs approximately every 3 weeks. Coolsnady uses a more frequent change cycle (about 3 weeks compared to Bitcoins 4 years), but the magnitude of the change is much less (about 1% per cycle whereas Bitcoin is 50%). This is designed to reduce the shock in markets when a change occurs.    Block reward share  60/30/10  The reward for a block is split between miners and the Coolsnady development team as follows: PoW miners get 60% of the reward to reimburse them for electricity and hardware expenses. PoS miners get 6% of the reward each (30% for 5 votes)  . This encourages people to hold their coins and invest in the Coolsnady network. The development team receives 10% to help ensure the future of Coolsnady by funding ongoing development.",
            "title": "Blockchain parameters"
        },
        {
            "location": "/advanced/blockchain-parameters/#pos-network-parameters",
            "text": "Parameter  Value  Description      MinimumStakeDiff  2  The minimum price for a stake ticket.    TicketPoolSize  8,192  This is multiplied by TicketsPerBlock to get the desired voting pool size (40,960).    TicketsPerBlock  5  This many tickets will be chosen to vote each block.    TicketMaturity  256  Time in blocks (about a day) until a ticket is able to vote after being purchased.    TicketExpiry  40,960  Tickets that haven\u2019t voted after this many blocks will be revoked (about 142 days).    CoinbaseMaturity  256  The number of blocks required before newly mined coins can be spent.    SStxChangeMaturity  1  After voting, this many blocks must pass for stake and reward to return to PoS miners.    TicketPoolSizeWeight  4  Tickets will not change price up or down by more than this multiplier in one update.    StakeDiffAlpha  1  This is the stake difficulty EMA calculation alpha (smoothing) value. It is different from a normal EMA alpha. Closer to 1 \u2013> smoother.    StakeDiffWindowSize  144  The number of blocks in a window. Averaged per window, used below.    StakeDiffWindows  20  An exponential moving average over this many windows is used to calculate stake cost.    MaxFreshStakePerBlock  20  This many new tickets will be added from the mempool to the voting pool each block.    StakeEnabledHeight  256 + 256  Historic. This is the height in which the first ticket could possibly mature. Since coins were locked until block 256, no tickets could be purchased until then. After that, there was another 256 blocks before they matured.    StakeValidationHeight  4,096  Historic. Stake mining did not occur before this block.    StakeBaseSigScript  []byte{0x00, 0x00}  This is the consensus stakebase signature script for all votes on the network. This isn\u2019t signed in any way, so without forcing it to be this value, miners/daemons could freely change it. Ensures the block is on the right network.",
            "title": "PoS network parameters"
        },
        {
            "location": "/advanced/transaction-details/",
            "text": "# \n Transaction Details\n\n\n\n\nCoolsnady transactions are transfers of HC that exist within blocks. Transactions are comprised primarily of inputs and outputs, though they have a few other fields of data as well. \n\n\nTransaction Format\n\u00b6\n\n\n\n\n\n\n\n\nField\n\n\nDescription\n\n\nSize\n\n\n\n\n\n\n\n\n\n\nVersion\n\n\nTransaction version. This number is used to signify how the transaction should be interpreted\n\n\n4 bytes\n\n\n\n\n\n\nInput count\n\n\nThe number of inputs in the transaction encoded as a variable-length integer\n\n\n1-9 bytes\n\n\n\n\n\n\nInputs\n\n\nSerialized list of all the transaction\u2019s inputs\n\n\nVariable\n\n\n\n\n\n\nOutput count\n\n\nThe number of outputs in the transaction encoded as a variable-length integer\n\n\n1-9 bytes\n\n\n\n\n\n\nOutputs\n\n\nSerialized list of all the transaction\u2019s outputs\n\n\nVariable\n\n\n\n\n\n\nLock time\n\n\nThe time when a transaction can be spent. (usually zero, in which case it has no effect)\n\n\n4 bytes\n\n\n\n\n\n\nExpiry\n\n\nThe block height at which the transaction expires and is no longer valid\n\n\n4 bytes\n\n\n\n\n\n\n\n\nInputs\n\u00b6\n\n\nInputs spend previously-made outputs. There are two types of transaction inputs: Witness and non-witness.\n\n\nNon-Witness Inputs\n\u00b6\n\n\nA non-witness transaction input is a reference to an unspent output and a sequence number. A reference to an unspent output is called an \u201coutpoint.\u201d Outpoints have three fields:\n\n\n\n\n\n\n\n\nField\n\n\nDescription\n\n\nSize\n\n\n\n\n\n\n\n\n\n\nTransaction hash\n\n\nThe hash of the transaction which contains the output being spent\n\n\n32 bytes\n\n\n\n\n\n\nOutput index\n\n\nThe index of the output being spent\n\n\n4 bytes\n\n\n\n\n\n\nTree\n\n\nWhich tree the output being spent is in. This is required because there is more than one tree used to locate transactions in a block.\n\n\n1 byte\n\n\n\n\n\n\n\n\nIn addition to an outpoint, non-witness inputs contain a sequence number. This number has more historical significance than relevant usage; however, its most relevant purpose is to enable \u201clocking\u201d of payments so that they cannot be redeemed until a certain time.\n\n\nWitness Inputs\n\u00b6\n\n\nA witness transaction input contains the data necessary to prove that an output can be spent. Witness inputs contain four fields of data:\n\n\n\n\n\n\n\n\nField\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nValue\n\n\nThe amount of coins that the output being spent transfers.\n\n\n\n\n\n\nBlock height\n\n\nThe height of the block containing the transaction in which the output being spent is located.\n\n\n\n\n\n\nBlock index\n\n\nThe index of the transaction in which the output being spent is located.\n\n\n\n\n\n\nSignature script\n\n\nThe script that satisfies the requirements of the script in the output being spent.\n\n\n\n\n\n\n\n\nOutputs\n\u00b6\n\n\nOutputs are transfers of HC that can be spent by inputs. Outputs always have three fields of data:\n\n\n\n\n\n\n\n\nField\n\n\nDescription\n\n\nSize\n\n\n\n\n\n\n\n\n\n\nValue\n\n\nThe amount of HC being sent by the output.\n\n\n8 bytes\n\n\n\n\n\n\nVersion\n\n\nThe version of the output. This number is used to signify how the output should be interpreted.\n\n\n2 bytes\n\n\n\n\n\n\nPublic key script\n\n\nThe script that must be satisfied to spend the output\n\n\nVariable\n\n\n\n\n\n\n\n\n\n\nSerialization\n\u00b6\n\n\nThe format displayed above is not the format that transactions are sent and received in. When sending or receiving transactions, they can be serialized in a few ways. The way that a transaction should be deserialized can be determined from its version. Transaction versions occupy four bytes, but those four bytes are actually used to store two separate values. The first two bytes of a transaction\u2019s version denote its actual version number. The second two bytes denote its serialization format.\n\n\nSerialization Formats\n\u00b6\n\n\nWhen serializing, there are two main parts of a transaction: Its \u201cprefix\u201d and its witness data.\nThe transaction prefix is comprised of:\n\n\n\n\nInputs (without any witness data)\n\n\nOutputs\n\n\nLock time\n\n\nExpiry\n\n\n\n\nThe witness data of a transaction involves only its inputs. The included data fields of its inputs depend on the specific serialization format. This format can be any one of the following:\n\n\n\n\n0 (Full serialization)\n - The transaction\u2019s prefix is located immediately before its witness data.\n\n\n1 (No witness)\n - The transaction\u2019s prefix is the only data present.\n\n\n2 (Only witness)\n - The transaction\u2019s witness data is the only data present. For each input, this includes its value, block height, block index, and signature script.\n\n\n3 (Witness signing)\n - The transaction\u2019s witness data is the only data present, and is serialized for signing purposes. For each input, this includes only its signature script.\n\n\n4 (Witness signing with value)\n - The transaction\u2019s witness data is the only data present, and is serialized for signing purposes. Unlike the Witness signing format, this format includes the value of each input before its signature script.",
            "title": "Transaction Details"
        },
        {
            "location": "/advanced/transaction-details/#transaction-format",
            "text": "Field  Description  Size      Version  Transaction version. This number is used to signify how the transaction should be interpreted  4 bytes    Input count  The number of inputs in the transaction encoded as a variable-length integer  1-9 bytes    Inputs  Serialized list of all the transaction\u2019s inputs  Variable    Output count  The number of outputs in the transaction encoded as a variable-length integer  1-9 bytes    Outputs  Serialized list of all the transaction\u2019s outputs  Variable    Lock time  The time when a transaction can be spent. (usually zero, in which case it has no effect)  4 bytes    Expiry  The block height at which the transaction expires and is no longer valid  4 bytes",
            "title": "Transaction Format"
        },
        {
            "location": "/advanced/transaction-details/#inputs",
            "text": "Inputs spend previously-made outputs. There are two types of transaction inputs: Witness and non-witness.",
            "title": "Inputs"
        },
        {
            "location": "/advanced/transaction-details/#non-witness-inputs",
            "text": "A non-witness transaction input is a reference to an unspent output and a sequence number. A reference to an unspent output is called an \u201coutpoint.\u201d Outpoints have three fields:     Field  Description  Size      Transaction hash  The hash of the transaction which contains the output being spent  32 bytes    Output index  The index of the output being spent  4 bytes    Tree  Which tree the output being spent is in. This is required because there is more than one tree used to locate transactions in a block.  1 byte     In addition to an outpoint, non-witness inputs contain a sequence number. This number has more historical significance than relevant usage; however, its most relevant purpose is to enable \u201clocking\u201d of payments so that they cannot be redeemed until a certain time.",
            "title": "Non-Witness Inputs"
        },
        {
            "location": "/advanced/transaction-details/#witness-inputs",
            "text": "A witness transaction input contains the data necessary to prove that an output can be spent. Witness inputs contain four fields of data:     Field  Description      Value  The amount of coins that the output being spent transfers.    Block height  The height of the block containing the transaction in which the output being spent is located.    Block index  The index of the transaction in which the output being spent is located.    Signature script  The script that satisfies the requirements of the script in the output being spent.",
            "title": "Witness Inputs"
        },
        {
            "location": "/advanced/transaction-details/#outputs",
            "text": "Outputs are transfers of HC that can be spent by inputs. Outputs always have three fields of data:     Field  Description  Size      Value  The amount of HC being sent by the output.  8 bytes    Version  The version of the output. This number is used to signify how the output should be interpreted.  2 bytes    Public key script  The script that must be satisfied to spend the output  Variable",
            "title": "Outputs"
        },
        {
            "location": "/advanced/transaction-details/#serialization",
            "text": "The format displayed above is not the format that transactions are sent and received in. When sending or receiving transactions, they can be serialized in a few ways. The way that a transaction should be deserialized can be determined from its version. Transaction versions occupy four bytes, but those four bytes are actually used to store two separate values. The first two bytes of a transaction\u2019s version denote its actual version number. The second two bytes denote its serialization format.",
            "title": "Serialization"
        },
        {
            "location": "/advanced/transaction-details/#serialization-formats",
            "text": "When serializing, there are two main parts of a transaction: Its \u201cprefix\u201d and its witness data.\nThe transaction prefix is comprised of:   Inputs (without any witness data)  Outputs  Lock time  Expiry   The witness data of a transaction involves only its inputs. The included data fields of its inputs depend on the specific serialization format. This format can be any one of the following:   0 (Full serialization)  - The transaction\u2019s prefix is located immediately before its witness data.  1 (No witness)  - The transaction\u2019s prefix is the only data present.  2 (Only witness)  - The transaction\u2019s witness data is the only data present. For each input, this includes its value, block height, block index, and signature script.  3 (Witness signing)  - The transaction\u2019s witness data is the only data present, and is serialized for signing purposes. For each input, this includes only its signature script.  4 (Witness signing with value)  - The transaction\u2019s witness data is the only data present, and is serialized for signing purposes. Unlike the Witness signing format, this format includes the value of each input before its signature script.",
            "title": "Serialization Formats"
        },
        {
            "location": "/advanced/verifying-binaries/",
            "text": "Verifying Binaries\n\u00b6\n\n\n\n\nThe official\n\nDecred releases\n have\nsigned hashes that you should check to confirm that they are the same\nbinaries that the developers posted.  This page provides instructions\nfor that.\n\n\nIn order to verify binaries or other signed files from the Decred\nProject, there are a couple pieces of software required:\n\n\n\n\nSHA256 \u2013 Once you download your file(s), you need to check their\n  SHA256 hashes, so you may need to download a tool to do this,\n  depending on your OS.\n\n\nGnuPG or PGP \u2013 This is required to import public keys and verify\n  signatures. Examples below use GnuPG.\n\n\n\n\nThe following instructions should work as is on Linux/UNIX/macOS.\nWindows users will have to install sha256 and gnupg themselves and use\nthe windows cmd terminal to do this.  The steps to verify the binaries\nare as follows:\n\n\n\n\nStep One\n\n\n\n\nDownload the file manifest, the signature for the file manifest, and\nthe zip/tarball for your OS from \nhere\n. Obtain the SHA256 value for the\nzip/tarball for your OS and check that it matches the value in the\nfile manifest, e.g. for 64-bit Linux:\n\n\n$ sha256sum linux-amd64-20160127-02.tar.gz\n8ffaa268a329890ebf0f96b3cd1bc9f69359e431edbb95d89cec5a605108574b linux-amd64-20160127-02.tar.gz\n\n\n\n\n\n\nStep Two\n\n\n\n\nCompare the value you got in Step One to the value for the file in the\nmanifest file.\n\n\n\n\nStep Three\n\n\n\n\nImport the Decred Release Signing Key in GnuPG.  You will only need to\ndo this a single time and can skip this when verifying later releases\non the same computer.\n\n\n$ gpg --keyserver pgp.mit.edu --recv-keys 0x518A031D\ngpg: requesting key 518A031D from hkp server pgp.mit.edu\ngpg: /home/user/.gnupg/trustdb.gpg: trustdb created\ngpg: key 7608AF04: public key \"Decred Release <release@decred.org>\" imported\ngpg: Total number processed: 1\ngpg: imported: 1 (RSA: 1)\n\n\n\n\n\n\nStep Four\n\n\n\n\nVerify the signature for the file manifest is valid and created by the\nDecred Release Signing Key:\n\n\n$ gpg --verify manifest-20160127-02.txt.asc\ngpg: assuming signed data in `manifest-20160127-02.txt'\ngpg: Signature made Wed 27 Jan 2016 08:56:59 PM UTC using RSA key ID 518A031D\ngpg: Good signature from \"Decred Release <release@decred.org>\"\ngpg: WARNING: This key is not certified with a trusted signature!\ngpg: There is no indication that the signature belongs to the owner.\nPrimary key fingerprint: FD13 B683 5E24 8FAF 4BD1 838D 6DF6 34AA 7608 AF04\nSubkey fingerprint: F516 ADB7 A069 852C 7C28 A02D 6D89 7EDF 518A 031D\n\n\n\n\nThe zip or tarball with binaries for your platform is now verified and\nyou can be confident they were generated by the Decred Project.",
            "title": "Verifying Binaries"
        },
        {
            "location": "/advanced/verifying-binaries/#verifying-binaries",
            "text": "The official Decred releases  have\nsigned hashes that you should check to confirm that they are the same\nbinaries that the developers posted.  This page provides instructions\nfor that.  In order to verify binaries or other signed files from the Decred\nProject, there are a couple pieces of software required:   SHA256 \u2013 Once you download your file(s), you need to check their\n  SHA256 hashes, so you may need to download a tool to do this,\n  depending on your OS.  GnuPG or PGP \u2013 This is required to import public keys and verify\n  signatures. Examples below use GnuPG.   The following instructions should work as is on Linux/UNIX/macOS.\nWindows users will have to install sha256 and gnupg themselves and use\nthe windows cmd terminal to do this.  The steps to verify the binaries\nare as follows:   Step One   Download the file manifest, the signature for the file manifest, and\nthe zip/tarball for your OS from  here . Obtain the SHA256 value for the\nzip/tarball for your OS and check that it matches the value in the\nfile manifest, e.g. for 64-bit Linux:  $ sha256sum linux-amd64-20160127-02.tar.gz\n8ffaa268a329890ebf0f96b3cd1bc9f69359e431edbb95d89cec5a605108574b linux-amd64-20160127-02.tar.gz   Step Two   Compare the value you got in Step One to the value for the file in the\nmanifest file.   Step Three   Import the Decred Release Signing Key in GnuPG.  You will only need to\ndo this a single time and can skip this when verifying later releases\non the same computer.  $ gpg --keyserver pgp.mit.edu --recv-keys 0x518A031D\ngpg: requesting key 518A031D from hkp server pgp.mit.edu\ngpg: /home/user/.gnupg/trustdb.gpg: trustdb created\ngpg: key 7608AF04: public key \"Decred Release <release@decred.org>\" imported\ngpg: Total number processed: 1\ngpg: imported: 1 (RSA: 1)   Step Four   Verify the signature for the file manifest is valid and created by the\nDecred Release Signing Key:  $ gpg --verify manifest-20160127-02.txt.asc\ngpg: assuming signed data in `manifest-20160127-02.txt'\ngpg: Signature made Wed 27 Jan 2016 08:56:59 PM UTC using RSA key ID 518A031D\ngpg: Good signature from \"Decred Release <release@decred.org>\"\ngpg: WARNING: This key is not certified with a trusted signature!\ngpg: There is no indication that the signature belongs to the owner.\nPrimary key fingerprint: FD13 B683 5E24 8FAF 4BD1 838D 6DF6 34AA 7608 AF04\nSubkey fingerprint: F516 ADB7 A069 852C 7C28 A02D 6D89 7EDF 518A 031D  The zip or tarball with binaries for your platform is now verified and\nyou can be confident they were generated by the Decred Project.",
            "title": " Verifying Binaries"
        },
        {
            "location": "/advanced/inflation/",
            "text": "Inflation\n\u00b6\n\n\n\n\nNew blocks are discovered by the proof-of-work miners roughly every 5 minutes, and each time this occurs new decred are created.  This block reward is split three ways:\n\n\n\n\n60% goes to the PoW miner who found the block\n\n\n30% goes to the PoS voters on that block (6% to each of the 5 voters)\n\n\n10% goes towards the development subsidy\n\n\n\n\nThe block reward started at 31.19582664 and it adjusts every 6,144 blocks (approximately 21.33 days) by reducing by a factor of 100/101\n1\n.\n\n\nIf a block includes less than 5 PoS votes there will be a fraction of the block reward which is not allocated to anybody. As a result, it is only possible to calculate an upper limit for the total number of decred which will ever be created.\n\n\n\n\nThe last block reward will be created in September 2120. The upper limit on the total supply of Decred is 20,999,999.99800912 coins\n2\n.\n\n\n\n\nThe following chart shows an estimate of the coin supply growth over time.\n\n\n\n\nThe table below shows the estimated block reward and estimated total supply of Decred up to block 2,457,600 in 2039. Note that the total supply of DCR at block 1 is 1,680,000 due to the \npremine\n. PoS voting started at block 4,096\n3\n therefore PoS rewards were not generated before that height.\n\n\n\n\n\n\n\n\nBlock height\n\n\nEstimated date\n\n\nBlock reward (DCR)\n\n\nPoW (DCR)\n\n\nPoS vote (DCR)\n\n\nDev subsidy (DCR)\n\n\nTotal DCR supply\n\n\n\n\n\n\n\n\n\n\n1\n\n\nFebruary 8, 2016\n\n\n1,680,000.00\n\n\n1,680,000.00\n\n\n0.00\n\n\n0.00\n\n\n1,680,000\n\n\n\n\n\n\n2\n\n\nFebruary 8, 2016\n\n\n21.84\n\n\n18.72\n\n\n0.00\n\n\n3.12\n\n\n1,680,022\n\n\n\n\n\n\n4,096\n\n\nFebruary 22, 2016\n\n\n31.20\n\n\n18.72\n\n\n1.87\n\n\n3.12\n\n\n1,769,432\n\n\n\n\n\n\n6,144\n\n\nMarch 1, 2016\n\n\n30.89\n\n\n18.53\n\n\n1.85\n\n\n3.09\n\n\n1,833,321\n\n\n\n\n\n\n12,288\n\n\nMarch 22, 2016\n\n\n30.58\n\n\n18.35\n\n\n1.83\n\n\n3.06\n\n\n2,023,090\n\n\n\n\n\n\n18,432\n\n\nApril 12, 2016\n\n\n30.28\n\n\n18.17\n\n\n1.82\n\n\n3.03\n\n\n2,210,980\n\n\n\n\n\n\n24,576\n\n\nMay 4, 2016\n\n\n29.98\n\n\n17.99\n\n\n1.80\n\n\n3.00\n\n\n2,397,010\n\n\n\n\n\n\n30,720\n\n\nMay 25, 2016\n\n\n29.68\n\n\n17.81\n\n\n1.78\n\n\n2.97\n\n\n2,581,198\n\n\n\n\n\n\n36,864\n\n\nJune 15, 2016\n\n\n29.39\n\n\n17.63\n\n\n1.76\n\n\n2.94\n\n\n2,763,563\n\n\n\n\n\n\n43,008\n\n\nJuly 7, 2016\n\n\n29.10\n\n\n17.46\n\n\n1.75\n\n\n2.91\n\n\n2,944,122\n\n\n\n\n\n\n49,152\n\n\nJuly 28, 2016\n\n\n28.81\n\n\n17.29\n\n\n1.73\n\n\n2.88\n\n\n3,122,893\n\n\n\n\n\n\n55,296\n\n\nAugust 18, 2016\n\n\n28.52\n\n\n17.11\n\n\n1.71\n\n\n2.85\n\n\n3,299,894\n\n\n\n\n\n\n61,440\n\n\nSeptember 9, 2016\n\n\n28.24\n\n\n16.94\n\n\n1.69\n\n\n2.82\n\n\n3,475,143\n\n\n\n\n\n\n67,584\n\n\nSeptember 30, 2016\n\n\n27.96\n\n\n16.78\n\n\n1.68\n\n\n2.80\n\n\n3,648,656\n\n\n\n\n\n\n73,728\n\n\nOctober 21, 2016\n\n\n27.68\n\n\n16.61\n\n\n1.66\n\n\n2.77\n\n\n3,820,452\n\n\n\n\n\n\n79,872\n\n\nNovember 12, 2016\n\n\n27.41\n\n\n16.45\n\n\n1.64\n\n\n2.74\n\n\n3,990,546\n\n\n\n\n\n\n86,016\n\n\nDecember 3, 2016\n\n\n27.14\n\n\n16.28\n\n\n1.63\n\n\n2.71\n\n\n4,158,957\n\n\n\n\n\n\n92,160\n\n\nDecember 24, 2016\n\n\n26.87\n\n\n16.12\n\n\n1.61\n\n\n2.69\n\n\n4,325,700\n\n\n\n\n\n\n98,304\n\n\nJanuary 15, 2017\n\n\n26.60\n\n\n15.96\n\n\n1.60\n\n\n2.66\n\n\n4,490,792\n\n\n\n\n\n\n104,448\n\n\nFebruary 5, 2017\n\n\n26.34\n\n\n15.80\n\n\n1.58\n\n\n2.63\n\n\n4,654,249\n\n\n\n\n\n\n110,592\n\n\nFebruary 26, 2017\n\n\n26.08\n\n\n15.65\n\n\n1.56\n\n\n2.61\n\n\n4,816,089\n\n\n\n\n\n\n116,736\n\n\nMarch 20, 2017\n\n\n25.82\n\n\n15.49\n\n\n1.55\n\n\n2.58\n\n\n4,976,325\n\n\n\n\n\n\n122,880\n\n\nApril 10, 2017\n\n\n25.57\n\n\n15.34\n\n\n1.53\n\n\n2.56\n\n\n5,134,976\n\n\n\n\n\n\n129,024\n\n\nMay 1, 2017\n\n\n25.31\n\n\n15.19\n\n\n1.52\n\n\n2.53\n\n\n5,292,055\n\n\n\n\n\n\n135,168\n\n\nMay 23, 2017\n\n\n25.06\n\n\n15.04\n\n\n1.50\n\n\n2.51\n\n\n5,447,579\n\n\n\n\n\n\n141,312\n\n\nJune 13, 2017\n\n\n24.81\n\n\n14.89\n\n\n1.49\n\n\n2.48\n\n\n5,601,564\n\n\n\n\n\n\n147,456\n\n\nJuly 4, 2017\n\n\n24.57\n\n\n14.74\n\n\n1.47\n\n\n2.46\n\n\n5,754,024\n\n\n\n\n\n\n153,600\n\n\nJuly 26, 2017\n\n\n24.33\n\n\n14.60\n\n\n1.46\n\n\n2.43\n\n\n5,904,974\n\n\n\n\n\n\n159,744\n\n\nAugust 16, 2017\n\n\n24.08\n\n\n14.45\n\n\n1.45\n\n\n2.41\n\n\n6,054,430\n\n\n\n\n\n\n165,888\n\n\nSeptember 6, 2017\n\n\n23.85\n\n\n14.31\n\n\n1.43\n\n\n2.38\n\n\n6,202,406\n\n\n\n\n\n\n172,032\n\n\nSeptember 28, 2017\n\n\n23.61\n\n\n14.17\n\n\n1.42\n\n\n2.36\n\n\n6,348,917\n\n\n\n\n\n\n178,176\n\n\nOctober 19, 2017\n\n\n23.38\n\n\n14.03\n\n\n1.40\n\n\n2.34\n\n\n6,493,977\n\n\n\n\n\n\n184,320\n\n\nNovember 9, 2017\n\n\n23.14\n\n\n13.89\n\n\n1.39\n\n\n2.31\n\n\n6,637,601\n\n\n\n\n\n\n190,464\n\n\nDecember 1, 2017\n\n\n22.92\n\n\n13.75\n\n\n1.37\n\n\n2.29\n\n\n6,779,803\n\n\n\n\n\n\n196,608\n\n\nDecember 22, 2017\n\n\n22.69\n\n\n13.61\n\n\n1.36\n\n\n2.27\n\n\n6,920,597\n\n\n\n\n\n\n202,752\n\n\nJanuary 12, 2018\n\n\n22.46\n\n\n13.48\n\n\n1.35\n\n\n2.25\n\n\n7,059,997\n\n\n\n\n\n\n208,896\n\n\nFebruary 3, 2018\n\n\n22.24\n\n\n13.35\n\n\n1.33\n\n\n2.22\n\n\n7,198,017\n\n\n\n\n\n\n215,040\n\n\nFebruary 24, 2018\n\n\n22.02\n\n\n13.21\n\n\n1.32\n\n\n2.20\n\n\n7,334,670\n\n\n\n\n\n\n221,184\n\n\nMarch 17, 2018\n\n\n21.80\n\n\n13.08\n\n\n1.31\n\n\n2.18\n\n\n7,469,971\n\n\n\n\n\n\n227,328\n\n\nApril 8, 2018\n\n\n21.59\n\n\n12.95\n\n\n1.30\n\n\n2.16\n\n\n7,603,932\n\n\n\n\n\n\n233,472\n\n\nApril 29, 2018\n\n\n21.37\n\n\n12.82\n\n\n1.28\n\n\n2.14\n\n\n7,736,566\n\n\n\n\n\n\n239,616\n\n\nMay 20, 2018\n\n\n21.16\n\n\n12.70\n\n\n1.27\n\n\n2.12\n\n\n7,867,887\n\n\n\n\n\n\n245,760\n\n\nJune 11, 2018\n\n\n20.95\n\n\n12.57\n\n\n1.26\n\n\n2.10\n\n\n7,997,908\n\n\n\n\n\n\n251,904\n\n\nJuly 2, 2018\n\n\n20.75\n\n\n12.45\n\n\n1.24\n\n\n2.07\n\n\n8,126,642\n\n\n\n\n\n\n258,048\n\n\nJuly 23, 2018\n\n\n20.54\n\n\n12.32\n\n\n1.23\n\n\n2.05\n\n\n8,254,101\n\n\n\n\n\n\n264,192\n\n\nAugust 14, 2018\n\n\n20.34\n\n\n12.20\n\n\n1.22\n\n\n2.03\n\n\n8,380,298\n\n\n\n\n\n\n270,336\n\n\nSeptember 4, 2018\n\n\n20.14\n\n\n12.08\n\n\n1.21\n\n\n2.01\n\n\n8,505,245\n\n\n\n\n\n\n276,480\n\n\nSeptember 25, 2018\n\n\n19.94\n\n\n11.96\n\n\n1.20\n\n\n1.99\n\n\n8,628,956\n\n\n\n\n\n\n282,624\n\n\nOctober 17, 2018\n\n\n19.74\n\n\n11.84\n\n\n1.18\n\n\n1.97\n\n\n8,751,442\n\n\n\n\n\n\n288,768\n\n\nNovember 7, 2018\n\n\n19.54\n\n\n11.73\n\n\n1.17\n\n\n1.95\n\n\n8,872,715\n\n\n\n\n\n\n294,912\n\n\nNovember 28, 2018\n\n\n19.35\n\n\n11.61\n\n\n1.16\n\n\n1.93\n\n\n8,992,787\n\n\n\n\n\n\n301,056\n\n\nDecember 20, 2018\n\n\n19.16\n\n\n11.49\n\n\n1.15\n\n\n1.92\n\n\n9,111,670\n\n\n\n\n\n\n307,200\n\n\nJanuary 10, 2019\n\n\n18.97\n\n\n11.38\n\n\n1.14\n\n\n1.90\n\n\n9,229,376\n\n\n\n\n\n\n313,344\n\n\nJanuary 31, 2019\n\n\n18.78\n\n\n11.27\n\n\n1.13\n\n\n1.88\n\n\n9,345,917\n\n\n\n\n\n\n319,488\n\n\nFebruary 22, 2019\n\n\n18.59\n\n\n11.16\n\n\n1.12\n\n\n1.86\n\n\n9,461,304\n\n\n\n\n\n\n325,632\n\n\nMarch 15, 2019\n\n\n18.41\n\n\n11.05\n\n\n1.10\n\n\n1.84\n\n\n9,575,549\n\n\n\n\n\n\n331,776\n\n\nApril 5, 2019\n\n\n18.23\n\n\n10.94\n\n\n1.09\n\n\n1.82\n\n\n9,688,662\n\n\n\n\n\n\n337,920\n\n\nApril 27, 2019\n\n\n18.05\n\n\n10.83\n\n\n1.08\n\n\n1.80\n\n\n9,800,656\n\n\n\n\n\n\n344,064\n\n\nMay 18, 2019\n\n\n17.87\n\n\n10.72\n\n\n1.07\n\n\n1.79\n\n\n9,911,540\n\n\n\n\n\n\n350,208\n\n\nJune 8, 2019\n\n\n17.69\n\n\n10.62\n\n\n1.06\n\n\n1.77\n\n\n10,021,327\n\n\n\n\n\n\n356,352\n\n\nJune 30, 2019\n\n\n17.52\n\n\n10.51\n\n\n1.05\n\n\n1.75\n\n\n10,130,027\n\n\n\n\n\n\n362,496\n\n\nJuly 21, 2019\n\n\n17.34\n\n\n10.41\n\n\n1.04\n\n\n1.73\n\n\n10,237,651\n\n\n\n\n\n\n368,640\n\n\nAugust 11, 2019\n\n\n17.17\n\n\n10.30\n\n\n1.03\n\n\n1.72\n\n\n10,344,209\n\n\n\n\n\n\n374,784\n\n\nSeptember 2, 2019\n\n\n17.00\n\n\n10.20\n\n\n1.02\n\n\n1.70\n\n\n10,449,711\n\n\n\n\n\n\n380,928\n\n\nSeptember 23, 2019\n\n\n16.83\n\n\n10.10\n\n\n1.01\n\n\n1.68\n\n\n10,554,170\n\n\n\n\n\n\n387,072\n\n\nOctober 14, 2019\n\n\n16.67\n\n\n10.00\n\n\n1.00\n\n\n1.67\n\n\n10,657,594\n\n\n\n\n\n\n393,216\n\n\nNovember 5, 2019\n\n\n16.50\n\n\n9.90\n\n\n0.99\n\n\n1.65\n\n\n10,759,994\n\n\n\n\n\n\n399,360\n\n\nNovember 26, 2019\n\n\n16.34\n\n\n9.80\n\n\n0.98\n\n\n1.63\n\n\n10,861,380\n\n\n\n\n\n\n405,504\n\n\nDecember 17, 2019\n\n\n16.18\n\n\n9.71\n\n\n0.97\n\n\n1.62\n\n\n10,961,763\n\n\n\n\n\n\n411,648\n\n\nJanuary 8, 2020\n\n\n16.02\n\n\n9.61\n\n\n0.96\n\n\n1.60\n\n\n11,061,151\n\n\n\n\n\n\n417,792\n\n\nJanuary 29, 2020\n\n\n15.86\n\n\n9.51\n\n\n0.95\n\n\n1.59\n\n\n11,159,556\n\n\n\n\n\n\n423,936\n\n\nFebruary 19, 2020\n\n\n15.70\n\n\n9.42\n\n\n0.94\n\n\n1.57\n\n\n11,256,986\n\n\n\n\n\n\n430,080\n\n\nMarch 12, 2020\n\n\n15.55\n\n\n9.33\n\n\n0.93\n\n\n1.55\n\n\n11,353,452\n\n\n\n\n\n\n436,224\n\n\nApril 2, 2020\n\n\n15.39\n\n\n9.23\n\n\n0.92\n\n\n1.54\n\n\n11,448,962\n\n\n\n\n\n\n442,368\n\n\nApril 23, 2020\n\n\n15.24\n\n\n9.14\n\n\n0.91\n\n\n1.52\n\n\n11,543,527\n\n\n\n\n\n\n448,512\n\n\nMay 15, 2020\n\n\n15.09\n\n\n9.05\n\n\n0.91\n\n\n1.51\n\n\n11,637,155\n\n\n\n\n\n\n454,656\n\n\nJune 5, 2020\n\n\n14.94\n\n\n8.96\n\n\n0.90\n\n\n1.49\n\n\n11,729,857\n\n\n\n\n\n\n460,800\n\n\nJune 26, 2020\n\n\n14.79\n\n\n8.87\n\n\n0.89\n\n\n1.48\n\n\n11,821,640\n\n\n\n\n\n\n466,944\n\n\nJuly 18, 2020\n\n\n14.64\n\n\n8.79\n\n\n0.88\n\n\n1.46\n\n\n11,912,515\n\n\n\n\n\n\n473,088\n\n\nAugust 8, 2020\n\n\n14.50\n\n\n8.70\n\n\n0.87\n\n\n1.45\n\n\n12,002,490\n\n\n\n\n\n\n479,232\n\n\nAugust 29, 2020\n\n\n14.36\n\n\n8.61\n\n\n0.86\n\n\n1.44\n\n\n12,091,575\n\n\n\n\n\n\n485,376\n\n\nSeptember 20, 2020\n\n\n14.21\n\n\n8.53\n\n\n0.85\n\n\n1.42\n\n\n12,179,777\n\n\n\n\n\n\n491,520\n\n\nOctober 11, 2020\n\n\n14.07\n\n\n8.44\n\n\n0.84\n\n\n1.41\n\n\n12,267,106\n\n\n\n\n\n\n497,664\n\n\nNovember 1, 2020\n\n\n13.93\n\n\n8.36\n\n\n0.84\n\n\n1.39\n\n\n12,353,570\n\n\n\n\n\n\n503,808\n\n\nNovember 23, 2020\n\n\n13.80\n\n\n8.28\n\n\n0.83\n\n\n1.38\n\n\n12,439,179\n\n\n\n\n\n\n509,952\n\n\nDecember 14, 2020\n\n\n13.66\n\n\n8.20\n\n\n0.82\n\n\n1.37\n\n\n12,523,939\n\n\n\n\n\n\n516,096\n\n\nJanuary 4, 2021\n\n\n13.52\n\n\n8.11\n\n\n0.81\n\n\n1.35\n\n\n12,607,861\n\n\n\n\n\n\n522,240\n\n\nJanuary 26, 2021\n\n\n13.39\n\n\n8.03\n\n\n0.80\n\n\n1.34\n\n\n12,690,951\n\n\n\n\n\n\n528,384\n\n\nFebruary 16, 2021\n\n\n13.26\n\n\n7.95\n\n\n0.80\n\n\n1.33\n\n\n12,773,219\n\n\n\n\n\n\n534,528\n\n\nMarch 9, 2021\n\n\n13.13\n\n\n7.88\n\n\n0.79\n\n\n1.31\n\n\n12,854,673\n\n\n\n\n\n\n540,672\n\n\nMarch 31, 2021\n\n\n13.00\n\n\n7.80\n\n\n0.78\n\n\n1.30\n\n\n12,935,319\n\n\n\n\n\n\n546,816\n\n\nApril 21, 2021\n\n\n12.87\n\n\n7.72\n\n\n0.77\n\n\n1.29\n\n\n13,015,168\n\n\n\n\n\n\n552,960\n\n\nMay 12, 2021\n\n\n12.74\n\n\n7.64\n\n\n0.76\n\n\n1.27\n\n\n13,094,226\n\n\n\n\n\n\n559,104\n\n\nJune 3, 2021\n\n\n12.61\n\n\n7.57\n\n\n0.76\n\n\n1.26\n\n\n13,172,501\n\n\n\n\n\n\n565,248\n\n\nJune 24, 2021\n\n\n12.49\n\n\n7.49\n\n\n0.75\n\n\n1.25\n\n\n13,250,001\n\n\n\n\n\n\n571,392\n\n\nJuly 15, 2021\n\n\n12.37\n\n\n7.42\n\n\n0.74\n\n\n1.24\n\n\n13,326,733\n\n\n\n\n\n\n577,536\n\n\nAugust 6, 2021\n\n\n12.24\n\n\n7.35\n\n\n0.73\n\n\n1.22\n\n\n13,402,706\n\n\n\n\n\n\n583,680\n\n\nAugust 27, 2021\n\n\n12.12\n\n\n7.27\n\n\n0.73\n\n\n1.21\n\n\n13,477,927\n\n\n\n\n\n\n589,824\n\n\nSeptember 17, 2021\n\n\n12.00\n\n\n7.20\n\n\n0.72\n\n\n1.20\n\n\n13,552,403\n\n\n\n\n\n\n595,968\n\n\nOctober 9, 2021\n\n\n11.88\n\n\n7.13\n\n\n0.71\n\n\n1.19\n\n\n13,626,142\n\n\n\n\n\n\n602,112\n\n\nOctober 30, 2021\n\n\n11.77\n\n\n7.06\n\n\n0.71\n\n\n1.18\n\n\n13,699,150\n\n\n\n\n\n\n608,256\n\n\nNovember 20, 2021\n\n\n11.65\n\n\n6.99\n\n\n0.70\n\n\n1.16\n\n\n13,771,436\n\n\n\n\n\n\n614,400\n\n\nDecember 12, 2021\n\n\n11.53\n\n\n6.92\n\n\n0.69\n\n\n1.15\n\n\n13,843,006\n\n\n\n\n\n\n620,544\n\n\nJanuary 2, 2022\n\n\n11.42\n\n\n6.85\n\n\n0.69\n\n\n1.14\n\n\n13,913,867\n\n\n\n\n\n\n626,688\n\n\nJanuary 23, 2022\n\n\n11.31\n\n\n6.78\n\n\n0.68\n\n\n1.13\n\n\n13,984,027\n\n\n\n\n\n\n632,832\n\n\nFebruary 14, 2022\n\n\n11.19\n\n\n6.72\n\n\n0.67\n\n\n1.12\n\n\n14,053,492\n\n\n\n\n\n\n638,976\n\n\nMarch 7, 2022\n\n\n11.08\n\n\n6.65\n\n\n0.67\n\n\n1.11\n\n\n14,122,270\n\n\n\n\n\n\n645,120\n\n\nMarch 28, 2022\n\n\n10.97\n\n\n6.58\n\n\n0.66\n\n\n1.10\n\n\n14,190,366\n\n\n\n\n\n\n651,264\n\n\nApril 19, 2022\n\n\n10.87\n\n\n6.52\n\n\n0.65\n\n\n1.09\n\n\n14,257,788\n\n\n\n\n\n\n657,408\n\n\nMay 10, 2022\n\n\n10.76\n\n\n6.45\n\n\n0.65\n\n\n1.08\n\n\n14,324,543\n\n\n\n\n\n\n663,552\n\n\nMay 31, 2022\n\n\n10.65\n\n\n6.39\n\n\n0.64\n\n\n1.07\n\n\n14,390,637\n\n\n\n\n\n\n669,696\n\n\nJune 22, 2022\n\n\n10.55\n\n\n6.33\n\n\n0.63\n\n\n1.05\n\n\n14,456,076\n\n\n\n\n\n\n675,840\n\n\nJuly 13, 2022\n\n\n10.44\n\n\n6.26\n\n\n0.63\n\n\n1.04\n\n\n14,520,867\n\n\n\n\n\n\n681,984\n\n\nAugust 3, 2022\n\n\n10.34\n\n\n6.20\n\n\n0.62\n\n\n1.03\n\n\n14,585,017\n\n\n\n\n\n\n688,128\n\n\nAugust 25, 2022\n\n\n10.24\n\n\n6.14\n\n\n0.61\n\n\n1.02\n\n\n14,648,532\n\n\n\n\n\n\n694,272\n\n\nSeptember 15, 2022\n\n\n10.13\n\n\n6.08\n\n\n0.61\n\n\n1.01\n\n\n14,711,418\n\n\n\n\n\n\n700,416\n\n\nOctober 6, 2022\n\n\n10.03\n\n\n6.02\n\n\n0.60\n\n\n1.00\n\n\n14,773,681\n\n\n\n\n\n\n706,560\n\n\nOctober 28, 2022\n\n\n9.93\n\n\n5.96\n\n\n0.60\n\n\n0.99\n\n\n14,835,328\n\n\n\n\n\n\n712,704\n\n\nNovember 18, 2022\n\n\n9.84\n\n\n5.90\n\n\n0.59\n\n\n0.98\n\n\n14,896,364\n\n\n\n\n\n\n718,848\n\n\nDecember 9, 2022\n\n\n9.74\n\n\n5.84\n\n\n0.58\n\n\n0.97\n\n\n14,956,796\n\n\n\n\n\n\n724,992\n\n\nDecember 31, 2022\n\n\n9.64\n\n\n5.79\n\n\n0.58\n\n\n0.96\n\n\n15,016,630\n\n\n\n\n\n\n731,136\n\n\nJanuary 21, 2023\n\n\n9.55\n\n\n5.73\n\n\n0.57\n\n\n0.95\n\n\n15,075,871\n\n\n\n\n\n\n737,280\n\n\nFebruary 11, 2023\n\n\n9.45\n\n\n5.67\n\n\n0.57\n\n\n0.95\n\n\n15,134,526\n\n\n\n\n\n\n743,424\n\n\nMarch 5, 2023\n\n\n9.36\n\n\n5.62\n\n\n0.56\n\n\n0.94\n\n\n15,192,600\n\n\n\n\n\n\n749,568\n\n\nMarch 26, 2023\n\n\n9.27\n\n\n5.56\n\n\n0.56\n\n\n0.93\n\n\n15,250,099\n\n\n\n\n\n\n755,712\n\n\nApril 16, 2023\n\n\n9.17\n\n\n5.50\n\n\n0.55\n\n\n0.92\n\n\n15,307,029\n\n\n\n\n\n\n761,856\n\n\nMay 8, 2023\n\n\n9.08\n\n\n5.45\n\n\n0.55\n\n\n0.91\n\n\n15,363,395\n\n\n\n\n\n\n768,000\n\n\nMay 29, 2023\n\n\n8.99\n\n\n5.40\n\n\n0.54\n\n\n0.90\n\n\n15,419,203\n\n\n\n\n\n\n774,144\n\n\nJune 19, 2023\n\n\n8.90\n\n\n5.34\n\n\n0.53\n\n\n0.89\n\n\n15,474,459\n\n\n\n\n\n\n780,288\n\n\nJuly 11, 2023\n\n\n8.82\n\n\n5.29\n\n\n0.53\n\n\n0.88\n\n\n15,529,167\n\n\n\n\n\n\n786,432\n\n\nAugust 1, 2023\n\n\n8.73\n\n\n5.24\n\n\n0.52\n\n\n0.87\n\n\n15,583,334\n\n\n\n\n\n\n792,576\n\n\nAugust 22, 2023\n\n\n8.64\n\n\n5.19\n\n\n0.52\n\n\n0.86\n\n\n15,636,964\n\n\n\n\n\n\n798,720\n\n\nSeptember 13, 2023\n\n\n8.56\n\n\n5.13\n\n\n0.51\n\n\n0.86\n\n\n15,690,064\n\n\n\n\n\n\n804,864\n\n\nOctober 4, 2023\n\n\n8.47\n\n\n5.08\n\n\n0.51\n\n\n0.85\n\n\n15,742,637\n\n\n\n\n\n\n811,008\n\n\nOctober 25, 2023\n\n\n8.39\n\n\n5.03\n\n\n0.50\n\n\n0.84\n\n\n15,794,690\n\n\n\n\n\n\n817,152\n\n\nNovember 16, 2023\n\n\n8.31\n\n\n4.98\n\n\n0.50\n\n\n0.83\n\n\n15,846,228\n\n\n\n\n\n\n823,296\n\n\nDecember 7, 2023\n\n\n8.22\n\n\n4.93\n\n\n0.49\n\n\n0.82\n\n\n15,897,256\n\n\n\n\n\n\n829,440\n\n\nDecember 28, 2023\n\n\n8.14\n\n\n4.88\n\n\n0.49\n\n\n0.81\n\n\n15,947,778\n\n\n\n\n\n\n835,584\n\n\nJanuary 19, 2024\n\n\n8.06\n\n\n4.84\n\n\n0.48\n\n\n0.81\n\n\n15,997,800\n\n\n\n\n\n\n841,728\n\n\nFebruary 9, 2024\n\n\n7.98\n\n\n4.79\n\n\n0.48\n\n\n0.80\n\n\n16,047,327\n\n\n\n\n\n\n847,872\n\n\nMarch 1, 2024\n\n\n7.90\n\n\n4.74\n\n\n0.47\n\n\n0.79\n\n\n16,096,363\n\n\n\n\n\n\n854,016\n\n\nMarch 23, 2024\n\n\n7.82\n\n\n4.69\n\n\n0.47\n\n\n0.78\n\n\n16,144,914\n\n\n\n\n\n\n860,160\n\n\nApril 13, 2024\n\n\n7.75\n\n\n4.65\n\n\n0.46\n\n\n0.77\n\n\n16,192,984\n\n\n\n\n\n\n866,304\n\n\nMay 4, 2024\n\n\n7.67\n\n\n4.60\n\n\n0.46\n\n\n0.77\n\n\n16,240,579\n\n\n\n\n\n\n872,448\n\n\nMay 26, 2024\n\n\n7.59\n\n\n4.56\n\n\n0.46\n\n\n0.76\n\n\n16,287,702\n\n\n\n\n\n\n878,592\n\n\nJune 16, 2024\n\n\n7.52\n\n\n4.51\n\n\n0.45\n\n\n0.75\n\n\n16,334,358\n\n\n\n\n\n\n884,736\n\n\nJuly 7, 2024\n\n\n7.44\n\n\n4.47\n\n\n0.45\n\n\n0.74\n\n\n16,380,553\n\n\n\n\n\n\n890,880\n\n\nJuly 29, 2024\n\n\n7.37\n\n\n4.42\n\n\n0.44\n\n\n0.74\n\n\n16,426,290\n\n\n\n\n\n\n897,024\n\n\nAugust 19, 2024\n\n\n7.30\n\n\n4.38\n\n\n0.44\n\n\n0.73\n\n\n16,471,574\n\n\n\n\n\n\n903,168\n\n\nSeptember 9, 2024\n\n\n7.23\n\n\n4.34\n\n\n0.43\n\n\n0.72\n\n\n16,516,410\n\n\n\n\n\n\n909,312\n\n\nOctober 1, 2024\n\n\n7.15\n\n\n4.29\n\n\n0.43\n\n\n0.72\n\n\n16,560,802\n\n\n\n\n\n\n915,456\n\n\nOctober 22, 2024\n\n\n7.08\n\n\n4.25\n\n\n0.42\n\n\n0.71\n\n\n16,604,755\n\n\n\n\n\n\n921,600\n\n\nNovember 12, 2024\n\n\n7.01\n\n\n4.21\n\n\n0.42\n\n\n0.70\n\n\n16,648,272\n\n\n\n\n\n\n927,744\n\n\nDecember 4, 2024\n\n\n6.94\n\n\n4.17\n\n\n0.42\n\n\n0.69\n\n\n16,691,358\n\n\n\n\n\n\n933,888\n\n\nDecember 25, 2024\n\n\n6.87\n\n\n4.12\n\n\n0.41\n\n\n0.69\n\n\n16,734,018\n\n\n\n\n\n\n940,032\n\n\nJanuary 15, 2025\n\n\n6.81\n\n\n4.08\n\n\n0.41\n\n\n0.68\n\n\n16,776,256\n\n\n\n\n\n\n946,176\n\n\nFebruary 6, 2025\n\n\n6.74\n\n\n4.04\n\n\n0.40\n\n\n0.67\n\n\n16,818,075\n\n\n\n\n\n\n952,320\n\n\nFebruary 27, 2025\n\n\n6.67\n\n\n4.00\n\n\n0.40\n\n\n0.67\n\n\n16,859,480\n\n\n\n\n\n\n958,464\n\n\nMarch 20, 2025\n\n\n6.61\n\n\n3.96\n\n\n0.40\n\n\n0.66\n\n\n16,900,476\n\n\n\n\n\n\n964,608\n\n\nApril 11, 2025\n\n\n6.54\n\n\n3.92\n\n\n0.39\n\n\n0.65\n\n\n16,941,065\n\n\n\n\n\n\n970,752\n\n\nMay 2, 2025\n\n\n6.48\n\n\n3.89\n\n\n0.39\n\n\n0.65\n\n\n16,981,253\n\n\n\n\n\n\n976,896\n\n\nMay 23, 2025\n\n\n6.41\n\n\n3.85\n\n\n0.38\n\n\n0.64\n\n\n17,021,042\n\n\n\n\n\n\n983,040\n\n\nJune 14, 2025\n\n\n6.35\n\n\n3.81\n\n\n0.38\n\n\n0.63\n\n\n17,060,438\n\n\n\n\n\n\n989,184\n\n\nJuly 5, 2025\n\n\n6.29\n\n\n3.77\n\n\n0.38\n\n\n0.63\n\n\n17,099,444\n\n\n\n\n\n\n995,328\n\n\nJuly 26, 2025\n\n\n6.22\n\n\n3.73\n\n\n0.37\n\n\n0.62\n\n\n17,138,063\n\n\n\n\n\n\n1,001,472\n\n\nAugust 17, 2025\n\n\n6.16\n\n\n3.70\n\n\n0.37\n\n\n0.62\n\n\n17,176,300\n\n\n\n\n\n\n1,007,616\n\n\nSeptember 7, 2025\n\n\n6.10\n\n\n3.66\n\n\n0.37\n\n\n0.61\n\n\n17,214,158\n\n\n\n\n\n\n1,013,760\n\n\nSeptember 28, 2025\n\n\n6.04\n\n\n3.62\n\n\n0.36\n\n\n0.60\n\n\n17,251,642\n\n\n\n\n\n\n1,019,904\n\n\nOctober 20, 2025\n\n\n5.98\n\n\n3.59\n\n\n0.36\n\n\n0.60\n\n\n17,288,755\n\n\n\n\n\n\n1,026,048\n\n\nNovember 10, 2025\n\n\n5.92\n\n\n3.55\n\n\n0.36\n\n\n0.59\n\n\n17,325,500\n\n\n\n\n\n\n1,032,192\n\n\nDecember 1, 2025\n\n\n5.86\n\n\n3.52\n\n\n0.35\n\n\n0.59\n\n\n17,361,881\n\n\n\n\n\n\n1,038,336\n\n\nDecember 23, 2025\n\n\n5.80\n\n\n3.48\n\n\n0.35\n\n\n0.58\n\n\n17,397,902\n\n\n\n\n\n\n1,044,480\n\n\nJanuary 13, 2026\n\n\n5.75\n\n\n3.45\n\n\n0.34\n\n\n0.57\n\n\n17,433,566\n\n\n\n\n\n\n1,050,624\n\n\nFebruary 3, 2026\n\n\n5.69\n\n\n3.41\n\n\n0.34\n\n\n0.57\n\n\n17,468,878\n\n\n\n\n\n\n1,056,768\n\n\nFebruary 25, 2026\n\n\n5.63\n\n\n3.38\n\n\n0.34\n\n\n0.56\n\n\n17,503,839\n\n\n\n\n\n\n1,062,912\n\n\nMarch 18, 2026\n\n\n5.58\n\n\n3.35\n\n\n0.33\n\n\n0.56\n\n\n17,538,455\n\n\n\n\n\n\n1,069,056\n\n\nApril 8, 2026\n\n\n5.52\n\n\n3.31\n\n\n0.33\n\n\n0.55\n\n\n17,572,728\n\n\n\n\n\n\n1,075,200\n\n\nApril 30, 2026\n\n\n5.47\n\n\n3.28\n\n\n0.33\n\n\n0.55\n\n\n17,606,661\n\n\n\n\n\n\n1,081,344\n\n\nMay 21, 2026\n\n\n5.41\n\n\n3.25\n\n\n0.32\n\n\n0.54\n\n\n17,640,258\n\n\n\n\n\n\n1,087,488\n\n\nJune 11, 2026\n\n\n5.36\n\n\n3.22\n\n\n0.32\n\n\n0.54\n\n\n17,673,523\n\n\n\n\n\n\n1,093,632\n\n\nJuly 3, 2026\n\n\n5.31\n\n\n3.18\n\n\n0.32\n\n\n0.53\n\n\n17,706,459\n\n\n\n\n\n\n1,099,776\n\n\nJuly 24, 2026\n\n\n5.25\n\n\n3.15\n\n\n0.32\n\n\n0.53\n\n\n17,739,068\n\n\n\n\n\n\n1,105,920\n\n\nAugust 14, 2026\n\n\n5.20\n\n\n3.12\n\n\n0.31\n\n\n0.52\n\n\n17,771,355\n\n\n\n\n\n\n1,112,064\n\n\nSeptember 5, 2026\n\n\n5.15\n\n\n3.09\n\n\n0.31\n\n\n0.52\n\n\n17,803,321\n\n\n\n\n\n\n1,118,208\n\n\nSeptember 26, 2026\n\n\n5.10\n\n\n3.06\n\n\n0.31\n\n\n0.51\n\n\n17,834,972\n\n\n\n\n\n\n1,124,352\n\n\nOctober 17, 2026\n\n\n5.05\n\n\n3.03\n\n\n0.30\n\n\n0.50\n\n\n17,866,309\n\n\n\n\n\n\n1,130,496\n\n\nNovember 8, 2026\n\n\n5.00\n\n\n3.00\n\n\n0.30\n\n\n0.50\n\n\n17,897,335\n\n\n\n\n\n\n1,136,640\n\n\nNovember 29, 2026\n\n\n4.95\n\n\n2.97\n\n\n0.30\n\n\n0.50\n\n\n17,928,055\n\n\n\n\n\n\n1,142,784\n\n\nDecember 20, 2026\n\n\n4.90\n\n\n2.94\n\n\n0.29\n\n\n0.49\n\n\n17,958,470\n\n\n\n\n\n\n1,148,928\n\n\nJanuary 11, 2027\n\n\n4.85\n\n\n2.91\n\n\n0.29\n\n\n0.49\n\n\n17,988,585\n\n\n\n\n\n\n1,155,072\n\n\nFebruary 1, 2027\n\n\n4.80\n\n\n2.88\n\n\n0.29\n\n\n0.48\n\n\n18,018,401\n\n\n\n\n\n\n1,161,216\n\n\nFebruary 22, 2027\n\n\n4.76\n\n\n2.85\n\n\n0.29\n\n\n0.48\n\n\n18,047,921\n\n\n\n\n\n\n1,167,360\n\n\nMarch 16, 2027\n\n\n4.71\n\n\n2.83\n\n\n0.28\n\n\n0.47\n\n\n18,077,150\n\n\n\n\n\n\n1,173,504\n\n\nApril 6, 2027\n\n\n4.66\n\n\n2.80\n\n\n0.28\n\n\n0.47\n\n\n18,106,089\n\n\n\n\n\n\n1,179,648\n\n\nApril 27, 2027\n\n\n4.62\n\n\n2.77\n\n\n0.28\n\n\n0.46\n\n\n18,134,742\n\n\n\n\n\n\n1,185,792\n\n\nMay 19, 2027\n\n\n4.57\n\n\n2.74\n\n\n0.27\n\n\n0.46\n\n\n18,163,111\n\n\n\n\n\n\n1,191,936\n\n\nJune 9, 2027\n\n\n4.53\n\n\n2.72\n\n\n0.27\n\n\n0.45\n\n\n18,191,199\n\n\n\n\n\n\n1,198,080\n\n\nJune 30, 2027\n\n\n4.48\n\n\n2.69\n\n\n0.27\n\n\n0.45\n\n\n18,219,009\n\n\n\n\n\n\n1,204,224\n\n\nJuly 22, 2027\n\n\n4.44\n\n\n2.66\n\n\n0.27\n\n\n0.44\n\n\n18,246,543\n\n\n\n\n\n\n1,210,368\n\n\nAugust 12, 2027\n\n\n4.39\n\n\n2.64\n\n\n0.26\n\n\n0.44\n\n\n18,273,805\n\n\n\n\n\n\n1,216,512\n\n\nSeptember 2, 2027\n\n\n4.35\n\n\n2.61\n\n\n0.26\n\n\n0.43\n\n\n18,300,797\n\n\n\n\n\n\n1,222,656\n\n\nSeptember 24, 2027\n\n\n4.31\n\n\n2.58\n\n\n0.26\n\n\n0.43\n\n\n18,327,522\n\n\n\n\n\n\n1,228,800\n\n\nOctober 15, 2027\n\n\n4.26\n\n\n2.56\n\n\n0.26\n\n\n0.43\n\n\n18,353,982\n\n\n\n\n\n\n1,234,944\n\n\nNovember 5, 2027\n\n\n4.22\n\n\n2.53\n\n\n0.25\n\n\n0.42\n\n\n18,380,181\n\n\n\n\n\n\n1,241,088\n\n\nNovember 27, 2027\n\n\n4.18\n\n\n2.51\n\n\n0.25\n\n\n0.42\n\n\n18,406,120\n\n\n\n\n\n\n1,247,232\n\n\nDecember 18, 2027\n\n\n4.14\n\n\n2.48\n\n\n0.25\n\n\n0.41\n\n\n18,431,802\n\n\n\n\n\n\n1,253,376\n\n\nJanuary 8, 2028\n\n\n4.10\n\n\n2.46\n\n\n0.25\n\n\n0.41\n\n\n18,457,229\n\n\n\n\n\n\n1,259,520\n\n\nJanuary 30, 2028\n\n\n4.06\n\n\n2.43\n\n\n0.24\n\n\n0.41\n\n\n18,482,405\n\n\n\n\n\n\n1,265,664\n\n\nFebruary 20, 2028\n\n\n4.02\n\n\n2.41\n\n\n0.24\n\n\n0.40\n\n\n18,507,332\n\n\n\n\n\n\n1,271,808\n\n\nMarch 12, 2028\n\n\n3.98\n\n\n2.39\n\n\n0.24\n\n\n0.40\n\n\n18,532,012\n\n\n\n\n\n\n1,277,952\n\n\nApril 3, 2028\n\n\n3.94\n\n\n2.36\n\n\n0.24\n\n\n0.39\n\n\n18,556,448\n\n\n\n\n\n\n1,284,096\n\n\nApril 24, 2028\n\n\n3.90\n\n\n2.34\n\n\n0.23\n\n\n0.39\n\n\n18,580,641\n\n\n\n\n\n\n1,290,240\n\n\nMay 15, 2028\n\n\n3.86\n\n\n2.32\n\n\n0.23\n\n\n0.39\n\n\n18,604,595\n\n\n\n\n\n\n1,296,384\n\n\nJune 6, 2028\n\n\n3.82\n\n\n2.29\n\n\n0.23\n\n\n0.38\n\n\n18,628,312\n\n\n\n\n\n\n1,302,528\n\n\nJune 27, 2028\n\n\n3.78\n\n\n2.27\n\n\n0.23\n\n\n0.38\n\n\n18,651,794\n\n\n\n\n\n\n1,308,672\n\n\nJuly 18, 2028\n\n\n3.75\n\n\n2.25\n\n\n0.22\n\n\n0.37\n\n\n18,675,044\n\n\n\n\n\n\n1,314,816\n\n\nAugust 9, 2028\n\n\n3.71\n\n\n2.23\n\n\n0.22\n\n\n0.37\n\n\n18,698,063\n\n\n\n\n\n\n1,320,960\n\n\nAugust 30, 2028\n\n\n3.67\n\n\n2.20\n\n\n0.22\n\n\n0.37\n\n\n18,720,855\n\n\n\n\n\n\n1,327,104\n\n\nSeptember 20, 2028\n\n\n3.64\n\n\n2.18\n\n\n0.22\n\n\n0.36\n\n\n18,743,421\n\n\n\n\n\n\n1,333,248\n\n\nOctober 12, 2028\n\n\n3.60\n\n\n2.16\n\n\n0.22\n\n\n0.36\n\n\n18,765,763\n\n\n\n\n\n\n1,339,392\n\n\nNovember 2, 2028\n\n\n3.56\n\n\n2.14\n\n\n0.21\n\n\n0.36\n\n\n18,787,884\n\n\n\n\n\n\n1,345,536\n\n\nNovember 23, 2028\n\n\n3.53\n\n\n2.12\n\n\n0.21\n\n\n0.35\n\n\n18,809,787\n\n\n\n\n\n\n1,351,680\n\n\nDecember 15, 2028\n\n\n3.49\n\n\n2.10\n\n\n0.21\n\n\n0.35\n\n\n18,831,472\n\n\n\n\n\n\n1,357,824\n\n\nJanuary 5, 2029\n\n\n3.46\n\n\n2.08\n\n\n0.21\n\n\n0.35\n\n\n18,852,943\n\n\n\n\n\n\n1,363,968\n\n\nJanuary 26, 2029\n\n\n3.43\n\n\n2.06\n\n\n0.21\n\n\n0.34\n\n\n18,874,201\n\n\n\n\n\n\n1,370,112\n\n\nFebruary 17, 2029\n\n\n3.39\n\n\n2.04\n\n\n0.20\n\n\n0.34\n\n\n18,895,248\n\n\n\n\n\n\n1,376,256\n\n\nMarch 10, 2029\n\n\n3.36\n\n\n2.01\n\n\n0.20\n\n\n0.34\n\n\n18,916,087\n\n\n\n\n\n\n1,382,400\n\n\nMarch 31, 2029\n\n\n3.32\n\n\n1.99\n\n\n0.20\n\n\n0.33\n\n\n18,936,720\n\n\n\n\n\n\n1,388,544\n\n\nApril 22, 2029\n\n\n3.29\n\n\n1.98\n\n\n0.20\n\n\n0.33\n\n\n18,957,149\n\n\n\n\n\n\n1,394,688\n\n\nMay 13, 2029\n\n\n3.26\n\n\n1.96\n\n\n0.20\n\n\n0.33\n\n\n18,977,375\n\n\n\n\n\n\n1,400,832\n\n\nJune 3, 2029\n\n\n3.23\n\n\n1.94\n\n\n0.19\n\n\n0.32\n\n\n18,997,401\n\n\n\n\n\n\n1,406,976\n\n\nJune 25, 2029\n\n\n3.20\n\n\n1.92\n\n\n0.19\n\n\n0.32\n\n\n19,017,229\n\n\n\n\n\n\n1,413,120\n\n\nJuly 16, 2029\n\n\n3.16\n\n\n1.90\n\n\n0.19\n\n\n0.32\n\n\n19,036,860\n\n\n\n\n\n\n1,419,264\n\n\nAugust 6, 2029\n\n\n3.13\n\n\n1.88\n\n\n0.19\n\n\n0.31\n\n\n19,056,297\n\n\n\n\n\n\n1,425,408\n\n\nAugust 28, 2029\n\n\n3.10\n\n\n1.86\n\n\n0.19\n\n\n0.31\n\n\n19,075,542\n\n\n\n\n\n\n1,431,552\n\n\nSeptember 18, 2029\n\n\n3.07\n\n\n1.84\n\n\n0.18\n\n\n0.31\n\n\n19,094,596\n\n\n\n\n\n\n1,437,696\n\n\nOctober 9, 2029\n\n\n3.04\n\n\n1.82\n\n\n0.18\n\n\n0.30\n\n\n19,113,462\n\n\n\n\n\n\n1,443,840\n\n\nOctober 31, 2029\n\n\n3.01\n\n\n1.81\n\n\n0.18\n\n\n0.30\n\n\n19,132,140\n\n\n\n\n\n\n1,449,984\n\n\nNovember 21, 2029\n\n\n2.98\n\n\n1.79\n\n\n0.18\n\n\n0.30\n\n\n19,150,634\n\n\n\n\n\n\n1,456,128\n\n\nDecember 12, 2029\n\n\n2.95\n\n\n1.77\n\n\n0.18\n\n\n0.30\n\n\n19,168,945\n\n\n\n\n\n\n1,462,272\n\n\nJanuary 3, 2030\n\n\n2.92\n\n\n1.75\n\n\n0.18\n\n\n0.29\n\n\n19,187,074\n\n\n\n\n\n\n1,468,416\n\n\nJanuary 24, 2030\n\n\n2.89\n\n\n1.74\n\n\n0.17\n\n\n0.29\n\n\n19,205,024\n\n\n\n\n\n\n1,474,560\n\n\nFebruary 14, 2030\n\n\n2.86\n\n\n1.72\n\n\n0.17\n\n\n0.29\n\n\n19,222,796\n\n\n\n\n\n\n1,480,704\n\n\nMarch 8, 2030\n\n\n2.84\n\n\n1.70\n\n\n0.17\n\n\n0.28\n\n\n19,240,392\n\n\n\n\n\n\n1,486,848\n\n\nMarch 29, 2030\n\n\n2.81\n\n\n1.68\n\n\n0.17\n\n\n0.28\n\n\n19,257,814\n\n\n\n\n\n\n1,492,992\n\n\nApril 19, 2030\n\n\n2.78\n\n\n1.67\n\n\n0.17\n\n\n0.28\n\n\n19,275,063\n\n\n\n\n\n\n1,499,136\n\n\nMay 11, 2030\n\n\n2.75\n\n\n1.65\n\n\n0.17\n\n\n0.28\n\n\n19,292,142\n\n\n\n\n\n\n1,505,280\n\n\nJune 1, 2030\n\n\n2.72\n\n\n1.63\n\n\n0.16\n\n\n0.27\n\n\n19,309,051\n\n\n\n\n\n\n1,511,424\n\n\nJune 22, 2030\n\n\n2.70\n\n\n1.62\n\n\n0.16\n\n\n0.27\n\n\n19,325,793\n\n\n\n\n\n\n1,517,568\n\n\nJuly 14, 2030\n\n\n2.67\n\n\n1.60\n\n\n0.16\n\n\n0.27\n\n\n19,342,370\n\n\n\n\n\n\n1,523,712\n\n\nAugust 4, 2030\n\n\n2.64\n\n\n1.59\n\n\n0.16\n\n\n0.26\n\n\n19,358,782\n\n\n\n\n\n\n1,529,856\n\n\nAugust 25, 2030\n\n\n2.62\n\n\n1.57\n\n\n0.16\n\n\n0.26\n\n\n19,375,032\n\n\n\n\n\n\n1,536,000\n\n\nSeptember 16, 2030\n\n\n2.59\n\n\n1.56\n\n\n0.16\n\n\n0.26\n\n\n19,391,121\n\n\n\n\n\n\n1,542,144\n\n\nOctober 7, 2030\n\n\n2.57\n\n\n1.54\n\n\n0.15\n\n\n0.26\n\n\n19,407,050\n\n\n\n\n\n\n1,548,288\n\n\nOctober 28, 2030\n\n\n2.54\n\n\n1.52\n\n\n0.15\n\n\n0.25\n\n\n19,422,822\n\n\n\n\n\n\n1,554,432\n\n\nNovember 19, 2030\n\n\n2.52\n\n\n1.51\n\n\n0.15\n\n\n0.25\n\n\n19,438,438\n\n\n\n\n\n\n1,560,576\n\n\nDecember 10, 2030\n\n\n2.49\n\n\n1.49\n\n\n0.15\n\n\n0.25\n\n\n19,453,899\n\n\n\n\n\n\n1,566,720\n\n\nDecember 31, 2030\n\n\n2.47\n\n\n1.48\n\n\n0.15\n\n\n0.25\n\n\n19,469,207\n\n\n\n\n\n\n1,572,864\n\n\nJanuary 22, 2031\n\n\n2.44\n\n\n1.47\n\n\n0.15\n\n\n0.24\n\n\n19,484,363\n\n\n\n\n\n\n1,579,008\n\n\nFebruary 12, 2031\n\n\n2.42\n\n\n1.45\n\n\n0.15\n\n\n0.24\n\n\n19,499,370\n\n\n\n\n\n\n1,585,152\n\n\nMarch 5, 2031\n\n\n2.39\n\n\n1.44\n\n\n0.14\n\n\n0.24\n\n\n19,514,227\n\n\n\n\n\n\n1,591,296\n\n\nMarch 27, 2031\n\n\n2.37\n\n\n1.42\n\n\n0.14\n\n\n0.24\n\n\n19,528,938\n\n\n\n\n\n\n1,597,440\n\n\nApril 17, 2031\n\n\n2.35\n\n\n1.41\n\n\n0.14\n\n\n0.23\n\n\n19,543,503\n\n\n\n\n\n\n1,603,584\n\n\nMay 8, 2031\n\n\n2.32\n\n\n1.39\n\n\n0.14\n\n\n0.23\n\n\n19,557,924\n\n\n\n\n\n\n1,609,728\n\n\nMay 30, 2031\n\n\n2.30\n\n\n1.38\n\n\n0.14\n\n\n0.23\n\n\n19,572,202\n\n\n\n\n\n\n1,615,872\n\n\nJune 20, 2031\n\n\n2.28\n\n\n1.37\n\n\n0.14\n\n\n0.23\n\n\n19,586,339\n\n\n\n\n\n\n1,622,016\n\n\nJuly 11, 2031\n\n\n2.26\n\n\n1.35\n\n\n0.14\n\n\n0.23\n\n\n19,600,335\n\n\n\n\n\n\n1,628,160\n\n\nAugust 2, 2031\n\n\n2.23\n\n\n1.34\n\n\n0.13\n\n\n0.22\n\n\n19,614,193\n\n\n\n\n\n\n1,634,304\n\n\nAugust 23, 2031\n\n\n2.21\n\n\n1.33\n\n\n0.13\n\n\n0.22\n\n\n19,627,914\n\n\n\n\n\n\n1,640,448\n\n\nSeptember 13, 2031\n\n\n2.19\n\n\n1.31\n\n\n0.13\n\n\n0.22\n\n\n19,641,499\n\n\n\n\n\n\n1,646,592\n\n\nOctober 5, 2031\n\n\n2.17\n\n\n1.30\n\n\n0.13\n\n\n0.22\n\n\n19,654,950\n\n\n\n\n\n\n1,652,736\n\n\nOctober 26, 2031\n\n\n2.15\n\n\n1.29\n\n\n0.13\n\n\n0.21\n\n\n19,668,267\n\n\n\n\n\n\n1,658,880\n\n\nNovember 16, 2031\n\n\n2.12\n\n\n1.27\n\n\n0.13\n\n\n0.21\n\n\n19,681,453\n\n\n\n\n\n\n1,665,024\n\n\nDecember 8, 2031\n\n\n2.10\n\n\n1.26\n\n\n0.13\n\n\n0.21\n\n\n19,694,508\n\n\n\n\n\n\n1,671,168\n\n\nDecember 29, 2031\n\n\n2.08\n\n\n1.25\n\n\n0.12\n\n\n0.21\n\n\n19,707,433\n\n\n\n\n\n\n1,677,312\n\n\nJanuary 19, 2032\n\n\n2.06\n\n\n1.24\n\n\n0.12\n\n\n0.21\n\n\n19,720,231\n\n\n\n\n\n\n1,683,456\n\n\nFebruary 10, 2032\n\n\n2.04\n\n\n1.23\n\n\n0.12\n\n\n0.20\n\n\n19,732,902\n\n\n\n\n\n\n1,689,600\n\n\nMarch 2, 2032\n\n\n2.02\n\n\n1.21\n\n\n0.12\n\n\n0.20\n\n\n19,745,448\n\n\n\n\n\n\n1,695,744\n\n\nMarch 23, 2032\n\n\n2.00\n\n\n1.20\n\n\n0.12\n\n\n0.20\n\n\n19,757,869\n\n\n\n\n\n\n1,701,888\n\n\nApril 14, 2032\n\n\n1.98\n\n\n1.19\n\n\n0.12\n\n\n0.20\n\n\n19,770,167\n\n\n\n\n\n\n1,708,032\n\n\nMay 5, 2032\n\n\n1.96\n\n\n1.18\n\n\n0.12\n\n\n0.20\n\n\n19,782,344\n\n\n\n\n\n\n1,714,176\n\n\nMay 26, 2032\n\n\n1.94\n\n\n1.17\n\n\n0.12\n\n\n0.19\n\n\n19,794,400\n\n\n\n\n\n\n1,720,320\n\n\nJune 17, 2032\n\n\n1.92\n\n\n1.15\n\n\n0.12\n\n\n0.19\n\n\n19,806,337\n\n\n\n\n\n\n1,726,464\n\n\nJuly 8, 2032\n\n\n1.90\n\n\n1.14\n\n\n0.11\n\n\n0.19\n\n\n19,818,155\n\n\n\n\n\n\n1,732,608\n\n\nJuly 29, 2032\n\n\n1.89\n\n\n1.13\n\n\n0.11\n\n\n0.19\n\n\n19,829,857\n\n\n\n\n\n\n1,738,752\n\n\nAugust 20, 2032\n\n\n1.87\n\n\n1.12\n\n\n0.11\n\n\n0.19\n\n\n19,841,442\n\n\n\n\n\n\n1,744,896\n\n\nSeptember 10, 2032\n\n\n1.85\n\n\n1.11\n\n\n0.11\n\n\n0.18\n\n\n19,852,913\n\n\n\n\n\n\n1,751,040\n\n\nOctober 1, 2032\n\n\n1.83\n\n\n1.10\n\n\n0.11\n\n\n0.18\n\n\n19,864,271\n\n\n\n\n\n\n1,757,184\n\n\nOctober 23, 2032\n\n\n1.81\n\n\n1.09\n\n\n0.11\n\n\n0.18\n\n\n19,875,516\n\n\n\n\n\n\n1,763,328\n\n\nNovember 13, 2032\n\n\n1.79\n\n\n1.08\n\n\n0.11\n\n\n0.18\n\n\n19,886,649\n\n\n\n\n\n\n1,769,472\n\n\nDecember 4, 2032\n\n\n1.78\n\n\n1.07\n\n\n0.11\n\n\n0.18\n\n\n19,897,672\n\n\n\n\n\n\n1,775,616\n\n\nDecember 26, 2032\n\n\n1.76\n\n\n1.06\n\n\n0.11\n\n\n0.18\n\n\n19,908,587\n\n\n\n\n\n\n1,781,760\n\n\nJanuary 16, 2033\n\n\n1.74\n\n\n1.04\n\n\n0.10\n\n\n0.17\n\n\n19,919,393\n\n\n\n\n\n\n1,787,904\n\n\nFebruary 6, 2033\n\n\n1.72\n\n\n1.03\n\n\n0.10\n\n\n0.17\n\n\n19,930,092\n\n\n\n\n\n\n1,794,048\n\n\nFebruary 28, 2033\n\n\n1.71\n\n\n1.02\n\n\n0.10\n\n\n0.17\n\n\n19,940,685\n\n\n\n\n\n\n1,800,192\n\n\nMarch 21, 2033\n\n\n1.69\n\n\n1.01\n\n\n0.10\n\n\n0.17\n\n\n19,951,173\n\n\n\n\n\n\n1,806,336\n\n\nApril 11, 2033\n\n\n1.67\n\n\n1.00\n\n\n0.10\n\n\n0.17\n\n\n19,961,558\n\n\n\n\n\n\n1,812,480\n\n\nMay 3, 2033\n\n\n1.66\n\n\n0.99\n\n\n0.10\n\n\n0.17\n\n\n19,971,840\n\n\n\n\n\n\n1,818,624\n\n\nMay 24, 2033\n\n\n1.64\n\n\n0.98\n\n\n0.10\n\n\n0.16\n\n\n19,982,019\n\n\n\n\n\n\n1,824,768\n\n\nJune 14, 2033\n\n\n1.62\n\n\n0.97\n\n\n0.10\n\n\n0.16\n\n\n19,992,098\n\n\n\n\n\n\n1,830,912\n\n\nJuly 6, 2033\n\n\n1.61\n\n\n0.96\n\n\n0.10\n\n\n0.16\n\n\n20,002,078\n\n\n\n\n\n\n1,837,056\n\n\nJuly 27, 2033\n\n\n1.59\n\n\n0.96\n\n\n0.10\n\n\n0.16\n\n\n20,011,958\n\n\n\n\n\n\n1,843,200\n\n\nAugust 17, 2033\n\n\n1.58\n\n\n0.95\n\n\n0.09\n\n\n0.16\n\n\n20,021,741\n\n\n\n\n\n\n1,849,344\n\n\nSeptember 8, 2033\n\n\n1.56\n\n\n0.94\n\n\n0.09\n\n\n0.16\n\n\n20,031,427\n\n\n\n\n\n\n1,855,488\n\n\nSeptember 29, 2033\n\n\n1.55\n\n\n0.93\n\n\n0.09\n\n\n0.15\n\n\n20,041,017\n\n\n\n\n\n\n1,861,632\n\n\nOctober 20, 2033\n\n\n1.53\n\n\n0.92\n\n\n0.09\n\n\n0.15\n\n\n20,050,511\n\n\n\n\n\n\n1,867,776\n\n\nNovember 11, 2033\n\n\n1.51\n\n\n0.91\n\n\n0.09\n\n\n0.15\n\n\n20,059,912\n\n\n\n\n\n\n1,873,920\n\n\nDecember 2, 2033\n\n\n1.50\n\n\n0.90\n\n\n0.09\n\n\n0.15\n\n\n20,069,220\n\n\n\n\n\n\n1,880,064\n\n\nDecember 23, 2033\n\n\n1.49\n\n\n0.89\n\n\n0.09\n\n\n0.15\n\n\n20,078,436\n\n\n\n\n\n\n1,886,208\n\n\nJanuary 14, 2034\n\n\n1.47\n\n\n0.88\n\n\n0.09\n\n\n0.15\n\n\n20,087,560\n\n\n\n\n\n\n1,892,352\n\n\nFebruary 4, 2034\n\n\n1.46\n\n\n0.87\n\n\n0.09\n\n\n0.15\n\n\n20,096,594\n\n\n\n\n\n\n1,898,496\n\n\nFebruary 25, 2034\n\n\n1.44\n\n\n0.86\n\n\n0.09\n\n\n0.14\n\n\n20,105,539\n\n\n\n\n\n\n1,904,640\n\n\nMarch 19, 2034\n\n\n1.43\n\n\n0.86\n\n\n0.09\n\n\n0.14\n\n\n20,114,395\n\n\n\n\n\n\n1,910,784\n\n\nApril 9, 2034\n\n\n1.41\n\n\n0.85\n\n\n0.08\n\n\n0.14\n\n\n20,123,164\n\n\n\n\n\n\n1,916,928\n\n\nApril 30, 2034\n\n\n1.40\n\n\n0.84\n\n\n0.08\n\n\n0.14\n\n\n20,131,845\n\n\n\n\n\n\n1,923,072\n\n\nMay 22, 2034\n\n\n1.39\n\n\n0.83\n\n\n0.08\n\n\n0.14\n\n\n20,140,441\n\n\n\n\n\n\n1,929,216\n\n\nJune 12, 2034\n\n\n1.37\n\n\n0.82\n\n\n0.08\n\n\n0.14\n\n\n20,148,951\n\n\n\n\n\n\n1,935,360\n\n\nJuly 3, 2034\n\n\n1.36\n\n\n0.81\n\n\n0.08\n\n\n0.14\n\n\n20,157,378\n\n\n\n\n\n\n1,941,504\n\n\nJuly 25, 2034\n\n\n1.34\n\n\n0.81\n\n\n0.08\n\n\n0.13\n\n\n20,165,721\n\n\n\n\n\n\n1,947,648\n\n\nAugust 15, 2034\n\n\n1.33\n\n\n0.80\n\n\n0.08\n\n\n0.13\n\n\n20,173,981\n\n\n\n\n\n\n1,953,792\n\n\nSeptember 5, 2034\n\n\n1.32\n\n\n0.79\n\n\n0.08\n\n\n0.13\n\n\n20,182,159\n\n\n\n\n\n\n1,959,936\n\n\nSeptember 27, 2034\n\n\n1.30\n\n\n0.78\n\n\n0.08\n\n\n0.13\n\n\n20,190,257\n\n\n\n\n\n\n1,966,080\n\n\nOctober 18, 2034\n\n\n1.29\n\n\n0.78\n\n\n0.08\n\n\n0.13\n\n\n20,198,274\n\n\n\n\n\n\n1,972,224\n\n\nNovember 8, 2034\n\n\n1.28\n\n\n0.77\n\n\n0.08\n\n\n0.13\n\n\n20,206,212\n\n\n\n\n\n\n1,978,368\n\n\nNovember 30, 2034\n\n\n1.27\n\n\n0.76\n\n\n0.08\n\n\n0.13\n\n\n20,214,071\n\n\n\n\n\n\n1,984,512\n\n\nDecember 21, 2034\n\n\n1.25\n\n\n0.75\n\n\n0.08\n\n\n0.13\n\n\n20,221,853\n\n\n\n\n\n\n1,990,656\n\n\nJanuary 11, 2035\n\n\n1.24\n\n\n0.74\n\n\n0.07\n\n\n0.12\n\n\n20,229,557\n\n\n\n\n\n\n1,996,800\n\n\nFebruary 2, 2035\n\n\n1.23\n\n\n0.74\n\n\n0.07\n\n\n0.12\n\n\n20,237,185\n\n\n\n\n\n\n2,002,944\n\n\nFebruary 23, 2035\n\n\n1.22\n\n\n0.73\n\n\n0.07\n\n\n0.12\n\n\n20,244,738\n\n\n\n\n\n\n2,009,088\n\n\nMarch 16, 2035\n\n\n1.21\n\n\n0.72\n\n\n0.07\n\n\n0.12\n\n\n20,252,216\n\n\n\n\n\n\n2,015,232\n\n\nApril 7, 2035\n\n\n1.19\n\n\n0.72\n\n\n0.07\n\n\n0.12\n\n\n20,259,620\n\n\n\n\n\n\n2,021,376\n\n\nApril 28, 2035\n\n\n1.18\n\n\n0.71\n\n\n0.07\n\n\n0.12\n\n\n20,266,950\n\n\n\n\n\n\n2,027,520\n\n\nMay 19, 2035\n\n\n1.17\n\n\n0.70\n\n\n0.07\n\n\n0.12\n\n\n20,274,208\n\n\n\n\n\n\n2,033,664\n\n\nJune 10, 2035\n\n\n1.16\n\n\n0.69\n\n\n0.07\n\n\n0.12\n\n\n20,281,394\n\n\n\n\n\n\n2,039,808\n\n\nJuly 1, 2035\n\n\n1.15\n\n\n0.69\n\n\n0.07\n\n\n0.11\n\n\n20,288,509\n\n\n\n\n\n\n2,045,952\n\n\nJuly 22, 2035\n\n\n1.14\n\n\n0.68\n\n\n0.07\n\n\n0.11\n\n\n20,295,554\n\n\n\n\n\n\n2,052,096\n\n\nAugust 13, 2035\n\n\n1.12\n\n\n0.67\n\n\n0.07\n\n\n0.11\n\n\n20,302,529\n\n\n\n\n\n\n2,058,240\n\n\nSeptember 3, 2035\n\n\n1.11\n\n\n0.67\n\n\n0.07\n\n\n0.11\n\n\n20,309,434\n\n\n\n\n\n\n2,064,384\n\n\nSeptember 24, 2035\n\n\n1.10\n\n\n0.66\n\n\n0.07\n\n\n0.11\n\n\n20,316,272\n\n\n\n\n\n\n2,070,528\n\n\nOctober 16, 2035\n\n\n1.09\n\n\n0.65\n\n\n0.07\n\n\n0.11\n\n\n20,323,041\n\n\n\n\n\n\n2,076,672\n\n\nNovember 6, 2035\n\n\n1.08\n\n\n0.65\n\n\n0.06\n\n\n0.11\n\n\n20,329,744\n\n\n\n\n\n\n2,082,816\n\n\nNovember 27, 2035\n\n\n1.07\n\n\n0.64\n\n\n0.06\n\n\n0.11\n\n\n20,336,380\n\n\n\n\n\n\n2,088,960\n\n\nDecember 19, 2035\n\n\n1.06\n\n\n0.64\n\n\n0.06\n\n\n0.11\n\n\n20,342,951\n\n\n\n\n\n\n2,095,104\n\n\nJanuary 9, 2036\n\n\n1.05\n\n\n0.63\n\n\n0.06\n\n\n0.10\n\n\n20,349,456\n\n\n\n\n\n\n2,101,248\n\n\nJanuary 30, 2036\n\n\n1.04\n\n\n0.62\n\n\n0.06\n\n\n0.10\n\n\n20,355,897\n\n\n\n\n\n\n2,107,392\n\n\nFebruary 21, 2036\n\n\n1.03\n\n\n0.62\n\n\n0.06\n\n\n0.10\n\n\n20,362,275\n\n\n\n\n\n\n2,113,536\n\n\nMarch 13, 2036\n\n\n1.02\n\n\n0.61\n\n\n0.06\n\n\n0.10\n\n\n20,368,589\n\n\n\n\n\n\n2,119,680\n\n\nApril 3, 2036\n\n\n1.01\n\n\n0.60\n\n\n0.06\n\n\n0.10\n\n\n20,374,840\n\n\n\n\n\n\n2,125,824\n\n\nApril 25, 2036\n\n\n1.00\n\n\n0.60\n\n\n0.06\n\n\n0.10\n\n\n20,381,030\n\n\n\n\n\n\n2,131,968\n\n\nMay 16, 2036\n\n\n0.99\n\n\n0.59\n\n\n0.06\n\n\n0.10\n\n\n20,387,159\n\n\n\n\n\n\n2,138,112\n\n\nJune 6, 2036\n\n\n0.98\n\n\n0.59\n\n\n0.06\n\n\n0.10\n\n\n20,393,226\n\n\n\n\n\n\n2,144,256\n\n\nJune 28, 2036\n\n\n0.97\n\n\n0.58\n\n\n0.06\n\n\n0.10\n\n\n20,399,234\n\n\n\n\n\n\n2,150,400\n\n\nJuly 19, 2036\n\n\n0.96\n\n\n0.58\n\n\n0.06\n\n\n0.10\n\n\n20,405,182\n\n\n\n\n\n\n2,156,544\n\n\nAugust 9, 2036\n\n\n0.95\n\n\n0.57\n\n\n0.06\n\n\n0.09\n\n\n20,411,072\n\n\n\n\n\n\n2,162,688\n\n\nAugust 31, 2036\n\n\n0.94\n\n\n0.56\n\n\n0.06\n\n\n0.09\n\n\n20,416,903\n\n\n\n\n\n\n2,168,832\n\n\nSeptember 21, 2036\n\n\n0.93\n\n\n0.56\n\n\n0.06\n\n\n0.09\n\n\n20,422,676\n\n\n\n\n\n\n2,174,976\n\n\nOctober 12, 2036\n\n\n0.92\n\n\n0.55\n\n\n0.06\n\n\n0.09\n\n\n20,428,392\n\n\n\n\n\n\n2,181,120\n\n\nNovember 3, 2036\n\n\n0.91\n\n\n0.55\n\n\n0.05\n\n\n0.09\n\n\n20,434,052\n\n\n\n\n\n\n2,187,264\n\n\nNovember 24, 2036\n\n\n0.90\n\n\n0.54\n\n\n0.05\n\n\n0.09\n\n\n20,439,655\n\n\n\n\n\n\n2,193,408\n\n\nDecember 15, 2036\n\n\n0.89\n\n\n0.54\n\n\n0.05\n\n\n0.09\n\n\n20,445,203\n\n\n\n\n\n\n2,199,552\n\n\nJanuary 6, 2037\n\n\n0.89\n\n\n0.53\n\n\n0.05\n\n\n0.09\n\n\n20,450,696\n\n\n\n\n\n\n2,205,696\n\n\nJanuary 27, 2037\n\n\n0.88\n\n\n0.53\n\n\n0.05\n\n\n0.09\n\n\n20,456,135\n\n\n\n\n\n\n2,211,840\n\n\nFebruary 17, 2037\n\n\n0.87\n\n\n0.52\n\n\n0.05\n\n\n0.09\n\n\n20,461,520\n\n\n\n\n\n\n2,217,984\n\n\nMarch 11, 2037\n\n\n0.86\n\n\n0.52\n\n\n0.05\n\n\n0.09\n\n\n20,466,851\n\n\n\n\n\n\n2,224,128\n\n\nApril 1, 2037\n\n\n0.85\n\n\n0.51\n\n\n0.05\n\n\n0.09\n\n\n20,472,130\n\n\n\n\n\n\n2,230,272\n\n\nApril 22, 2037\n\n\n0.84\n\n\n0.51\n\n\n0.05\n\n\n0.08\n\n\n20,477,357\n\n\n\n\n\n\n2,236,416\n\n\nMay 14, 2037\n\n\n0.83\n\n\n0.50\n\n\n0.05\n\n\n0.08\n\n\n20,482,531\n\n\n\n\n\n\n2,242,560\n\n\nJune 4, 2037\n\n\n0.83\n\n\n0.50\n\n\n0.05\n\n\n0.08\n\n\n20,487,655\n\n\n\n\n\n\n2,248,704\n\n\nJune 25, 2037\n\n\n0.82\n\n\n0.49\n\n\n0.05\n\n\n0.08\n\n\n20,492,728\n\n\n\n\n\n\n2,254,848\n\n\nJuly 17, 2037\n\n\n0.81\n\n\n0.49\n\n\n0.05\n\n\n0.08\n\n\n20,497,750\n\n\n\n\n\n\n2,260,992\n\n\nAugust 7, 2037\n\n\n0.80\n\n\n0.48\n\n\n0.05\n\n\n0.08\n\n\n20,502,723\n\n\n\n\n\n\n2,267,136\n\n\nAugust 28, 2037\n\n\n0.79\n\n\n0.48\n\n\n0.05\n\n\n0.08\n\n\n20,507,647\n\n\n\n\n\n\n2,273,280\n\n\nSeptember 19, 2037\n\n\n0.79\n\n\n0.47\n\n\n0.05\n\n\n0.08\n\n\n20,512,521\n\n\n\n\n\n\n2,279,424\n\n\nOctober 10, 2037\n\n\n0.78\n\n\n0.47\n\n\n0.05\n\n\n0.08\n\n\n20,517,348\n\n\n\n\n\n\n2,285,568\n\n\nOctober 31, 2037\n\n\n0.77\n\n\n0.46\n\n\n0.05\n\n\n0.08\n\n\n20,522,127\n\n\n\n\n\n\n2,291,712\n\n\nNovember 22, 2037\n\n\n0.76\n\n\n0.46\n\n\n0.05\n\n\n0.08\n\n\n20,526,858\n\n\n\n\n\n\n2,297,856\n\n\nDecember 13, 2037\n\n\n0.75\n\n\n0.45\n\n\n0.05\n\n\n0.08\n\n\n20,531,543\n\n\n\n\n\n\n2,304,000\n\n\nJanuary 3, 2038\n\n\n0.75\n\n\n0.45\n\n\n0.04\n\n\n0.07\n\n\n20,536,181\n\n\n\n\n\n\n2,310,144\n\n\nJanuary 25, 2038\n\n\n0.74\n\n\n0.44\n\n\n0.04\n\n\n0.07\n\n\n20,540,773\n\n\n\n\n\n\n2,316,288\n\n\nFebruary 15, 2038\n\n\n0.73\n\n\n0.44\n\n\n0.04\n\n\n0.07\n\n\n20,545,320\n\n\n\n\n\n\n2,322,432\n\n\nMarch 8, 2038\n\n\n0.73\n\n\n0.44\n\n\n0.04\n\n\n0.07\n\n\n20,549,822\n\n\n\n\n\n\n2,328,576\n\n\nMarch 30, 2038\n\n\n0.72\n\n\n0.43\n\n\n0.04\n\n\n0.07\n\n\n20,554,279\n\n\n\n\n\n\n2,334,720\n\n\nApril 20, 2038\n\n\n0.71\n\n\n0.43\n\n\n0.04\n\n\n0.07\n\n\n20,558,692\n\n\n\n\n\n\n2,340,864\n\n\nMay 11, 2038\n\n\n0.70\n\n\n0.42\n\n\n0.04\n\n\n0.07\n\n\n20,563,062\n\n\n\n\n\n\n2,347,008\n\n\nJune 2, 2038\n\n\n0.70\n\n\n0.42\n\n\n0.04\n\n\n0.07\n\n\n20,567,388\n\n\n\n\n\n\n2,353,152\n\n\nJune 23, 2038\n\n\n0.69\n\n\n0.41\n\n\n0.04\n\n\n0.07\n\n\n20,571,671\n\n\n\n\n\n\n2,359,296\n\n\nJuly 14, 2038\n\n\n0.68\n\n\n0.41\n\n\n0.04\n\n\n0.07\n\n\n20,575,912\n\n\n\n\n\n\n2,365,440\n\n\nAugust 5, 2038\n\n\n0.68\n\n\n0.41\n\n\n0.04\n\n\n0.07\n\n\n20,580,111\n\n\n\n\n\n\n2,371,584\n\n\nAugust 26, 2038\n\n\n0.67\n\n\n0.40\n\n\n0.04\n\n\n0.07\n\n\n20,584,269\n\n\n\n\n\n\n2,377,728\n\n\nSeptember 16, 2038\n\n\n0.66\n\n\n0.40\n\n\n0.04\n\n\n0.07\n\n\n20,588,385\n\n\n\n\n\n\n2,383,872\n\n\nOctober 8, 2038\n\n\n0.66\n\n\n0.39\n\n\n0.04\n\n\n0.07\n\n\n20,592,460\n\n\n\n\n\n\n2,390,016\n\n\nOctober 29, 2038\n\n\n0.65\n\n\n0.39\n\n\n0.04\n\n\n0.07\n\n\n20,596,495\n\n\n\n\n\n\n2,396,160\n\n\nNovember 19, 2038\n\n\n0.64\n\n\n0.39\n\n\n0.04\n\n\n0.06\n\n\n20,600,490\n\n\n\n\n\n\n2,402,304\n\n\nDecember 11, 2038\n\n\n0.64\n\n\n0.38\n\n\n0.04\n\n\n0.06\n\n\n20,604,446\n\n\n\n\n\n\n2,408,448\n\n\nJanuary 1, 2039\n\n\n0.63\n\n\n0.38\n\n\n0.04\n\n\n0.06\n\n\n20,608,362\n\n\n\n\n\n\n2,414,592\n\n\nJanuary 22, 2039\n\n\n0.62\n\n\n0.37\n\n\n0.04\n\n\n0.06\n\n\n20,612,240\n\n\n\n\n\n\n2,420,736\n\n\nFebruary 13, 2039\n\n\n0.62\n\n\n0.37\n\n\n0.04\n\n\n0.06\n\n\n20,616,079\n\n\n\n\n\n\n2,426,880\n\n\nMarch 6, 2039\n\n\n0.61\n\n\n0.37\n\n\n0.04\n\n\n0.06\n\n\n20,619,881\n\n\n\n\n\n\n2,433,024\n\n\nMarch 27, 2039\n\n\n0.61\n\n\n0.36\n\n\n0.04\n\n\n0.06\n\n\n20,623,644\n\n\n\n\n\n\n2,439,168\n\n\nApril 18, 2039\n\n\n0.60\n\n\n0.36\n\n\n0.04\n\n\n0.06\n\n\n20,627,370\n\n\n\n\n\n\n2,445,312\n\n\nMay 9, 2039\n\n\n0.59\n\n\n0.36\n\n\n0.04\n\n\n0.06\n\n\n20,631,060\n\n\n\n\n\n\n2,451,456\n\n\nMay 30, 2039\n\n\n0.59\n\n\n0.35\n\n\n0.04\n\n\n0.06\n\n\n20,634,713\n\n\n\n\n\n\n2,457,600\n\n\nJune 21, 2039\n\n\n0.58\n\n\n0.35\n\n\n0.03\n\n\n0.06\n\n\n20,638,330\n\n\n\n\n\n\n\n\n\n\n Sources\n\u00b6\n\n\n\n\n\n\n\n\n\n\nBlockchain parameters\n\u00a0\n\u21a9\n\n\n\n\n\n\nGitHub, \ndecred/dcrd\n\u00a0\n\u21a9\n\n\n\n\n\n\nPoS network parameters\n\u00a0\n\u21a9",
            "title": "Inflation"
        },
        {
            "location": "/advanced/inflation/#inflation",
            "text": "New blocks are discovered by the proof-of-work miners roughly every 5 minutes, and each time this occurs new decred are created.  This block reward is split three ways:   60% goes to the PoW miner who found the block  30% goes to the PoS voters on that block (6% to each of the 5 voters)  10% goes towards the development subsidy   The block reward started at 31.19582664 and it adjusts every 6,144 blocks (approximately 21.33 days) by reducing by a factor of 100/101 1 .  If a block includes less than 5 PoS votes there will be a fraction of the block reward which is not allocated to anybody. As a result, it is only possible to calculate an upper limit for the total number of decred which will ever be created.   The last block reward will be created in September 2120. The upper limit on the total supply of Decred is 20,999,999.99800912 coins 2 .   The following chart shows an estimate of the coin supply growth over time.   The table below shows the estimated block reward and estimated total supply of Decred up to block 2,457,600 in 2039. Note that the total supply of DCR at block 1 is 1,680,000 due to the  premine . PoS voting started at block 4,096 3  therefore PoS rewards were not generated before that height.     Block height  Estimated date  Block reward (DCR)  PoW (DCR)  PoS vote (DCR)  Dev subsidy (DCR)  Total DCR supply      1  February 8, 2016  1,680,000.00  1,680,000.00  0.00  0.00  1,680,000    2  February 8, 2016  21.84  18.72  0.00  3.12  1,680,022    4,096  February 22, 2016  31.20  18.72  1.87  3.12  1,769,432    6,144  March 1, 2016  30.89  18.53  1.85  3.09  1,833,321    12,288  March 22, 2016  30.58  18.35  1.83  3.06  2,023,090    18,432  April 12, 2016  30.28  18.17  1.82  3.03  2,210,980    24,576  May 4, 2016  29.98  17.99  1.80  3.00  2,397,010    30,720  May 25, 2016  29.68  17.81  1.78  2.97  2,581,198    36,864  June 15, 2016  29.39  17.63  1.76  2.94  2,763,563    43,008  July 7, 2016  29.10  17.46  1.75  2.91  2,944,122    49,152  July 28, 2016  28.81  17.29  1.73  2.88  3,122,893    55,296  August 18, 2016  28.52  17.11  1.71  2.85  3,299,894    61,440  September 9, 2016  28.24  16.94  1.69  2.82  3,475,143    67,584  September 30, 2016  27.96  16.78  1.68  2.80  3,648,656    73,728  October 21, 2016  27.68  16.61  1.66  2.77  3,820,452    79,872  November 12, 2016  27.41  16.45  1.64  2.74  3,990,546    86,016  December 3, 2016  27.14  16.28  1.63  2.71  4,158,957    92,160  December 24, 2016  26.87  16.12  1.61  2.69  4,325,700    98,304  January 15, 2017  26.60  15.96  1.60  2.66  4,490,792    104,448  February 5, 2017  26.34  15.80  1.58  2.63  4,654,249    110,592  February 26, 2017  26.08  15.65  1.56  2.61  4,816,089    116,736  March 20, 2017  25.82  15.49  1.55  2.58  4,976,325    122,880  April 10, 2017  25.57  15.34  1.53  2.56  5,134,976    129,024  May 1, 2017  25.31  15.19  1.52  2.53  5,292,055    135,168  May 23, 2017  25.06  15.04  1.50  2.51  5,447,579    141,312  June 13, 2017  24.81  14.89  1.49  2.48  5,601,564    147,456  July 4, 2017  24.57  14.74  1.47  2.46  5,754,024    153,600  July 26, 2017  24.33  14.60  1.46  2.43  5,904,974    159,744  August 16, 2017  24.08  14.45  1.45  2.41  6,054,430    165,888  September 6, 2017  23.85  14.31  1.43  2.38  6,202,406    172,032  September 28, 2017  23.61  14.17  1.42  2.36  6,348,917    178,176  October 19, 2017  23.38  14.03  1.40  2.34  6,493,977    184,320  November 9, 2017  23.14  13.89  1.39  2.31  6,637,601    190,464  December 1, 2017  22.92  13.75  1.37  2.29  6,779,803    196,608  December 22, 2017  22.69  13.61  1.36  2.27  6,920,597    202,752  January 12, 2018  22.46  13.48  1.35  2.25  7,059,997    208,896  February 3, 2018  22.24  13.35  1.33  2.22  7,198,017    215,040  February 24, 2018  22.02  13.21  1.32  2.20  7,334,670    221,184  March 17, 2018  21.80  13.08  1.31  2.18  7,469,971    227,328  April 8, 2018  21.59  12.95  1.30  2.16  7,603,932    233,472  April 29, 2018  21.37  12.82  1.28  2.14  7,736,566    239,616  May 20, 2018  21.16  12.70  1.27  2.12  7,867,887    245,760  June 11, 2018  20.95  12.57  1.26  2.10  7,997,908    251,904  July 2, 2018  20.75  12.45  1.24  2.07  8,126,642    258,048  July 23, 2018  20.54  12.32  1.23  2.05  8,254,101    264,192  August 14, 2018  20.34  12.20  1.22  2.03  8,380,298    270,336  September 4, 2018  20.14  12.08  1.21  2.01  8,505,245    276,480  September 25, 2018  19.94  11.96  1.20  1.99  8,628,956    282,624  October 17, 2018  19.74  11.84  1.18  1.97  8,751,442    288,768  November 7, 2018  19.54  11.73  1.17  1.95  8,872,715    294,912  November 28, 2018  19.35  11.61  1.16  1.93  8,992,787    301,056  December 20, 2018  19.16  11.49  1.15  1.92  9,111,670    307,200  January 10, 2019  18.97  11.38  1.14  1.90  9,229,376    313,344  January 31, 2019  18.78  11.27  1.13  1.88  9,345,917    319,488  February 22, 2019  18.59  11.16  1.12  1.86  9,461,304    325,632  March 15, 2019  18.41  11.05  1.10  1.84  9,575,549    331,776  April 5, 2019  18.23  10.94  1.09  1.82  9,688,662    337,920  April 27, 2019  18.05  10.83  1.08  1.80  9,800,656    344,064  May 18, 2019  17.87  10.72  1.07  1.79  9,911,540    350,208  June 8, 2019  17.69  10.62  1.06  1.77  10,021,327    356,352  June 30, 2019  17.52  10.51  1.05  1.75  10,130,027    362,496  July 21, 2019  17.34  10.41  1.04  1.73  10,237,651    368,640  August 11, 2019  17.17  10.30  1.03  1.72  10,344,209    374,784  September 2, 2019  17.00  10.20  1.02  1.70  10,449,711    380,928  September 23, 2019  16.83  10.10  1.01  1.68  10,554,170    387,072  October 14, 2019  16.67  10.00  1.00  1.67  10,657,594    393,216  November 5, 2019  16.50  9.90  0.99  1.65  10,759,994    399,360  November 26, 2019  16.34  9.80  0.98  1.63  10,861,380    405,504  December 17, 2019  16.18  9.71  0.97  1.62  10,961,763    411,648  January 8, 2020  16.02  9.61  0.96  1.60  11,061,151    417,792  January 29, 2020  15.86  9.51  0.95  1.59  11,159,556    423,936  February 19, 2020  15.70  9.42  0.94  1.57  11,256,986    430,080  March 12, 2020  15.55  9.33  0.93  1.55  11,353,452    436,224  April 2, 2020  15.39  9.23  0.92  1.54  11,448,962    442,368  April 23, 2020  15.24  9.14  0.91  1.52  11,543,527    448,512  May 15, 2020  15.09  9.05  0.91  1.51  11,637,155    454,656  June 5, 2020  14.94  8.96  0.90  1.49  11,729,857    460,800  June 26, 2020  14.79  8.87  0.89  1.48  11,821,640    466,944  July 18, 2020  14.64  8.79  0.88  1.46  11,912,515    473,088  August 8, 2020  14.50  8.70  0.87  1.45  12,002,490    479,232  August 29, 2020  14.36  8.61  0.86  1.44  12,091,575    485,376  September 20, 2020  14.21  8.53  0.85  1.42  12,179,777    491,520  October 11, 2020  14.07  8.44  0.84  1.41  12,267,106    497,664  November 1, 2020  13.93  8.36  0.84  1.39  12,353,570    503,808  November 23, 2020  13.80  8.28  0.83  1.38  12,439,179    509,952  December 14, 2020  13.66  8.20  0.82  1.37  12,523,939    516,096  January 4, 2021  13.52  8.11  0.81  1.35  12,607,861    522,240  January 26, 2021  13.39  8.03  0.80  1.34  12,690,951    528,384  February 16, 2021  13.26  7.95  0.80  1.33  12,773,219    534,528  March 9, 2021  13.13  7.88  0.79  1.31  12,854,673    540,672  March 31, 2021  13.00  7.80  0.78  1.30  12,935,319    546,816  April 21, 2021  12.87  7.72  0.77  1.29  13,015,168    552,960  May 12, 2021  12.74  7.64  0.76  1.27  13,094,226    559,104  June 3, 2021  12.61  7.57  0.76  1.26  13,172,501    565,248  June 24, 2021  12.49  7.49  0.75  1.25  13,250,001    571,392  July 15, 2021  12.37  7.42  0.74  1.24  13,326,733    577,536  August 6, 2021  12.24  7.35  0.73  1.22  13,402,706    583,680  August 27, 2021  12.12  7.27  0.73  1.21  13,477,927    589,824  September 17, 2021  12.00  7.20  0.72  1.20  13,552,403    595,968  October 9, 2021  11.88  7.13  0.71  1.19  13,626,142    602,112  October 30, 2021  11.77  7.06  0.71  1.18  13,699,150    608,256  November 20, 2021  11.65  6.99  0.70  1.16  13,771,436    614,400  December 12, 2021  11.53  6.92  0.69  1.15  13,843,006    620,544  January 2, 2022  11.42  6.85  0.69  1.14  13,913,867    626,688  January 23, 2022  11.31  6.78  0.68  1.13  13,984,027    632,832  February 14, 2022  11.19  6.72  0.67  1.12  14,053,492    638,976  March 7, 2022  11.08  6.65  0.67  1.11  14,122,270    645,120  March 28, 2022  10.97  6.58  0.66  1.10  14,190,366    651,264  April 19, 2022  10.87  6.52  0.65  1.09  14,257,788    657,408  May 10, 2022  10.76  6.45  0.65  1.08  14,324,543    663,552  May 31, 2022  10.65  6.39  0.64  1.07  14,390,637    669,696  June 22, 2022  10.55  6.33  0.63  1.05  14,456,076    675,840  July 13, 2022  10.44  6.26  0.63  1.04  14,520,867    681,984  August 3, 2022  10.34  6.20  0.62  1.03  14,585,017    688,128  August 25, 2022  10.24  6.14  0.61  1.02  14,648,532    694,272  September 15, 2022  10.13  6.08  0.61  1.01  14,711,418    700,416  October 6, 2022  10.03  6.02  0.60  1.00  14,773,681    706,560  October 28, 2022  9.93  5.96  0.60  0.99  14,835,328    712,704  November 18, 2022  9.84  5.90  0.59  0.98  14,896,364    718,848  December 9, 2022  9.74  5.84  0.58  0.97  14,956,796    724,992  December 31, 2022  9.64  5.79  0.58  0.96  15,016,630    731,136  January 21, 2023  9.55  5.73  0.57  0.95  15,075,871    737,280  February 11, 2023  9.45  5.67  0.57  0.95  15,134,526    743,424  March 5, 2023  9.36  5.62  0.56  0.94  15,192,600    749,568  March 26, 2023  9.27  5.56  0.56  0.93  15,250,099    755,712  April 16, 2023  9.17  5.50  0.55  0.92  15,307,029    761,856  May 8, 2023  9.08  5.45  0.55  0.91  15,363,395    768,000  May 29, 2023  8.99  5.40  0.54  0.90  15,419,203    774,144  June 19, 2023  8.90  5.34  0.53  0.89  15,474,459    780,288  July 11, 2023  8.82  5.29  0.53  0.88  15,529,167    786,432  August 1, 2023  8.73  5.24  0.52  0.87  15,583,334    792,576  August 22, 2023  8.64  5.19  0.52  0.86  15,636,964    798,720  September 13, 2023  8.56  5.13  0.51  0.86  15,690,064    804,864  October 4, 2023  8.47  5.08  0.51  0.85  15,742,637    811,008  October 25, 2023  8.39  5.03  0.50  0.84  15,794,690    817,152  November 16, 2023  8.31  4.98  0.50  0.83  15,846,228    823,296  December 7, 2023  8.22  4.93  0.49  0.82  15,897,256    829,440  December 28, 2023  8.14  4.88  0.49  0.81  15,947,778    835,584  January 19, 2024  8.06  4.84  0.48  0.81  15,997,800    841,728  February 9, 2024  7.98  4.79  0.48  0.80  16,047,327    847,872  March 1, 2024  7.90  4.74  0.47  0.79  16,096,363    854,016  March 23, 2024  7.82  4.69  0.47  0.78  16,144,914    860,160  April 13, 2024  7.75  4.65  0.46  0.77  16,192,984    866,304  May 4, 2024  7.67  4.60  0.46  0.77  16,240,579    872,448  May 26, 2024  7.59  4.56  0.46  0.76  16,287,702    878,592  June 16, 2024  7.52  4.51  0.45  0.75  16,334,358    884,736  July 7, 2024  7.44  4.47  0.45  0.74  16,380,553    890,880  July 29, 2024  7.37  4.42  0.44  0.74  16,426,290    897,024  August 19, 2024  7.30  4.38  0.44  0.73  16,471,574    903,168  September 9, 2024  7.23  4.34  0.43  0.72  16,516,410    909,312  October 1, 2024  7.15  4.29  0.43  0.72  16,560,802    915,456  October 22, 2024  7.08  4.25  0.42  0.71  16,604,755    921,600  November 12, 2024  7.01  4.21  0.42  0.70  16,648,272    927,744  December 4, 2024  6.94  4.17  0.42  0.69  16,691,358    933,888  December 25, 2024  6.87  4.12  0.41  0.69  16,734,018    940,032  January 15, 2025  6.81  4.08  0.41  0.68  16,776,256    946,176  February 6, 2025  6.74  4.04  0.40  0.67  16,818,075    952,320  February 27, 2025  6.67  4.00  0.40  0.67  16,859,480    958,464  March 20, 2025  6.61  3.96  0.40  0.66  16,900,476    964,608  April 11, 2025  6.54  3.92  0.39  0.65  16,941,065    970,752  May 2, 2025  6.48  3.89  0.39  0.65  16,981,253    976,896  May 23, 2025  6.41  3.85  0.38  0.64  17,021,042    983,040  June 14, 2025  6.35  3.81  0.38  0.63  17,060,438    989,184  July 5, 2025  6.29  3.77  0.38  0.63  17,099,444    995,328  July 26, 2025  6.22  3.73  0.37  0.62  17,138,063    1,001,472  August 17, 2025  6.16  3.70  0.37  0.62  17,176,300    1,007,616  September 7, 2025  6.10  3.66  0.37  0.61  17,214,158    1,013,760  September 28, 2025  6.04  3.62  0.36  0.60  17,251,642    1,019,904  October 20, 2025  5.98  3.59  0.36  0.60  17,288,755    1,026,048  November 10, 2025  5.92  3.55  0.36  0.59  17,325,500    1,032,192  December 1, 2025  5.86  3.52  0.35  0.59  17,361,881    1,038,336  December 23, 2025  5.80  3.48  0.35  0.58  17,397,902    1,044,480  January 13, 2026  5.75  3.45  0.34  0.57  17,433,566    1,050,624  February 3, 2026  5.69  3.41  0.34  0.57  17,468,878    1,056,768  February 25, 2026  5.63  3.38  0.34  0.56  17,503,839    1,062,912  March 18, 2026  5.58  3.35  0.33  0.56  17,538,455    1,069,056  April 8, 2026  5.52  3.31  0.33  0.55  17,572,728    1,075,200  April 30, 2026  5.47  3.28  0.33  0.55  17,606,661    1,081,344  May 21, 2026  5.41  3.25  0.32  0.54  17,640,258    1,087,488  June 11, 2026  5.36  3.22  0.32  0.54  17,673,523    1,093,632  July 3, 2026  5.31  3.18  0.32  0.53  17,706,459    1,099,776  July 24, 2026  5.25  3.15  0.32  0.53  17,739,068    1,105,920  August 14, 2026  5.20  3.12  0.31  0.52  17,771,355    1,112,064  September 5, 2026  5.15  3.09  0.31  0.52  17,803,321    1,118,208  September 26, 2026  5.10  3.06  0.31  0.51  17,834,972    1,124,352  October 17, 2026  5.05  3.03  0.30  0.50  17,866,309    1,130,496  November 8, 2026  5.00  3.00  0.30  0.50  17,897,335    1,136,640  November 29, 2026  4.95  2.97  0.30  0.50  17,928,055    1,142,784  December 20, 2026  4.90  2.94  0.29  0.49  17,958,470    1,148,928  January 11, 2027  4.85  2.91  0.29  0.49  17,988,585    1,155,072  February 1, 2027  4.80  2.88  0.29  0.48  18,018,401    1,161,216  February 22, 2027  4.76  2.85  0.29  0.48  18,047,921    1,167,360  March 16, 2027  4.71  2.83  0.28  0.47  18,077,150    1,173,504  April 6, 2027  4.66  2.80  0.28  0.47  18,106,089    1,179,648  April 27, 2027  4.62  2.77  0.28  0.46  18,134,742    1,185,792  May 19, 2027  4.57  2.74  0.27  0.46  18,163,111    1,191,936  June 9, 2027  4.53  2.72  0.27  0.45  18,191,199    1,198,080  June 30, 2027  4.48  2.69  0.27  0.45  18,219,009    1,204,224  July 22, 2027  4.44  2.66  0.27  0.44  18,246,543    1,210,368  August 12, 2027  4.39  2.64  0.26  0.44  18,273,805    1,216,512  September 2, 2027  4.35  2.61  0.26  0.43  18,300,797    1,222,656  September 24, 2027  4.31  2.58  0.26  0.43  18,327,522    1,228,800  October 15, 2027  4.26  2.56  0.26  0.43  18,353,982    1,234,944  November 5, 2027  4.22  2.53  0.25  0.42  18,380,181    1,241,088  November 27, 2027  4.18  2.51  0.25  0.42  18,406,120    1,247,232  December 18, 2027  4.14  2.48  0.25  0.41  18,431,802    1,253,376  January 8, 2028  4.10  2.46  0.25  0.41  18,457,229    1,259,520  January 30, 2028  4.06  2.43  0.24  0.41  18,482,405    1,265,664  February 20, 2028  4.02  2.41  0.24  0.40  18,507,332    1,271,808  March 12, 2028  3.98  2.39  0.24  0.40  18,532,012    1,277,952  April 3, 2028  3.94  2.36  0.24  0.39  18,556,448    1,284,096  April 24, 2028  3.90  2.34  0.23  0.39  18,580,641    1,290,240  May 15, 2028  3.86  2.32  0.23  0.39  18,604,595    1,296,384  June 6, 2028  3.82  2.29  0.23  0.38  18,628,312    1,302,528  June 27, 2028  3.78  2.27  0.23  0.38  18,651,794    1,308,672  July 18, 2028  3.75  2.25  0.22  0.37  18,675,044    1,314,816  August 9, 2028  3.71  2.23  0.22  0.37  18,698,063    1,320,960  August 30, 2028  3.67  2.20  0.22  0.37  18,720,855    1,327,104  September 20, 2028  3.64  2.18  0.22  0.36  18,743,421    1,333,248  October 12, 2028  3.60  2.16  0.22  0.36  18,765,763    1,339,392  November 2, 2028  3.56  2.14  0.21  0.36  18,787,884    1,345,536  November 23, 2028  3.53  2.12  0.21  0.35  18,809,787    1,351,680  December 15, 2028  3.49  2.10  0.21  0.35  18,831,472    1,357,824  January 5, 2029  3.46  2.08  0.21  0.35  18,852,943    1,363,968  January 26, 2029  3.43  2.06  0.21  0.34  18,874,201    1,370,112  February 17, 2029  3.39  2.04  0.20  0.34  18,895,248    1,376,256  March 10, 2029  3.36  2.01  0.20  0.34  18,916,087    1,382,400  March 31, 2029  3.32  1.99  0.20  0.33  18,936,720    1,388,544  April 22, 2029  3.29  1.98  0.20  0.33  18,957,149    1,394,688  May 13, 2029  3.26  1.96  0.20  0.33  18,977,375    1,400,832  June 3, 2029  3.23  1.94  0.19  0.32  18,997,401    1,406,976  June 25, 2029  3.20  1.92  0.19  0.32  19,017,229    1,413,120  July 16, 2029  3.16  1.90  0.19  0.32  19,036,860    1,419,264  August 6, 2029  3.13  1.88  0.19  0.31  19,056,297    1,425,408  August 28, 2029  3.10  1.86  0.19  0.31  19,075,542    1,431,552  September 18, 2029  3.07  1.84  0.18  0.31  19,094,596    1,437,696  October 9, 2029  3.04  1.82  0.18  0.30  19,113,462    1,443,840  October 31, 2029  3.01  1.81  0.18  0.30  19,132,140    1,449,984  November 21, 2029  2.98  1.79  0.18  0.30  19,150,634    1,456,128  December 12, 2029  2.95  1.77  0.18  0.30  19,168,945    1,462,272  January 3, 2030  2.92  1.75  0.18  0.29  19,187,074    1,468,416  January 24, 2030  2.89  1.74  0.17  0.29  19,205,024    1,474,560  February 14, 2030  2.86  1.72  0.17  0.29  19,222,796    1,480,704  March 8, 2030  2.84  1.70  0.17  0.28  19,240,392    1,486,848  March 29, 2030  2.81  1.68  0.17  0.28  19,257,814    1,492,992  April 19, 2030  2.78  1.67  0.17  0.28  19,275,063    1,499,136  May 11, 2030  2.75  1.65  0.17  0.28  19,292,142    1,505,280  June 1, 2030  2.72  1.63  0.16  0.27  19,309,051    1,511,424  June 22, 2030  2.70  1.62  0.16  0.27  19,325,793    1,517,568  July 14, 2030  2.67  1.60  0.16  0.27  19,342,370    1,523,712  August 4, 2030  2.64  1.59  0.16  0.26  19,358,782    1,529,856  August 25, 2030  2.62  1.57  0.16  0.26  19,375,032    1,536,000  September 16, 2030  2.59  1.56  0.16  0.26  19,391,121    1,542,144  October 7, 2030  2.57  1.54  0.15  0.26  19,407,050    1,548,288  October 28, 2030  2.54  1.52  0.15  0.25  19,422,822    1,554,432  November 19, 2030  2.52  1.51  0.15  0.25  19,438,438    1,560,576  December 10, 2030  2.49  1.49  0.15  0.25  19,453,899    1,566,720  December 31, 2030  2.47  1.48  0.15  0.25  19,469,207    1,572,864  January 22, 2031  2.44  1.47  0.15  0.24  19,484,363    1,579,008  February 12, 2031  2.42  1.45  0.15  0.24  19,499,370    1,585,152  March 5, 2031  2.39  1.44  0.14  0.24  19,514,227    1,591,296  March 27, 2031  2.37  1.42  0.14  0.24  19,528,938    1,597,440  April 17, 2031  2.35  1.41  0.14  0.23  19,543,503    1,603,584  May 8, 2031  2.32  1.39  0.14  0.23  19,557,924    1,609,728  May 30, 2031  2.30  1.38  0.14  0.23  19,572,202    1,615,872  June 20, 2031  2.28  1.37  0.14  0.23  19,586,339    1,622,016  July 11, 2031  2.26  1.35  0.14  0.23  19,600,335    1,628,160  August 2, 2031  2.23  1.34  0.13  0.22  19,614,193    1,634,304  August 23, 2031  2.21  1.33  0.13  0.22  19,627,914    1,640,448  September 13, 2031  2.19  1.31  0.13  0.22  19,641,499    1,646,592  October 5, 2031  2.17  1.30  0.13  0.22  19,654,950    1,652,736  October 26, 2031  2.15  1.29  0.13  0.21  19,668,267    1,658,880  November 16, 2031  2.12  1.27  0.13  0.21  19,681,453    1,665,024  December 8, 2031  2.10  1.26  0.13  0.21  19,694,508    1,671,168  December 29, 2031  2.08  1.25  0.12  0.21  19,707,433    1,677,312  January 19, 2032  2.06  1.24  0.12  0.21  19,720,231    1,683,456  February 10, 2032  2.04  1.23  0.12  0.20  19,732,902    1,689,600  March 2, 2032  2.02  1.21  0.12  0.20  19,745,448    1,695,744  March 23, 2032  2.00  1.20  0.12  0.20  19,757,869    1,701,888  April 14, 2032  1.98  1.19  0.12  0.20  19,770,167    1,708,032  May 5, 2032  1.96  1.18  0.12  0.20  19,782,344    1,714,176  May 26, 2032  1.94  1.17  0.12  0.19  19,794,400    1,720,320  June 17, 2032  1.92  1.15  0.12  0.19  19,806,337    1,726,464  July 8, 2032  1.90  1.14  0.11  0.19  19,818,155    1,732,608  July 29, 2032  1.89  1.13  0.11  0.19  19,829,857    1,738,752  August 20, 2032  1.87  1.12  0.11  0.19  19,841,442    1,744,896  September 10, 2032  1.85  1.11  0.11  0.18  19,852,913    1,751,040  October 1, 2032  1.83  1.10  0.11  0.18  19,864,271    1,757,184  October 23, 2032  1.81  1.09  0.11  0.18  19,875,516    1,763,328  November 13, 2032  1.79  1.08  0.11  0.18  19,886,649    1,769,472  December 4, 2032  1.78  1.07  0.11  0.18  19,897,672    1,775,616  December 26, 2032  1.76  1.06  0.11  0.18  19,908,587    1,781,760  January 16, 2033  1.74  1.04  0.10  0.17  19,919,393    1,787,904  February 6, 2033  1.72  1.03  0.10  0.17  19,930,092    1,794,048  February 28, 2033  1.71  1.02  0.10  0.17  19,940,685    1,800,192  March 21, 2033  1.69  1.01  0.10  0.17  19,951,173    1,806,336  April 11, 2033  1.67  1.00  0.10  0.17  19,961,558    1,812,480  May 3, 2033  1.66  0.99  0.10  0.17  19,971,840    1,818,624  May 24, 2033  1.64  0.98  0.10  0.16  19,982,019    1,824,768  June 14, 2033  1.62  0.97  0.10  0.16  19,992,098    1,830,912  July 6, 2033  1.61  0.96  0.10  0.16  20,002,078    1,837,056  July 27, 2033  1.59  0.96  0.10  0.16  20,011,958    1,843,200  August 17, 2033  1.58  0.95  0.09  0.16  20,021,741    1,849,344  September 8, 2033  1.56  0.94  0.09  0.16  20,031,427    1,855,488  September 29, 2033  1.55  0.93  0.09  0.15  20,041,017    1,861,632  October 20, 2033  1.53  0.92  0.09  0.15  20,050,511    1,867,776  November 11, 2033  1.51  0.91  0.09  0.15  20,059,912    1,873,920  December 2, 2033  1.50  0.90  0.09  0.15  20,069,220    1,880,064  December 23, 2033  1.49  0.89  0.09  0.15  20,078,436    1,886,208  January 14, 2034  1.47  0.88  0.09  0.15  20,087,560    1,892,352  February 4, 2034  1.46  0.87  0.09  0.15  20,096,594    1,898,496  February 25, 2034  1.44  0.86  0.09  0.14  20,105,539    1,904,640  March 19, 2034  1.43  0.86  0.09  0.14  20,114,395    1,910,784  April 9, 2034  1.41  0.85  0.08  0.14  20,123,164    1,916,928  April 30, 2034  1.40  0.84  0.08  0.14  20,131,845    1,923,072  May 22, 2034  1.39  0.83  0.08  0.14  20,140,441    1,929,216  June 12, 2034  1.37  0.82  0.08  0.14  20,148,951    1,935,360  July 3, 2034  1.36  0.81  0.08  0.14  20,157,378    1,941,504  July 25, 2034  1.34  0.81  0.08  0.13  20,165,721    1,947,648  August 15, 2034  1.33  0.80  0.08  0.13  20,173,981    1,953,792  September 5, 2034  1.32  0.79  0.08  0.13  20,182,159    1,959,936  September 27, 2034  1.30  0.78  0.08  0.13  20,190,257    1,966,080  October 18, 2034  1.29  0.78  0.08  0.13  20,198,274    1,972,224  November 8, 2034  1.28  0.77  0.08  0.13  20,206,212    1,978,368  November 30, 2034  1.27  0.76  0.08  0.13  20,214,071    1,984,512  December 21, 2034  1.25  0.75  0.08  0.13  20,221,853    1,990,656  January 11, 2035  1.24  0.74  0.07  0.12  20,229,557    1,996,800  February 2, 2035  1.23  0.74  0.07  0.12  20,237,185    2,002,944  February 23, 2035  1.22  0.73  0.07  0.12  20,244,738    2,009,088  March 16, 2035  1.21  0.72  0.07  0.12  20,252,216    2,015,232  April 7, 2035  1.19  0.72  0.07  0.12  20,259,620    2,021,376  April 28, 2035  1.18  0.71  0.07  0.12  20,266,950    2,027,520  May 19, 2035  1.17  0.70  0.07  0.12  20,274,208    2,033,664  June 10, 2035  1.16  0.69  0.07  0.12  20,281,394    2,039,808  July 1, 2035  1.15  0.69  0.07  0.11  20,288,509    2,045,952  July 22, 2035  1.14  0.68  0.07  0.11  20,295,554    2,052,096  August 13, 2035  1.12  0.67  0.07  0.11  20,302,529    2,058,240  September 3, 2035  1.11  0.67  0.07  0.11  20,309,434    2,064,384  September 24, 2035  1.10  0.66  0.07  0.11  20,316,272    2,070,528  October 16, 2035  1.09  0.65  0.07  0.11  20,323,041    2,076,672  November 6, 2035  1.08  0.65  0.06  0.11  20,329,744    2,082,816  November 27, 2035  1.07  0.64  0.06  0.11  20,336,380    2,088,960  December 19, 2035  1.06  0.64  0.06  0.11  20,342,951    2,095,104  January 9, 2036  1.05  0.63  0.06  0.10  20,349,456    2,101,248  January 30, 2036  1.04  0.62  0.06  0.10  20,355,897    2,107,392  February 21, 2036  1.03  0.62  0.06  0.10  20,362,275    2,113,536  March 13, 2036  1.02  0.61  0.06  0.10  20,368,589    2,119,680  April 3, 2036  1.01  0.60  0.06  0.10  20,374,840    2,125,824  April 25, 2036  1.00  0.60  0.06  0.10  20,381,030    2,131,968  May 16, 2036  0.99  0.59  0.06  0.10  20,387,159    2,138,112  June 6, 2036  0.98  0.59  0.06  0.10  20,393,226    2,144,256  June 28, 2036  0.97  0.58  0.06  0.10  20,399,234    2,150,400  July 19, 2036  0.96  0.58  0.06  0.10  20,405,182    2,156,544  August 9, 2036  0.95  0.57  0.06  0.09  20,411,072    2,162,688  August 31, 2036  0.94  0.56  0.06  0.09  20,416,903    2,168,832  September 21, 2036  0.93  0.56  0.06  0.09  20,422,676    2,174,976  October 12, 2036  0.92  0.55  0.06  0.09  20,428,392    2,181,120  November 3, 2036  0.91  0.55  0.05  0.09  20,434,052    2,187,264  November 24, 2036  0.90  0.54  0.05  0.09  20,439,655    2,193,408  December 15, 2036  0.89  0.54  0.05  0.09  20,445,203    2,199,552  January 6, 2037  0.89  0.53  0.05  0.09  20,450,696    2,205,696  January 27, 2037  0.88  0.53  0.05  0.09  20,456,135    2,211,840  February 17, 2037  0.87  0.52  0.05  0.09  20,461,520    2,217,984  March 11, 2037  0.86  0.52  0.05  0.09  20,466,851    2,224,128  April 1, 2037  0.85  0.51  0.05  0.09  20,472,130    2,230,272  April 22, 2037  0.84  0.51  0.05  0.08  20,477,357    2,236,416  May 14, 2037  0.83  0.50  0.05  0.08  20,482,531    2,242,560  June 4, 2037  0.83  0.50  0.05  0.08  20,487,655    2,248,704  June 25, 2037  0.82  0.49  0.05  0.08  20,492,728    2,254,848  July 17, 2037  0.81  0.49  0.05  0.08  20,497,750    2,260,992  August 7, 2037  0.80  0.48  0.05  0.08  20,502,723    2,267,136  August 28, 2037  0.79  0.48  0.05  0.08  20,507,647    2,273,280  September 19, 2037  0.79  0.47  0.05  0.08  20,512,521    2,279,424  October 10, 2037  0.78  0.47  0.05  0.08  20,517,348    2,285,568  October 31, 2037  0.77  0.46  0.05  0.08  20,522,127    2,291,712  November 22, 2037  0.76  0.46  0.05  0.08  20,526,858    2,297,856  December 13, 2037  0.75  0.45  0.05  0.08  20,531,543    2,304,000  January 3, 2038  0.75  0.45  0.04  0.07  20,536,181    2,310,144  January 25, 2038  0.74  0.44  0.04  0.07  20,540,773    2,316,288  February 15, 2038  0.73  0.44  0.04  0.07  20,545,320    2,322,432  March 8, 2038  0.73  0.44  0.04  0.07  20,549,822    2,328,576  March 30, 2038  0.72  0.43  0.04  0.07  20,554,279    2,334,720  April 20, 2038  0.71  0.43  0.04  0.07  20,558,692    2,340,864  May 11, 2038  0.70  0.42  0.04  0.07  20,563,062    2,347,008  June 2, 2038  0.70  0.42  0.04  0.07  20,567,388    2,353,152  June 23, 2038  0.69  0.41  0.04  0.07  20,571,671    2,359,296  July 14, 2038  0.68  0.41  0.04  0.07  20,575,912    2,365,440  August 5, 2038  0.68  0.41  0.04  0.07  20,580,111    2,371,584  August 26, 2038  0.67  0.40  0.04  0.07  20,584,269    2,377,728  September 16, 2038  0.66  0.40  0.04  0.07  20,588,385    2,383,872  October 8, 2038  0.66  0.39  0.04  0.07  20,592,460    2,390,016  October 29, 2038  0.65  0.39  0.04  0.07  20,596,495    2,396,160  November 19, 2038  0.64  0.39  0.04  0.06  20,600,490    2,402,304  December 11, 2038  0.64  0.38  0.04  0.06  20,604,446    2,408,448  January 1, 2039  0.63  0.38  0.04  0.06  20,608,362    2,414,592  January 22, 2039  0.62  0.37  0.04  0.06  20,612,240    2,420,736  February 13, 2039  0.62  0.37  0.04  0.06  20,616,079    2,426,880  March 6, 2039  0.61  0.37  0.04  0.06  20,619,881    2,433,024  March 27, 2039  0.61  0.36  0.04  0.06  20,623,644    2,439,168  April 18, 2039  0.60  0.36  0.04  0.06  20,627,370    2,445,312  May 9, 2039  0.59  0.36  0.04  0.06  20,631,060    2,451,456  May 30, 2039  0.59  0.35  0.04  0.06  20,634,713    2,457,600  June 21, 2039  0.58  0.35  0.03  0.06  20,638,330",
            "title": " Inflation"
        },
        {
            "location": "/advanced/inflation/#sources",
            "text": "Blockchain parameters \u00a0 \u21a9    GitHub,  decred/dcrd \u00a0 \u21a9    PoS network parameters \u00a0 \u21a9",
            "title": " Sources"
        },
        {
            "location": "/advanced/deleting-your-wallet/",
            "text": "Deleting Your Wallet\n\u00b6\n\n\nThere are a few reasons you might need to delete your wallet.\n\n\n\n\nYou need to restore your wallet from seed.\n\n\nYou do not have the seed anymore and want to make a new wallet.\n\n\nYou want to remove the wallet from a particular computer.\n\n\n\n\nFirst you need to find the dcrwallet application directory which varies by platform.\nThis is the same directory that is home for your \nconfiguration files\n.\n\n\nIn that directory, you need to delete the file \nmainnet/wallet.db\n.\nThat will completely remove your wallet from that computer.  To access\nit again you will need to restore from the original seed.\n\n\nIt is important to note that it is possible (but not certain) that a\ndeleted file may be recovered using file recovery tools.  If you are\ndeleting this for security reasons you probably need to use a secure\ndeletion tool such as\n\nGNU shred\n.",
            "title": "Deleting Your Wallet"
        },
        {
            "location": "/advanced/deleting-your-wallet/#deleting-your-wallet",
            "text": "There are a few reasons you might need to delete your wallet.   You need to restore your wallet from seed.  You do not have the seed anymore and want to make a new wallet.  You want to remove the wallet from a particular computer.   First you need to find the dcrwallet application directory which varies by platform.\nThis is the same directory that is home for your  configuration files .  In that directory, you need to delete the file  mainnet/wallet.db .\nThat will completely remove your wallet from that computer.  To access\nit again you will need to restore from the original seed.  It is important to note that it is possible (but not certain) that a\ndeleted file may be recovered using file recovery tools.  If you are\ndeleting this for security reasons you probably need to use a secure\ndeletion tool such as GNU shred .",
            "title": " Deleting Your Wallet"
        },
        {
            "location": "/advanced/hcctl-usage/",
            "text": "hcctl Usage\n\u00b6\n\n\nhcctl provides a way to control both the daemon \nhcd\n and the wallet\n\nhcwallet\n using the json rpc interface without actually writing\njson.\n\n\nTo simplify the examples we will assume that you have all password\nstored in the \nconfig files\n.\n\n\n Stopping the programs\n\u00b6\n\n\nTo cleanly shut down the programs:\n\n\nhcctl --wallet stop\nhcctl stop\n\n\n\n\n Finding the current block height\n\u00b6\n\n\nhcctl getblockcount\n\n\n\n\n See your balance\n\u00b6\n\n\nhcctl --wallet getbalance\n\n\n\n\n Get a new address\n\u00b6\n\n\nhcctl --wallet getnewaddress\n\n\n\n\n Send funds to an address\n\u00b6\n\n\nhcctl --wallet sendtoaddress <address> <amount>",
            "title": "Advanced hcctl Usage"
        },
        {
            "location": "/advanced/hcctl-usage/#hcctl-usage",
            "text": "hcctl provides a way to control both the daemon  hcd  and the wallet hcwallet  using the json rpc interface without actually writing\njson.  To simplify the examples we will assume that you have all password\nstored in the  config files .",
            "title": " hcctl Usage"
        },
        {
            "location": "/advanced/hcctl-usage/#stopping-the-programs",
            "text": "To cleanly shut down the programs:  hcctl --wallet stop\nhcctl stop",
            "title": "Stopping the programs"
        },
        {
            "location": "/advanced/hcctl-usage/#finding-the-current-block-height",
            "text": "hcctl getblockcount",
            "title": "Finding the current block height"
        },
        {
            "location": "/advanced/hcctl-usage/#see-your-balance",
            "text": "hcctl --wallet getbalance",
            "title": "See your balance"
        },
        {
            "location": "/advanced/hcctl-usage/#get-a-new-address",
            "text": "hcctl --wallet getnewaddress",
            "title": "Get a new address"
        },
        {
            "location": "/advanced/hcctl-usage/#send-funds-to-an-address",
            "text": "hcctl --wallet sendtoaddress <address> <amount>",
            "title": "Send funds to an address"
        },
        {
            "location": "/advanced/simnet/",
            "text": "Simnet\n\u00b6\n\n\n\n\n Overview\n\u00b6\n\n\nWhen developing Decred applications or testing potential changes, it is often extremely useful to have a test network where difficulty levels are low enough to generate blocks as needed.\n\n\nIn order to facilitate these scenarios, hcd provides a simulation network (\n--simnet\n).  The following is an overview of the most important properties that distinguish it from the main network:\n\n\n\n\nThe difficulty starts extremely low to enable fast CPU mining of blocks\n\n\nNetworking changes:\n\n\nAll code related to peer discovery and IP address dissemination is disabled to help ensure the network remains private\n\n\nThe peer and RPC network ports are different\n\n\nA unique network byte sequence is used in the peer-to-peer message protocol so the blocks can\u2019t accidentally be crossed with the main network\n\n\n\n\n\n\nAll chain and payment address parameters are unique to prevent confusion with the main network:\n\n\nDifferent genesis block\n\n\nPayment addresses start with different prefixes:\n\n\nStandard pay-to-pubkeyhash (P2PKH) starts with uppercase \nS\n\n\nStandard pay-to-scripthash (P2SH) starts with lowercase \ns\n\n\n\n\n\n\nExported hierarchical deterministic extended keys (BIP32) start with different prefixes:\n\n\nPublic extended keys start with \nspub\n\n\nPrivate extended keys start with \nsprv\n\n\n\n\n\n\nThe BIP44 coin type used in HD key paths is lowercase \ns\n\n\n\n\n\n\n\n\n\n\n Getting Started\n\u00b6\n\n\nRunning a single \nhcd\n node on simnet is simply starting \nhcd\n with the \n--simnet\n flag.  However, in order to be really useful, you\u2019ll typically want to be able to send coins amongst addresses which implies that blocks will need to be mined and interfacing with a wallet will be needed.\n\n\nIn addition, since there are effectively no coins yet on the new private network, an initial series of blocks will need to be mined which pay to an address you own so there are usable coins to spend.\n\n\nAs previously mentioned, simnet uses unique addresses to prevent confusion with the main network.  Thus, it means that a wallet which supports the address format must be used.  For this, \nhcwallet\n with the \n--simnet\n flag can be used.\n\n\nThe following is a command reference to get going:\n\n\nNOTE: All of these commands can be simplified by creating config files and making use of them, however the commands here use all switches on the command line to show exactly what is needed for each.\n\n\n\n\n\n\nStart hcd on simnet:\n\n\n$ hcd --simnet --rpcuser=<username> --rpcpass=<password>\n\n\n\n\n\n\nCreate a new simnet wallet:\n\n\n$ hcwallet --simnet --create\n\n\n\n\n\n\nStart hcwallet on simnet:\n\n\n$ hcwallet --simnet --username=<username> --password=<password>\n\n\n\n\n\n\nCreate a new simnet Decred address:\n\n\n$ hcctl --simnet --wallet --rpcuser=<username> --rpcpass=<password> getnewaddress\n\n\n\n\n\n\nStop the initial hcd process and restart it with the mining address set to the output from the previous command:\n\n\n$ hcd --simnet --rpcuser=<username> --rpcpass=<password> --miningaddr=<S....>\n\n\n\n\n\n\nInstruct hcd to generate enough initial blocks for the first coinbase to mature:\n\n\n$ hcctl --simnet --rpcuser=<username> --rpcpass=<password> generate 100\n\n\n\n\n\n\nCheck the wallet balance to ensure the coins are available:\n\n\n$ hcctl --simnet --wallet --rpcuser=<username> --rpcpass=<password> getbalance\n\n\n\n\n\n\nAt this point, there is a fully functional private simnet with coins available to send to other simnet addresses.  Any time one or more transactions are sent, a \ngenerate 1\n RPC must be issued to mine a new block with the transactions included.",
            "title": "Simnet"
        },
        {
            "location": "/advanced/simnet/#simnet",
            "text": "",
            "title": " Simnet"
        },
        {
            "location": "/advanced/simnet/#overview",
            "text": "When developing Decred applications or testing potential changes, it is often extremely useful to have a test network where difficulty levels are low enough to generate blocks as needed.  In order to facilitate these scenarios, hcd provides a simulation network ( --simnet ).  The following is an overview of the most important properties that distinguish it from the main network:   The difficulty starts extremely low to enable fast CPU mining of blocks  Networking changes:  All code related to peer discovery and IP address dissemination is disabled to help ensure the network remains private  The peer and RPC network ports are different  A unique network byte sequence is used in the peer-to-peer message protocol so the blocks can\u2019t accidentally be crossed with the main network    All chain and payment address parameters are unique to prevent confusion with the main network:  Different genesis block  Payment addresses start with different prefixes:  Standard pay-to-pubkeyhash (P2PKH) starts with uppercase  S  Standard pay-to-scripthash (P2SH) starts with lowercase  s    Exported hierarchical deterministic extended keys (BIP32) start with different prefixes:  Public extended keys start with  spub  Private extended keys start with  sprv    The BIP44 coin type used in HD key paths is lowercase  s",
            "title": " Overview"
        },
        {
            "location": "/advanced/simnet/#getting-started",
            "text": "Running a single  hcd  node on simnet is simply starting  hcd  with the  --simnet  flag.  However, in order to be really useful, you\u2019ll typically want to be able to send coins amongst addresses which implies that blocks will need to be mined and interfacing with a wallet will be needed.  In addition, since there are effectively no coins yet on the new private network, an initial series of blocks will need to be mined which pay to an address you own so there are usable coins to spend.  As previously mentioned, simnet uses unique addresses to prevent confusion with the main network.  Thus, it means that a wallet which supports the address format must be used.  For this,  hcwallet  with the  --simnet  flag can be used.  The following is a command reference to get going:  NOTE: All of these commands can be simplified by creating config files and making use of them, however the commands here use all switches on the command line to show exactly what is needed for each.    Start hcd on simnet:  $ hcd --simnet --rpcuser=<username> --rpcpass=<password>    Create a new simnet wallet:  $ hcwallet --simnet --create    Start hcwallet on simnet:  $ hcwallet --simnet --username=<username> --password=<password>    Create a new simnet Decred address:  $ hcctl --simnet --wallet --rpcuser=<username> --rpcpass=<password> getnewaddress    Stop the initial hcd process and restart it with the mining address set to the output from the previous command:  $ hcd --simnet --rpcuser=<username> --rpcpass=<password> --miningaddr=<S....>    Instruct hcd to generate enough initial blocks for the first coinbase to mature:  $ hcctl --simnet --rpcuser=<username> --rpcpass=<password> generate 100    Check the wallet balance to ensure the coins are available:  $ hcctl --simnet --wallet --rpcuser=<username> --rpcpass=<password> getbalance    At this point, there is a fully functional private simnet with coins available to send to other simnet addresses.  Any time one or more transactions are sent, a  generate 1  RPC must be issued to mine a new block with the transactions included.",
            "title": " Getting Started"
        },
        {
            "location": "/research/overview/",
            "text": "Overview\n\u00b6\n\n\n\n\nDistributed timestamping protocols were first applied to decentralizing a financial network in the ground-breaking paper on Bitcoin by Nakamoto\n1\n. The field has seen explosive research follow-up from both amateurs and professionals, competing to offer extensions, adjustments, improvements, and refinements of the existing protocol. Notable implementations of new ideas include Ethereum\n2\n, which extended scripting, CryptoNote\n3\n, which refined privacy, and Sidechains\n4\n, which investigated two-way pegs with 1:1 Bitcoin tokens. These protocols all utilize proof-of-work (PoW) as originally described in the Bitcoin whitepaper.\n\n\nA common extension to the Bitcoin protocol modifies the consensus mechanism to either completely or partially use proof-of-stake (PoS), or the use of one\u2019s stake (tokens) rather than one\u2019s computational power to participate in the timestamping process. The first proof-of-stake blockchain based on the Bitcoin protocol was implemented in 2012 by King and Nadal\n5\n, and includes both PoW and PoS that gradually skew towards complete PoS over time. Criticisms of pure PoS consensus systems have themselves been abundant\n6\n \n7\n, with the most vehement opposition coming from those working with purely PoW blockchains. The most common argument against PoS for distributed timestamping is \u201cnothing-at-stake\u201d or \u201ccostless simulation\u201d, describing the systematic instability resulting from stakeholders being able to generate alternatively timestamped histories with no cost to themselves.\n\n\nDespite the controversy, it is apparent that systems with a PoS overlay dependent on a PoW timestamping system may be able to independently achieve consensus. This is mathematically explored by Bentov and colleagues\n8\n in a paper on their scheme, proof-of-activity (PoA), and appears to be a viable extension to the PoW protocols that may enable some interesting new properties. A similar design called MC2 was earlier proposed by Mackenzie in 2013\n9\n. Here we describe the construction and implementation of a similar consensus system that we have named \u201cDecred\u201d.\n\n\nResearch work in Decred is currently organized around the following subsections:\n\n\n\n\nHybrid Design\n\n\nDecentralized Stake Pooling\n\n\nElliptic Curve Signature Algorithms\n\n\nBLAKE-256 Hash Function\n\n\nScript Extensions\n\n\nSignature Script Isolation and Fraud Proofs\n\n\nTransaction Extensions\n\n\nSchnorr Signatures\n\n\nMiscellaneous Improvements\n\n\n\n\n References\n\u00b6\n\n\n\n\n\n\n\n\n\n\nNakamoto S. 2008. \nBitcoin: A peer-to-peer electronic cash system\n.\u00a0\n\u21a9\n\n\n\n\n\n\nButerin V. 2014. \nA Next-generation smart contract and decentralized application platform\n.\u00a0\n\u21a9\n\n\n\n\n\n\nvon Saberhagen N. 2013. \nCryptoNote v2.0\n.\u00a0\n\u21a9\n\n\n\n\n\n\nBack A., Corallo M., Dashjr L., Friedenbach M., Maxwell G., Miller A., Poelstra A., Timon A., Wuille P. 2014. \nEnabling Bitcoin innovations with pegged sidechains\n.\u00a0\n\u21a9\n\n\n\n\n\n\nKing S. and Nadal S. 2012. \nPPCoin: Peer-to-peer crypto-currency with proof-of-stake\n.\u00a0\n\u21a9\n\n\n\n\n\n\nBentov I., Gabizon A., Mizrahi A. 2015. \nCryptocurrencies without proof-of-work\n.\u00a0\n\u21a9\n\n\n\n\n\n\nPoelstra A. 2015. \nOn stake and consensus\n.\u00a0\n\u21a9\n\n\n\n\n\n\nBentov I., Lee C., Mizrahi A., Rosenfeld M. 2014. \nProof-of-activity: Extending Bitcoin\u2019s proof-of-work via proof-of-stake\n.\u00a0\n\u21a9\n\n\n\n\n\n\nMackenzie A. 2013. \nMEMCOIN2: A hybrid proof-of-work, proof-of-stake crypto-currency\n.\u00a0\n\u21a9",
            "title": "Overview"
        },
        {
            "location": "/research/overview/#overview",
            "text": "Distributed timestamping protocols were first applied to decentralizing a financial network in the ground-breaking paper on Bitcoin by Nakamoto 1 . The field has seen explosive research follow-up from both amateurs and professionals, competing to offer extensions, adjustments, improvements, and refinements of the existing protocol. Notable implementations of new ideas include Ethereum 2 , which extended scripting, CryptoNote 3 , which refined privacy, and Sidechains 4 , which investigated two-way pegs with 1:1 Bitcoin tokens. These protocols all utilize proof-of-work (PoW) as originally described in the Bitcoin whitepaper.  A common extension to the Bitcoin protocol modifies the consensus mechanism to either completely or partially use proof-of-stake (PoS), or the use of one\u2019s stake (tokens) rather than one\u2019s computational power to participate in the timestamping process. The first proof-of-stake blockchain based on the Bitcoin protocol was implemented in 2012 by King and Nadal 5 , and includes both PoW and PoS that gradually skew towards complete PoS over time. Criticisms of pure PoS consensus systems have themselves been abundant 6   7 , with the most vehement opposition coming from those working with purely PoW blockchains. The most common argument against PoS for distributed timestamping is \u201cnothing-at-stake\u201d or \u201ccostless simulation\u201d, describing the systematic instability resulting from stakeholders being able to generate alternatively timestamped histories with no cost to themselves.  Despite the controversy, it is apparent that systems with a PoS overlay dependent on a PoW timestamping system may be able to independently achieve consensus. This is mathematically explored by Bentov and colleagues 8  in a paper on their scheme, proof-of-activity (PoA), and appears to be a viable extension to the PoW protocols that may enable some interesting new properties. A similar design called MC2 was earlier proposed by Mackenzie in 2013 9 . Here we describe the construction and implementation of a similar consensus system that we have named \u201cDecred\u201d.  Research work in Decred is currently organized around the following subsections:   Hybrid Design  Decentralized Stake Pooling  Elliptic Curve Signature Algorithms  BLAKE-256 Hash Function  Script Extensions  Signature Script Isolation and Fraud Proofs  Transaction Extensions  Schnorr Signatures  Miscellaneous Improvements",
            "title": " Overview"
        },
        {
            "location": "/research/overview/#references",
            "text": "Nakamoto S. 2008.  Bitcoin: A peer-to-peer electronic cash system .\u00a0 \u21a9    Buterin V. 2014.  A Next-generation smart contract and decentralized application platform .\u00a0 \u21a9    von Saberhagen N. 2013.  CryptoNote v2.0 .\u00a0 \u21a9    Back A., Corallo M., Dashjr L., Friedenbach M., Maxwell G., Miller A., Poelstra A., Timon A., Wuille P. 2014.  Enabling Bitcoin innovations with pegged sidechains .\u00a0 \u21a9    King S. and Nadal S. 2012.  PPCoin: Peer-to-peer crypto-currency with proof-of-stake .\u00a0 \u21a9    Bentov I., Gabizon A., Mizrahi A. 2015.  Cryptocurrencies without proof-of-work .\u00a0 \u21a9    Poelstra A. 2015.  On stake and consensus .\u00a0 \u21a9    Bentov I., Lee C., Mizrahi A., Rosenfeld M. 2014.  Proof-of-activity: Extending Bitcoin\u2019s proof-of-work via proof-of-stake .\u00a0 \u21a9    Mackenzie A. 2013.  MEMCOIN2: A hybrid proof-of-work, proof-of-stake crypto-currency .\u00a0 \u21a9",
            "title": "References"
        },
        {
            "location": "/research/hybrid-design/",
            "text": "Hybrid Design\n\u00b6\n\n\n\n\nThe major contrast to the follow-the-satoshi scheme previously described\n1\n is a new lottery system in which tickets must be purchased and then wait on a maturity period before they can be selected and spent. Selection of tickets for a block is performed lexicographically from a mature ticket pool based on pseudorandomness contained in the block header. Because manipulation of this pseudorandomness is difficult in a PoW system, manipulation of ticket selection is associated with a fundamental cost to the PoW miner. The selection of tickets over a time period can be described by a probability density function similar to the probability of obtaining a block in PoW at a constant hash rate over time at a constant difficulty\n2\n, yielding a probability distribution with a mode approximately equal to half the ticket pool size. The price to purchase a ticket is regulated by a new stake difficulty that is determined by the exponentially weighted average number of tickets purchased and the size of the mature ticket pool in prior blocks.\n\n\nThe validation of PoW blocks is explained by the following steps:\n\n\n\n\nA block is mined by a PoW miner, who selects the transactions to put inside it. Stake system related transactions are inserted into the UTXO set.\n\n\nPoS miners vote on the block by producing a vote transaction from their ticket. The vote both enables a block to be built on top of the previous block and selects whether or not the previous regular transaction tree (containing the coinbase and non-stake related transactions) is valid.\n\n\nAnother PoW miner begins building a block, inserting the PoS miners\u2019 votes. A majority of the votes cast must be included in the following block for that block to be accepted by the network. Of the vote transactions in this new block, the PoW miner checks a flag to see if the PoS miner indicated if the block\u2019s regular transaction tree was valid. These voting flags are tallied and, based on majority vote, a bit flag is set in this block to indicate if the previous block\u2019s regular transaction tree is valid.\n\n\nA nonce is found that satisfies the network difficulty, and the block is inserted into the blockchain. If the previous block\u2019s regular transaction tree was validated, insert these transactions into the UTXO set. Go to 1.\n\n\n\n\nTo discourage manipulation of the included votes, a linear subsidy penalty is applied to the current block if they fail to include all the voting transactions into their block. The \u201csoft\u201d penalty of invalidating the previous transaction tree helps prevent the discarding of work, which is necessary to secure the system, and makes the assumption that the next block will be obtained by a miner who is disinterested in preserving the subsidy of the former block in favour of their own. Even in the case that this is not true, a malicious miner with a high hash rate will still need at least \n(\\text{number for majority}/2)+1\n votes in favour of their previous block\u2019s transaction tree in order to produce a block that gives them any subsidy from the previous block.\n\n\nBit flags are explicitly added to both the block header and votes so that either miner can easily vote in new hard or soft forks.\n\n\n\n\n References\n\u00b6\n\n\n\n\n\n\n\n\n\n\nBentov I., Lee C., Mizrahi A., Rosenfeld M. 2014. \nProof-of-activity: Extending Bitcoin\u2019s proof-of-work via proof-of-stake\n.\u00a0\n\u21a9\n\n\n\n\n\n\nNakamoto S. 2008. \nBitcoin: A peer-to-peer electronic cash system\n.\u00a0\n\u21a9",
            "title": "Hybrid Design"
        },
        {
            "location": "/research/hybrid-design/#hybrid-design",
            "text": "The major contrast to the follow-the-satoshi scheme previously described 1  is a new lottery system in which tickets must be purchased and then wait on a maturity period before they can be selected and spent. Selection of tickets for a block is performed lexicographically from a mature ticket pool based on pseudorandomness contained in the block header. Because manipulation of this pseudorandomness is difficult in a PoW system, manipulation of ticket selection is associated with a fundamental cost to the PoW miner. The selection of tickets over a time period can be described by a probability density function similar to the probability of obtaining a block in PoW at a constant hash rate over time at a constant difficulty 2 , yielding a probability distribution with a mode approximately equal to half the ticket pool size. The price to purchase a ticket is regulated by a new stake difficulty that is determined by the exponentially weighted average number of tickets purchased and the size of the mature ticket pool in prior blocks.  The validation of PoW blocks is explained by the following steps:   A block is mined by a PoW miner, who selects the transactions to put inside it. Stake system related transactions are inserted into the UTXO set.  PoS miners vote on the block by producing a vote transaction from their ticket. The vote both enables a block to be built on top of the previous block and selects whether or not the previous regular transaction tree (containing the coinbase and non-stake related transactions) is valid.  Another PoW miner begins building a block, inserting the PoS miners\u2019 votes. A majority of the votes cast must be included in the following block for that block to be accepted by the network. Of the vote transactions in this new block, the PoW miner checks a flag to see if the PoS miner indicated if the block\u2019s regular transaction tree was valid. These voting flags are tallied and, based on majority vote, a bit flag is set in this block to indicate if the previous block\u2019s regular transaction tree is valid.  A nonce is found that satisfies the network difficulty, and the block is inserted into the blockchain. If the previous block\u2019s regular transaction tree was validated, insert these transactions into the UTXO set. Go to 1.   To discourage manipulation of the included votes, a linear subsidy penalty is applied to the current block if they fail to include all the voting transactions into their block. The \u201csoft\u201d penalty of invalidating the previous transaction tree helps prevent the discarding of work, which is necessary to secure the system, and makes the assumption that the next block will be obtained by a miner who is disinterested in preserving the subsidy of the former block in favour of their own. Even in the case that this is not true, a malicious miner with a high hash rate will still need at least  (\\text{number for majority}/2)+1  votes in favour of their previous block\u2019s transaction tree in order to produce a block that gives them any subsidy from the previous block.  Bit flags are explicitly added to both the block header and votes so that either miner can easily vote in new hard or soft forks.",
            "title": " Hybrid Design"
        },
        {
            "location": "/research/hybrid-design/#references",
            "text": "Bentov I., Lee C., Mizrahi A., Rosenfeld M. 2014.  Proof-of-activity: Extending Bitcoin\u2019s proof-of-work via proof-of-stake .\u00a0 \u21a9    Nakamoto S. 2008.  Bitcoin: A peer-to-peer electronic cash system .\u00a0 \u21a9",
            "title": "References"
        },
        {
            "location": "/research/decentralized-stake-pooling/",
            "text": "Decentralized Stake Pooling\n\u00b6\n\n\n\n\nOne issue arising from previous PoS designs is how to perform pooling in PoS mining analogous to PoW mining pooling.\n\n\nCoolsnady solves this problem by allowing multiple inputs into a ticket purchase transaction and committing to the UTXO subsidy amount for each input proportionally, while also committing to a new output public key or script for these proportional rewards. The subsidy is then given to those generating the ticket in a trustless manner, and the ticket can be signed round robin before submission to the network. Importantly, control over the production of the vote itself is given to another public key or script which can not manipulate the subsidy given to the recipients. Production of the vote in a distributed manner can be achieved by using a script in the ticket that allows for multiple signers.",
            "title": "Decentralized Stake Pooling"
        },
        {
            "location": "/research/decentralized-stake-pooling/#decentralized-stake-pooling",
            "text": "One issue arising from previous PoS designs is how to perform pooling in PoS mining analogous to PoW mining pooling.  Coolsnady solves this problem by allowing multiple inputs into a ticket purchase transaction and committing to the UTXO subsidy amount for each input proportionally, while also committing to a new output public key or script for these proportional rewards. The subsidy is then given to those generating the ticket in a trustless manner, and the ticket can be signed round robin before submission to the network. Importantly, control over the production of the vote itself is given to another public key or script which can not manipulate the subsidy given to the recipients. Production of the vote in a distributed manner can be achieved by using a script in the ticket that allows for multiple signers.",
            "title": " Decentralized Stake Pooling"
        },
        {
            "location": "/research/elliptic-curve-signature-algorithms/",
            "text": "Elliptic Curve Signature Algorithms\n\u00b6\n\n\n\n\nAlthough secp256k1 is widely considered to have a secure choice of elliptic curve parameters, some questions about the origin of the curve remain. For example, the selection of the Koblitz curve,\n\n\n\n\n(y^2 + xy = x^3 + ax^2 + b \\text{ and } a = a^2 \\text{, } b = b^2 \\text{; } a = 1 \\text{ or } 2 \\text{, } b != 0)\n\n\n\n\nis typically done by enumerating the binary extension Galois fields \nGF(2^m)\n where \nm\n is a prime in the range {\n0\n, \n...\n, higher limit} and \nx,y \\in GF(2^m)\n\n\n1\n. For 128-bit security, \nm\n is required to be \n\\geqslant 257\n and typically the smallest prime possible in this range to facilitate fast calculation. In this case, the obvious choice for \nm\n is \n277\\text{, } a = 0\n; despite the existence of this appropriate $m$ value being known by the curators of the curve parameters\n2\n and the fact that it was the most computationally efficient solution, the parameters \nm = 283\n and \na = 0\n were selected out of three possible options:\n\n\n\n\n(m = 277\\text{, } a = 0\\text{; } m = 283\\text{, } a = 0\\text{; } m = 283\\text{, } a = 1)\n.\n\n\nFor all other Koblitz curve specifications, the most obvious \nm\n value is selected. Although this is curious, there are no known attacks that can be applied by using a slightly larger $m$ value for the Galois field. Other objections to the parameters used by secp256k1 have also been raised\n3\n.\n\n\nAnother extremely popular digital signature algorithm (DSA) with 128-bits of security is Ed25519\n4\n. This uses the EdDSA signing algorithm over a curve birationally equivalent to Curve25519 and is widely employed today. Unlike secp256k1\u2019s ECDSA, Ed25519 uses simpler Schnorr signatures that are provably secure in a random oracle model (See: \nSchnorr Signatures\n).\n\n\nSchnorr signatures have also been proposed for Bitcoin\n5\n. However, instead of using an OP code exclusive to Schnorr signatures utilizing the curve parameters for secp256k1, Decred instead uses a new OP code OP_CHECKSIGALT to verify an unlimited number of new signature schemes. In the current implementation, both secp256k1 Schnorr signatures and Ed25519 signatures are available to supplement secp256k1 ECDSA signatures. In the future, it is trivial to add new signature schemes in a soft fork, such as those that are quantum secure. Having these two Schnorr suites available also allows for the generation of simple group signatures occupying the same space of a normal signature\n6\n, which for both is implemented. In the future, threshold signatures using dealerless secret sharing will also enable t-of-n threshold signatures occupying the same amount of space\n7\n.\n\n\n\n\n References\n\u00b6\n\n\n\n\n\n\n\n\n\n\nPornin T. 2013. \nStackExchange Cryptography: Should we trust the NIST-recommended ECC parameters?\n\u00a0\n\u21a9\n\n\n\n\n\n\nSolinas J. 2000. \nEfficient arithmetic on Koblitz curves\n.\u00a0\n\u21a9\n\n\n\n\n\n\nBernstein D. and Lange T. 2014. \nSafeCurves: Choosing safe curves for elliptic-curve cryptography\n.\u00a0\n\u21a9\n\n\n\n\n\n\nBernstein D., Duif N., Lange T., Schwabe P., Yang B. 2012. \nHigh-speed high-security signatures\n.\u00a0\n\u21a9\n\n\n\n\n\n\nOsuntokun O. 2015. \nOP_SCHNORRCHECKSIG: Exploring Schnorr Signatures as an alternative to ECDSA for Bitcoin\n.\u00a0\n\u21a9\n\n\n\n\n\n\nPetersen T. 1992. \nDistributed provers and verifiable secret sharing based on the discrete logarithm problem\n.\u00a0\n\u21a9\n\n\n\n\n\n\nStinson D. and Strobl R. 2001. Provably secure distributed Schnorr signatures and a (t,n) threshold scheme for implicit certificates.\u00a0\n\u21a9",
            "title": "Elliptic Curve Signature Algorithms"
        },
        {
            "location": "/research/elliptic-curve-signature-algorithms/#elliptic-curve-signature-algorithms",
            "text": "Although secp256k1 is widely considered to have a secure choice of elliptic curve parameters, some questions about the origin of the curve remain. For example, the selection of the Koblitz curve,   (y^2 + xy = x^3 + ax^2 + b \\text{ and } a = a^2 \\text{, } b = b^2 \\text{; } a = 1 \\text{ or } 2 \\text{, } b != 0)   is typically done by enumerating the binary extension Galois fields  GF(2^m)  where  m  is a prime in the range { 0 ,  ... , higher limit} and  x,y \\in GF(2^m)  1 . For 128-bit security,  m  is required to be  \\geqslant 257  and typically the smallest prime possible in this range to facilitate fast calculation. In this case, the obvious choice for  m  is  277\\text{, } a = 0 ; despite the existence of this appropriate $m$ value being known by the curators of the curve parameters 2  and the fact that it was the most computationally efficient solution, the parameters  m = 283  and  a = 0  were selected out of three possible options:   (m = 277\\text{, } a = 0\\text{; } m = 283\\text{, } a = 0\\text{; } m = 283\\text{, } a = 1) .  For all other Koblitz curve specifications, the most obvious  m  value is selected. Although this is curious, there are no known attacks that can be applied by using a slightly larger $m$ value for the Galois field. Other objections to the parameters used by secp256k1 have also been raised 3 .  Another extremely popular digital signature algorithm (DSA) with 128-bits of security is Ed25519 4 . This uses the EdDSA signing algorithm over a curve birationally equivalent to Curve25519 and is widely employed today. Unlike secp256k1\u2019s ECDSA, Ed25519 uses simpler Schnorr signatures that are provably secure in a random oracle model (See:  Schnorr Signatures ).  Schnorr signatures have also been proposed for Bitcoin 5 . However, instead of using an OP code exclusive to Schnorr signatures utilizing the curve parameters for secp256k1, Decred instead uses a new OP code OP_CHECKSIGALT to verify an unlimited number of new signature schemes. In the current implementation, both secp256k1 Schnorr signatures and Ed25519 signatures are available to supplement secp256k1 ECDSA signatures. In the future, it is trivial to add new signature schemes in a soft fork, such as those that are quantum secure. Having these two Schnorr suites available also allows for the generation of simple group signatures occupying the same space of a normal signature 6 , which for both is implemented. In the future, threshold signatures using dealerless secret sharing will also enable t-of-n threshold signatures occupying the same amount of space 7 .",
            "title": " Elliptic Curve Signature Algorithms"
        },
        {
            "location": "/research/elliptic-curve-signature-algorithms/#references",
            "text": "Pornin T. 2013.  StackExchange Cryptography: Should we trust the NIST-recommended ECC parameters? \u00a0 \u21a9    Solinas J. 2000.  Efficient arithmetic on Koblitz curves .\u00a0 \u21a9    Bernstein D. and Lange T. 2014.  SafeCurves: Choosing safe curves for elliptic-curve cryptography .\u00a0 \u21a9    Bernstein D., Duif N., Lange T., Schwabe P., Yang B. 2012.  High-speed high-security signatures .\u00a0 \u21a9    Osuntokun O. 2015.  OP_SCHNORRCHECKSIG: Exploring Schnorr Signatures as an alternative to ECDSA for Bitcoin .\u00a0 \u21a9    Petersen T. 1992.  Distributed provers and verifiable secret sharing based on the discrete logarithm problem .\u00a0 \u21a9    Stinson D. and Strobl R. 2001. Provably secure distributed Schnorr signatures and a (t,n) threshold scheme for implicit certificates.\u00a0 \u21a9",
            "title": "References"
        },
        {
            "location": "/research/blake-256-hash-function/",
            "text": "BLAKE-256 Hash Function\n\u00b6\n\n\n\n\nSHA256, used in Bitcoin, has a number of technical shortcomings due to its Merkle-Damg\u00e5rd construction. These vulnerabilities led to the SHA3 competition for a new hash function based on a different fundamental construction. Decred has chosen BLAKE256 as its hash function, a finalist for the competition\n1\n \n2\n. The hash function is based around a HAIFA construction that incorporates a variation of the ChaCha stream cipher by Bernstein. The hash function is notable for its high performance on x86-64 microarchitecture, being faster for short messages than SHA256\n3\n despite being considered to have a much higher security margin at 14-rounds.\n\n\n\n\n References\n\u00b6\n\n\n\n\n\n\n\n\n\n\nAumasson J., Henzen L., Meier W., Phan R. 2010. \nSHA-3 proposal BLAKE\n.\u00a0\n\u21a9\n\n\n\n\n\n\nAumasson J., Henzen L., Meier W., Phan R. 2014. The hash function BLAKE.\u00a0\n\u21a9\n\n\n\n\n\n\nBernstein D. and Lange T. 2013. \neBACS: ECRYPT benchmarking of cryptographic systems\n.\u00a0\n\u21a9",
            "title": "BLAKE-256 Hash Function"
        },
        {
            "location": "/research/blake-256-hash-function/#blake-256-hash-function",
            "text": "SHA256, used in Bitcoin, has a number of technical shortcomings due to its Merkle-Damg\u00e5rd construction. These vulnerabilities led to the SHA3 competition for a new hash function based on a different fundamental construction. Decred has chosen BLAKE256 as its hash function, a finalist for the competition 1   2 . The hash function is based around a HAIFA construction that incorporates a variation of the ChaCha stream cipher by Bernstein. The hash function is notable for its high performance on x86-64 microarchitecture, being faster for short messages than SHA256 3  despite being considered to have a much higher security margin at 14-rounds.",
            "title": " BLAKE-256 Hash Function"
        },
        {
            "location": "/research/blake-256-hash-function/#references",
            "text": "Aumasson J., Henzen L., Meier W., Phan R. 2010.  SHA-3 proposal BLAKE .\u00a0 \u21a9    Aumasson J., Henzen L., Meier W., Phan R. 2014. The hash function BLAKE.\u00a0 \u21a9    Bernstein D. and Lange T. 2013.  eBACS: ECRYPT benchmarking of cryptographic systems .\u00a0 \u21a9",
            "title": "References"
        },
        {
            "location": "/research/script-extensions/",
            "text": "Script Extensions\n\u00b6\n\n\n\n\nAside from the previously mentioned OP_CHECKSIGALT and OP_CHECKSIGALTVERIFY, other modifications to Bitcoin scripting have been made. A version byte has been added to output scripts to enable simple soft forking to new scripting languages, as first suggested by Wuille\n1\n. All math and logic related OP codes have been re-enabled and now operate on int32 registers. Various byte string manipulation OP codes have also been implemented and re-enabled. The remaining unused Bitcoin OP codes have been repurposed for future soft forks. Some longstanding bugs in the Bitcoin scripting language have been also been fixed\n2\n \n3\n.\n\n\n\n\n References\n\u00b6\n\n\n\n\n\n\n\n\n\n\nWuille P. 2015. \nSegregated witness for Bitcoin\n.\u00a0\n\u21a9\n\n\n\n\n\n\nTodd P. \nThe difficulty of writing consensus critical code: The SIGHASH_SINGLE bug\n.\u00a0\n\u21a9\n\n\n\n\n\n\nFranco P. Understanding Bitcoin, 6.3: Multisignature (M-of-N) Transactions.\u00a0\n\u21a9",
            "title": "Script Extensions"
        },
        {
            "location": "/research/script-extensions/#script-extensions",
            "text": "Aside from the previously mentioned OP_CHECKSIGALT and OP_CHECKSIGALTVERIFY, other modifications to Bitcoin scripting have been made. A version byte has been added to output scripts to enable simple soft forking to new scripting languages, as first suggested by Wuille 1 . All math and logic related OP codes have been re-enabled and now operate on int32 registers. Various byte string manipulation OP codes have also been implemented and re-enabled. The remaining unused Bitcoin OP codes have been repurposed for future soft forks. Some longstanding bugs in the Bitcoin scripting language have been also been fixed 2   3 .",
            "title": " Script Extensions"
        },
        {
            "location": "/research/script-extensions/#references",
            "text": "Wuille P. 2015.  Segregated witness for Bitcoin .\u00a0 \u21a9    Todd P.  The difficulty of writing consensus critical code: The SIGHASH_SINGLE bug .\u00a0 \u21a9    Franco P. Understanding Bitcoin, 6.3: Multisignature (M-of-N) Transactions.\u00a0 \u21a9",
            "title": "References"
        },
        {
            "location": "/research/signature-script-isolation-and-fraud-proofs/",
            "text": "Signature Script Isolation and Fraud Proofs\n\u00b6\n\n\n\n\nTo prevent transaction malleability, the ability to generate a transaction with the same input references and outputs and yet a different transaction ID, input scripts have been removed from the calculation of the transaction hash. The origins of this modification have been controversial, although it appears to have been implemented in both CryptoNote coins and sidechains in the past\n1\n \n2\n. It is now being proposed for Bitcoin as a soft fork referred to as \u201cSegregated Witness\u201d\n3\n. As in the Elements sidechains implementation, commitments to the witness data are included in the merkle tree of the block\n2\n. In addition, fraud proofs, as suggested for Bitcoin\u2019s soft fork\n3\n, are set by miners and also committed to as part of the data in the merkle tree.\n\n\n\n\n References\n\u00b6\n\n\n\n\n\n\n\n\n\n\nvon Saberhagen N. 2013. \nCryptoNote v2.0\n.\u00a0\n\u21a9\n\n\n\n\n\n\nMaxwell G. 2015. \nBringing new elements to Bitcoin with sidechains\n.\u00a0\n\u21a9\n\u21a9\n\n\n\n\n\n\nWuille P. 2015. \nSegregated witness for Bitcoin\n.\u00a0\n\u21a9\n\u21a9",
            "title": "Signature Script Isolation and Fraud Proofs"
        },
        {
            "location": "/research/signature-script-isolation-and-fraud-proofs/#signature-script-isolation-and-fraud-proofs",
            "text": "To prevent transaction malleability, the ability to generate a transaction with the same input references and outputs and yet a different transaction ID, input scripts have been removed from the calculation of the transaction hash. The origins of this modification have been controversial, although it appears to have been implemented in both CryptoNote coins and sidechains in the past 1   2 . It is now being proposed for Bitcoin as a soft fork referred to as \u201cSegregated Witness\u201d 3 . As in the Elements sidechains implementation, commitments to the witness data are included in the merkle tree of the block 2 . In addition, fraud proofs, as suggested for Bitcoin\u2019s soft fork 3 , are set by miners and also committed to as part of the data in the merkle tree.",
            "title": " Signature Script Isolation and Fraud Proofs"
        },
        {
            "location": "/research/signature-script-isolation-and-fraud-proofs/#references",
            "text": "von Saberhagen N. 2013.  CryptoNote v2.0 .\u00a0 \u21a9    Maxwell G. 2015.  Bringing new elements to Bitcoin with sidechains .\u00a0 \u21a9 \u21a9    Wuille P. 2015.  Segregated witness for Bitcoin .\u00a0 \u21a9 \u21a9",
            "title": "References"
        },
        {
            "location": "/research/transaction-extensions/",
            "text": "Transactions Extensions\n\u00b6\n\n\n\n\nTransaction expiry has been added, which allows one to prune transactions from the memory pool if the blockchain has reached a certain height\n1\n. Previously the only way to remove a transaction from the mempool was to double spend it.\n\n\n\n\n References\n\u00b6\n\n\n\n\n\n\n\n\n\n\nByteCoin. 2010. \nNeed OP_BLOCKNUMBER to allow \u201ctime\u201d limited transactions\n.\u00a0\n\u21a9",
            "title": "Transaction Extensions"
        },
        {
            "location": "/research/transaction-extensions/#transactions-extensions",
            "text": "Transaction expiry has been added, which allows one to prune transactions from the memory pool if the blockchain has reached a certain height 1 . Previously the only way to remove a transaction from the mempool was to double spend it.",
            "title": " Transactions Extensions"
        },
        {
            "location": "/research/transaction-extensions/#references",
            "text": "ByteCoin. 2010.  Need OP_BLOCKNUMBER to allow \u201ctime\u201d limited transactions .\u00a0 \u21a9",
            "title": "References"
        },
        {
            "location": "/research/schnorr-signatures/",
            "text": "Schnorr Signatures\n\u00b6\n\n\n\n\nSchnorr signatures have been proposed for Bitcoin. They have also been used extensively in other cryptocurrencies, such as Nxt and CryptoNote coins. In the simplest case, a Schnorr signature ECDSA cryptosystem can be described as follows:\n\n\n\n\n\n\ny = xG\n where \ny\n is the public key point on the curve, \nx\n is the private scalar, \nG\n is the curve generator.\n\n\n\n\nr = kG\n where \nr\n is the point on the curve resulting from the multiplication of \nk\n, the nonce scalar, by the generator.\n\n\n\n\nh = H(M || r)\n where \nH\n is a secure hash function, \nM\n is the message (usually a 32 byte hash), and \nr\n is the encoded point previously described. \n||\n denotes concatenation.\n\n\n\n\ns = k - hx\n where \ns\n is the scalar denoted from \nk - hx\n.\n\n\nThe signature is \n(r,s)\n, and verification is simply \nH(M || r) == hQ + sG\n.\n\n\n\n\nIn the above, multiplications by a capital letter (e.g., \nkG\n) are point multiplications by a scalar, and so always result in a point on the curve. Addition of these points results in another point. Additions and multiplications of scalars amongst themselves is the same as regular multiplication you would do with any integer. It\u2019s important to note that multiplying a point by a scalar is considered an irreversible step, because the calculation of the scalar from the new point defaults to the discrete logarithm problem.\n\n\nFrom the above it is clear that \nr\n is a point on the curve, while \ns\n is a scalar. Consider the group of signers represented by \nx_{sum} = x_1 + ... + x_n\n with nonces \nk_{sum} = k_1 + ... + k_n\n. The public key for the private scalar sum would be: \ny = x_{sum} G\n. The signature for these sums (from all group participants) would be: \nr' = k_{sum} G s' = k_{sum} - h x_{sum}\n. To generate this signature all participants would have to share their private key and nonces beforehand. We want to obviously avoid this, so instead let us have each participant create a partial signature. \nr_n = k_1 G + ... + k_n G = r'\n (the sum of the public nonce points, which the participants may freely individually publish) \ns_n = k_n - h x_n\n. Substituting this into the general formulas for signatures and using point or scalar addition: \nr = r_n = r'\n (the same as above) \ns = s_1 + ... + s_n = s'\n (simple scalar addition; it must be true that \n(k_1 - h x_1) + ... + (k_n - h x_n) = s_1 + ... + s_n = s')\n. Doing an m-of-n signature is non-trivial. It has been suggested that a merkle tree containing all possible public key sums for \nm\n participants be used for these cases, generating a \nlog(n)\n sized signature [28].\n\n\n\n\n References\n\u00b6\n\n\n\n\n\n\n\n\n\n\nWuille P. 2015. \nTree signatures: Multisig on steroids using tree signatures\n.\u00a0\n\u21a9",
            "title": "Schnorr Signatures"
        },
        {
            "location": "/research/schnorr-signatures/#schnorr-signatures",
            "text": "Schnorr signatures have been proposed for Bitcoin. They have also been used extensively in other cryptocurrencies, such as Nxt and CryptoNote coins. In the simplest case, a Schnorr signature ECDSA cryptosystem can be described as follows:    y = xG  where  y  is the public key point on the curve,  x  is the private scalar,  G  is the curve generator.   r = kG  where  r  is the point on the curve resulting from the multiplication of  k , the nonce scalar, by the generator.   h = H(M || r)  where  H  is a secure hash function,  M  is the message (usually a 32 byte hash), and  r  is the encoded point previously described.  ||  denotes concatenation.   s = k - hx  where  s  is the scalar denoted from  k - hx .  The signature is  (r,s) , and verification is simply  H(M || r) == hQ + sG .   In the above, multiplications by a capital letter (e.g.,  kG ) are point multiplications by a scalar, and so always result in a point on the curve. Addition of these points results in another point. Additions and multiplications of scalars amongst themselves is the same as regular multiplication you would do with any integer. It\u2019s important to note that multiplying a point by a scalar is considered an irreversible step, because the calculation of the scalar from the new point defaults to the discrete logarithm problem.  From the above it is clear that  r  is a point on the curve, while  s  is a scalar. Consider the group of signers represented by  x_{sum} = x_1 + ... + x_n  with nonces  k_{sum} = k_1 + ... + k_n . The public key for the private scalar sum would be:  y = x_{sum} G . The signature for these sums (from all group participants) would be:  r' = k_{sum} G s' = k_{sum} - h x_{sum} . To generate this signature all participants would have to share their private key and nonces beforehand. We want to obviously avoid this, so instead let us have each participant create a partial signature.  r_n = k_1 G + ... + k_n G = r'  (the sum of the public nonce points, which the participants may freely individually publish)  s_n = k_n - h x_n . Substituting this into the general formulas for signatures and using point or scalar addition:  r = r_n = r'  (the same as above)  s = s_1 + ... + s_n = s'  (simple scalar addition; it must be true that  (k_1 - h x_1) + ... + (k_n - h x_n) = s_1 + ... + s_n = s') . Doing an m-of-n signature is non-trivial. It has been suggested that a merkle tree containing all possible public key sums for  m  participants be used for these cases, generating a  log(n)  sized signature [28].",
            "title": " Schnorr Signatures"
        },
        {
            "location": "/research/schnorr-signatures/#references",
            "text": "Wuille P. 2015.  Tree signatures: Multisig on steroids using tree signatures .\u00a0 \u21a9",
            "title": "References"
        },
        {
            "location": "/research/miscellaneous-improvements/",
            "text": "Miscellaneous Improvements\n\u00b6\n\n\n\n\nAs in Bitcoin, subsidy decays exponentially with block height. However, Decred\u2019s algorithm, though also extremely simple, better interpolates this decay over time so as not to produce market shock with steep subsidy drops similar to CryptoNote\n1\n. Like PeerCoin\n2\n, the PoW difficulty is calculated from the exponentially weighted average of differences in previous block times. However, this calculation is also interpolated into Bitcoin-like difficulty window periods. The \u201ctimewarp\u201d bug in Bitcoin is corrected\n3\n, by ensuring that every difference in block time in incorporated into the difficulty calculation.\n\n\nIt should also be noted that many well known mining attacks, such as selfish mining\n4\n and stubborn mining\n5\n, will no longer function advantageously in a system where there is effective decentralization of stake mining and no PoW-PoS miner collusion. This is simply because it is impossible to generate secret extensions to blockchains without the assistance of stake miners. Resilience to previously described mining attacks, and newly conceived mining attacks specific to our system, will be a fruitful area for future research.\n\n\n\n\n References\n\u00b6\n\n\n\n\n\n\n\n\n\n\nButerin V. 2014. \nA next-generation smart contract and decentralized application platform\n.\u00a0\n\u21a9\n\n\n\n\n\n\nKing S. and Nadal S. 2012. \nPPCoin: Peer-to-peer crypto-currency with proof-of-stake\n.\u00a0\n\u21a9\n\n\n\n\n\n\nArtForz. 2011. \nRe: Possible way to make a very profitable 50 plus-ish attack for pools?\n\u00a0\n\u21a9\n\n\n\n\n\n\nEyal I. 2015. \nThe miner\u2019s dilemma\n.\u00a0\n\u21a9\n\n\n\n\n\n\nNayak K., Kumar S., Miller A., Shi E. 2015. \nStubborn mining: Generalizing selfish mining and combining with an eclipse attack\n.\u00a0\n\u21a9",
            "title": "Miscellaneous Improvements"
        },
        {
            "location": "/research/miscellaneous-improvements/#miscellaneous-improvements",
            "text": "As in Bitcoin, subsidy decays exponentially with block height. However, Decred\u2019s algorithm, though also extremely simple, better interpolates this decay over time so as not to produce market shock with steep subsidy drops similar to CryptoNote 1 . Like PeerCoin 2 , the PoW difficulty is calculated from the exponentially weighted average of differences in previous block times. However, this calculation is also interpolated into Bitcoin-like difficulty window periods. The \u201ctimewarp\u201d bug in Bitcoin is corrected 3 , by ensuring that every difference in block time in incorporated into the difficulty calculation.  It should also be noted that many well known mining attacks, such as selfish mining 4  and stubborn mining 5 , will no longer function advantageously in a system where there is effective decentralization of stake mining and no PoW-PoS miner collusion. This is simply because it is impossible to generate secret extensions to blockchains without the assistance of stake miners. Resilience to previously described mining attacks, and newly conceived mining attacks specific to our system, will be a fruitful area for future research.",
            "title": " Miscellaneous Improvements"
        },
        {
            "location": "/research/miscellaneous-improvements/#references",
            "text": "Buterin V. 2014.  A next-generation smart contract and decentralized application platform .\u00a0 \u21a9    King S. and Nadal S. 2012.  PPCoin: Peer-to-peer crypto-currency with proof-of-stake .\u00a0 \u21a9    ArtForz. 2011.  Re: Possible way to make a very profitable 50 plus-ish attack for pools? \u00a0 \u21a9    Eyal I. 2015.  The miner\u2019s dilemma .\u00a0 \u21a9    Nayak K., Kumar S., Miller A., Shi E. 2015.  Stubborn mining: Generalizing selfish mining and combining with an eclipse attack .\u00a0 \u21a9",
            "title": "References"
        },
        {
            "location": "/advanced/contributor-compensation/",
            "text": "Contributor Compensation\n\u00b6\n\n\n\n\n Request for Proposals (RFP)\n\u00b6\n\n\nDecred was launched with a Request For Proposal system in order to provide compensation for contributors working on larger or more significant projects. A document (RFP) would be produced which described the requirements and scope of a project, along with a clearly defined set of milestones and a reward specified in DCR. The RFP would be posted publicly and community members would be given a period of time to submit their proposals. After review, a proposal would be selected and awarded the contract.\n\n\nThe RFPs were stored on GitHub and they can still be viewed. The first, \nRFP-001\n, was looking for developers to overhaul the Paymetheus application. RFP progress and payments were made public via the Decred forum\n1\n.\n\n\nThe RFP process worked well for certain types of tasks, however a need arose to have contributors engaged and compensated over the longer term and on a more flexible basis\n2\n. In January 2017 the RFP system was changed to a contractor model and Decred began to hire it\u2019s first contractors.\n\n\n\n\n Contractors\n\u00b6\n\n\nDecred currently has over 20 active contractors and they can be viewed on the decred.org \nContributors\n page. The active contractors are made up of both individuals and corporate contractors. Contractors contribute in a wide variety of ways including software development, design, marketing, community management and documentation.\n\n\nContractors submit a monthly invoice to DHG (Decred Holding Group) and are paid in Decred according to an hourly rate.\n\n\n Becoming a Contractor\n\u00b6\n\n\nThe contractor model and how to get involved are thoroughly documented in the \nDecred blog post \u201cDecred Recruiting\u201d\n. If you are interested, please start by reading this blog post thoroughly - it should contain everything you need to know to get started. We look forward to your contributions!\n\n\n\n\n Sources\n\u00b6\n\n\n\n\n\n\n\n\n\n\nDecred Forum, \nRFP - Status And Expenditures\n\u00a0\n\u21a9\n\n\n\n\n\n\nDecred Blog, \n2017 Decred Roadmap\n\u00a0\n\u21a9",
            "title": "Contributor Compensation"
        },
        {
            "location": "/advanced/contributor-compensation/#contributor-compensation",
            "text": "",
            "title": " Contributor Compensation"
        },
        {
            "location": "/advanced/contributor-compensation/#request-for-proposals-rfp",
            "text": "Decred was launched with a Request For Proposal system in order to provide compensation for contributors working on larger or more significant projects. A document (RFP) would be produced which described the requirements and scope of a project, along with a clearly defined set of milestones and a reward specified in DCR. The RFP would be posted publicly and community members would be given a period of time to submit their proposals. After review, a proposal would be selected and awarded the contract.  The RFPs were stored on GitHub and they can still be viewed. The first,  RFP-001 , was looking for developers to overhaul the Paymetheus application. RFP progress and payments were made public via the Decred forum 1 .  The RFP process worked well for certain types of tasks, however a need arose to have contributors engaged and compensated over the longer term and on a more flexible basis 2 . In January 2017 the RFP system was changed to a contractor model and Decred began to hire it\u2019s first contractors.",
            "title": " Request for Proposals (RFP)"
        },
        {
            "location": "/advanced/contributor-compensation/#contractors",
            "text": "Decred currently has over 20 active contractors and they can be viewed on the decred.org  Contributors  page. The active contractors are made up of both individuals and corporate contractors. Contractors contribute in a wide variety of ways including software development, design, marketing, community management and documentation.  Contractors submit a monthly invoice to DHG (Decred Holding Group) and are paid in Decred according to an hourly rate.",
            "title": " Contractors"
        },
        {
            "location": "/advanced/contributor-compensation/#becoming-a-contractor",
            "text": "The contractor model and how to get involved are thoroughly documented in the  Decred blog post \u201cDecred Recruiting\u201d . If you are interested, please start by reading this blog post thoroughly - it should contain everything you need to know to get started. We look forward to your contributions!",
            "title": " Becoming a Contractor"
        },
        {
            "location": "/advanced/contributor-compensation/#sources",
            "text": "Decred Forum,  RFP - Status And Expenditures \u00a0 \u21a9    Decred Blog,  2017 Decred Roadmap \u00a0 \u21a9",
            "title": " Sources"
        },
        {
            "location": "/advanced/user-projects/",
            "text": "Contributor Projects\n\u00b6\n\n\n\n\nThe following is a list of projects which have been created by members of the Decred community. These are not official Decred projects, and as such they are not necessarily endorsed or supported by the Decred developers. \n\n\nDashboards\n\u00b6\n\n\n\n\n\n\n\n\nProject\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\ndcrstats.com\n\n\nGeneral purpose Decred dashboard\n\n\n\n\n\n\ndec.red\n\n\nDashboard with a focus on mining\n\n\n\n\n\n\n\n\nMobile apps\n\u00b6\n\n\n\n\n\n\n\n\nProject\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nDecred Widgets\n\n\nHomescreen widgets for Android showing Decred stats\n\n\n\n\n\n\nDCR Prices\n\n\nDetailed price information in an Android app\n\n\n\n\n\n\nDcrstats (\nAndroid\n/\niOS\n)\n\n\nCompanion app for dcrstats.com\n\n\n\n\n\n\n\n\nWallets\n\u00b6\n\n\n\n\n\n\n\n\nProject\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nDecred Wallet Gui\n\n\nAlternative wallet GUI written in Java\n\n\n\n\n\n\n\n\nProof of Stake\n\u00b6\n\n\n\n\n\n\n\n\nProject\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nEvolution\n\n\nAlternative to official stake pools\n\n\n\n\n\n\nPoS Master\n\n\nCalculate returns on PoS voting\n\n\n\n\n\n\n\n\nCommand line\n\u00b6\n\n\n\n\n\n\n\n\nProject\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\ndcrspy\n\n\nMonitor details of the Decred network\n\n\n\n\n\n\nBalance and ticket stats\n\n\nBash script displaying wallet stats\n\n\n\n\n\n\ndcrstatus\n\n\nDashboard showing personal stats in Bash",
            "title": "Contributor Projects"
        },
        {
            "location": "/advanced/user-projects/#contributor-projects",
            "text": "The following is a list of projects which have been created by members of the Decred community. These are not official Decred projects, and as such they are not necessarily endorsed or supported by the Decred developers.",
            "title": " Contributor Projects"
        },
        {
            "location": "/advanced/user-projects/#dashboards",
            "text": "Project  Description      dcrstats.com  General purpose Decred dashboard    dec.red  Dashboard with a focus on mining",
            "title": "Dashboards"
        },
        {
            "location": "/advanced/user-projects/#mobile-apps",
            "text": "Project  Description      Decred Widgets  Homescreen widgets for Android showing Decred stats    DCR Prices  Detailed price information in an Android app    Dcrstats ( Android / iOS )  Companion app for dcrstats.com",
            "title": "Mobile apps"
        },
        {
            "location": "/advanced/user-projects/#wallets",
            "text": "Project  Description      Decred Wallet Gui  Alternative wallet GUI written in Java",
            "title": "Wallets"
        },
        {
            "location": "/advanced/user-projects/#proof-of-stake",
            "text": "Project  Description      Evolution  Alternative to official stake pools    PoS Master  Calculate returns on PoS voting",
            "title": "Proof of Stake"
        },
        {
            "location": "/advanced/user-projects/#command-line",
            "text": "Project  Description      dcrspy  Monitor details of the Decred network    Balance and ticket stats  Bash script displaying wallet stats    dcrstatus  Dashboard showing personal stats in Bash",
            "title": "Command line"
        },
        {
            "location": "/advanced/using-github/",
            "text": "Using GitHub\n\u00b6\n\n\n\n\nGitHub is the primary version control used for all Decred projects. This document provides some basic info on how we handle contributions and some basic info on how to contribute.\n\n\n\n\nGeneral Model\n\u00b6\n\n\nWith this process we are trying to make contributing simple while also maintaining a high level of code quality and clean history. Members of the Decred team must follow the same procedures as external contributors.\n\n\nOur model for contributing in outline form is as follows. If any of this does not make sense, don\u2019t worry, it will be explained in more detail in the next sections.\n\n\n\n\nFind an issue you want to work on. If there are none describing your issue, open one with what you are going to do.\n\n\nMake changes on a branch.\n\n\nPush these changes to your own forked GitHub repo.\n\n\nWhen your changes are ready to be reviewed or when you just want input from other devs open a Pull Request (PR) on the main repo from the GitHub web page.\n\n\nAdd a comment on the PR that says what issue you are fixing. Put the text Closes # or Fixes # followed by the number of the issue on a single line. This will allow GitHub to automatically link the PR to the issue and close the issue when the PR is closed.\n\n\nYou can request a specific reviewer from the GitHub webpage or you can ask someone on IRC/Slack to review.\n\n\nALL changes must be reviewed and receive at least one approval before they can go in. Only team members can give official approval, but comments from other users are encouraged.\n\n\nIf there are changes requested, make those changes and commit them to your local branch.\n\n\nPush those changes to the same branch you have been working on. They will show up in the PR that way and the reviewer can then compare to the previous version.\n\n\nOnce your changes are approved, they can be merged into master. To keep history clean, we only allow non-fast-forward merges (that means we want a linear history). Most PRs also must be squashed to a single commit (although if there is reason to have it as multiple commits that can be considered on a case by case basis).\n\n\nIf your PR is a single commit (or can be squashed by GitHub automatically) and is caught up with master, the reviewer will merge your PR. If your branch was too far behind, you may be asked to rebase your commit. Once that is done and pushed, the reviewer will merge your commit.\n\n\n\n\n\n\nCreating a new feature pull request\n\u00b6\n\n\n\n\nFind or create an issue on the GitHub repo (the original, not your fork) for the feature you want to work on.\n\n\nCheckout a new feature branch to house the changes you will be making:\n\n\n\n\n$ git checkout -b <feature_branch>\n\n\n\n\n\n\nMake whatever changes are necessary for the feature and commit them\n\n\nPush your feature branch to your fork:\n\n\n\n\n$ git push <yourname> <feature_branch>\n\n\n\n\n\n\nWith your browser, navigate to https://github.com/coolsnady/hcd\n\n\nCreate a pull request with the GitHub UI. You can request a reviewer on the GitHub web page or you can ask someone on irc/slack.\n\n\n\n\nRebasing one of your existing pull requests\n\u00b6\n\n\nSometimes you will be requested to rebase and squash the pull request to the latest master branch.\n\n\n\n\nMake sure the master branch is up-to-date:\n\n\n\n\n$ git checkout master\n$ git pull\n\n\n\n\n\n\nCheckout the existing feature branch and rebase it with the interactive flag:\n\n\n\n\n$ git checkout <feature_branch>\n$ git rebase -i master\n\n\n\n\n\n\nFollow the directions presented to specify \u2018s\u2019 meaning squash for the additional commits (the first commit must remain \u2018p\u2019 or \u2018pick\u2019).\n\n\nWrite a single commit message in the editor that you have set to cover all the commits included.\n\n\nSave and close the editor and git should generate a single commit with the message you specified and all the commits you added. You can check the commit with the command \ngit show\n.\n\n\nForce push the branch to your fork:\n\n\n\n\n$ git push -f <yourname> <feature_branch>\n\n\n\n\n\n\nOther Considerations\n\u00b6\n\n\nEach GitHub repo has a LICENSE. Your new code must be under the same LICENSE as the existing code and assigned copyright to \u2018The Decred Developers\u2019. In most cases this is the very liberal ISC license but a few repos are different. Check the repo to be sure.\n\n\nIf you have any questions for contributing, feel free to ask on irc/slack or GitHub. Decred team members (and probably community members too) will be happy to help.",
            "title": "Using GitHub"
        },
        {
            "location": "/advanced/using-github/#using-github",
            "text": "GitHub is the primary version control used for all Decred projects. This document provides some basic info on how we handle contributions and some basic info on how to contribute.",
            "title": "Using GitHub"
        },
        {
            "location": "/advanced/using-github/#general-model",
            "text": "With this process we are trying to make contributing simple while also maintaining a high level of code quality and clean history. Members of the Decred team must follow the same procedures as external contributors.  Our model for contributing in outline form is as follows. If any of this does not make sense, don\u2019t worry, it will be explained in more detail in the next sections.   Find an issue you want to work on. If there are none describing your issue, open one with what you are going to do.  Make changes on a branch.  Push these changes to your own forked GitHub repo.  When your changes are ready to be reviewed or when you just want input from other devs open a Pull Request (PR) on the main repo from the GitHub web page.  Add a comment on the PR that says what issue you are fixing. Put the text Closes # or Fixes # followed by the number of the issue on a single line. This will allow GitHub to automatically link the PR to the issue and close the issue when the PR is closed.  You can request a specific reviewer from the GitHub webpage or you can ask someone on IRC/Slack to review.  ALL changes must be reviewed and receive at least one approval before they can go in. Only team members can give official approval, but comments from other users are encouraged.  If there are changes requested, make those changes and commit them to your local branch.  Push those changes to the same branch you have been working on. They will show up in the PR that way and the reviewer can then compare to the previous version.  Once your changes are approved, they can be merged into master. To keep history clean, we only allow non-fast-forward merges (that means we want a linear history). Most PRs also must be squashed to a single commit (although if there is reason to have it as multiple commits that can be considered on a case by case basis).  If your PR is a single commit (or can be squashed by GitHub automatically) and is caught up with master, the reviewer will merge your PR. If your branch was too far behind, you may be asked to rebase your commit. Once that is done and pushed, the reviewer will merge your commit.",
            "title": "General Model"
        },
        {
            "location": "/advanced/using-github/#creating-a-new-feature-pull-request",
            "text": "Find or create an issue on the GitHub repo (the original, not your fork) for the feature you want to work on.  Checkout a new feature branch to house the changes you will be making:   $ git checkout -b <feature_branch>   Make whatever changes are necessary for the feature and commit them  Push your feature branch to your fork:   $ git push <yourname> <feature_branch>   With your browser, navigate to https://github.com/coolsnady/hcd  Create a pull request with the GitHub UI. You can request a reviewer on the GitHub web page or you can ask someone on irc/slack.",
            "title": "Creating a new feature pull request"
        },
        {
            "location": "/advanced/using-github/#rebasing-one-of-your-existing-pull-requests",
            "text": "Sometimes you will be requested to rebase and squash the pull request to the latest master branch.   Make sure the master branch is up-to-date:   $ git checkout master\n$ git pull   Checkout the existing feature branch and rebase it with the interactive flag:   $ git checkout <feature_branch>\n$ git rebase -i master   Follow the directions presented to specify \u2018s\u2019 meaning squash for the additional commits (the first commit must remain \u2018p\u2019 or \u2018pick\u2019).  Write a single commit message in the editor that you have set to cover all the commits included.  Save and close the editor and git should generate a single commit with the message you specified and all the commits you added. You can check the commit with the command  git show .  Force push the branch to your fork:   $ git push -f <yourname> <feature_branch>",
            "title": "Rebasing one of your existing pull requests"
        },
        {
            "location": "/advanced/using-github/#other-considerations",
            "text": "Each GitHub repo has a LICENSE. Your new code must be under the same LICENSE as the existing code and assigned copyright to \u2018The Decred Developers\u2019. In most cases this is the very liberal ISC license but a few repos are different. Check the repo to be sure.  If you have any questions for contributing, feel free to ask on irc/slack or GitHub. Decred team members (and probably community members too) will be happy to help.",
            "title": "Other Considerations"
        },
        {
            "location": "/advanced/contributing/",
            "text": "Source Code Contributions\n\u00b6\n\n\n\n\nInitial Preparation\n\u00b6\n\n\nA good first step is to read the \nCode Contribution Guidelines documentation\n to get a good understanding of the policies used by the\nproject.  That document is primarily focused on the Go codebase but it is still a good start.\n\n\nThe following examples will be split into two sections, one for the Go projects (dcrd, dcrwallet, gominer, etc), and one for projects that do not use Go (decrediton, insight, dcrdocs, etc).  In all cases, be sure to check out the README.md in each project if you need help setting the particular project up.\n\n\n\n\nGo\n\u00b6\n\n\nFor projects using Go, you can follow this procedure.  dcrd will be used as the example.  This assumes you already have go1.6 or newer installed and a working \n$GOPATH\n.\n\n\nOne time setup\n\u00b6\n\n\n\n\nFork dcrd on GitHub\n\n\nRun the following commands to obtain dcrd, all dependencies, and install it:\n\n\n\n\n$ mkdir -p $GOPATH/src/github.com/decred/\n$ git clone https://github.com/decred/dcrd $GOPATH/src/github.com/decred/dcrd\n$ cd $GOPATH/src/github.com/decred/dcrd\n$ go dep ensure\n$ go install . ./cmd/...\n\n\n\n\n\n\nAdd a git remote for your fork:\n\n\n\n\n$ git remote add <yourname> https://github.com/<yourname>/dcrd.git\n\n\n\n\nOther projects\n\u00b6\n\n\nFor projects not written in Go, the initial setup will depend on the project.  I will use dcrdocs as an example here, but the basic steps are the same for any of the projects.  Specific setup can be seen in the project README.md (for example how to install mkdocs to work on dcrdocs or electron for decrediton).\n\n\nOne time setup\n\u00b6\n\n\n\n\nFork dcrdocs on GitHub\n\n\nRun the following commands to obtain dcrd, all dependencies, and install it:\n\n\n\n\n$ mkdir -p code/decred\n$ cd code/decred\n$ git clone https://github.com/decred/dcrdocs\n$ cd dcrdocs\n\n\n\n\n\n\nAdd a git remote for your fork:\n\n\n\n\n$ git remote add <yourname> https://github.com/<yourname>/dcrdocs.git\n\n\n\n\n\n\nOther Considerations\n\u00b6\n\n\nThere are a few other things to consider when doing a pull request.  In the case of the Go code, there is significant test coverage already.  If you are adding code, you should add tests as well.  If you are fixing something, you need to make sure you do not break any existing tests.  For the Go code, there is a script \ngoclean.sh\n in each repo to run the tests and the any static checkers we have.  NO code will be accepted without passing all the tests.  In the case of the node.js code (decrediton) all code must pass eslint.  You can check this with the command \nnpm run lint\n.\n\n\nIf you have any questions for contributing, feel free to ask on irc/slack or GitHub.  Decred team members (and probably community members too) will be happy to help.",
            "title": "Source Code Contributions"
        },
        {
            "location": "/advanced/contributing/#source-code-contributions",
            "text": "",
            "title": " Source Code Contributions"
        },
        {
            "location": "/advanced/contributing/#initial-preparation",
            "text": "A good first step is to read the  Code Contribution Guidelines documentation  to get a good understanding of the policies used by the\nproject.  That document is primarily focused on the Go codebase but it is still a good start.  The following examples will be split into two sections, one for the Go projects (dcrd, dcrwallet, gominer, etc), and one for projects that do not use Go (decrediton, insight, dcrdocs, etc).  In all cases, be sure to check out the README.md in each project if you need help setting the particular project up.",
            "title": "Initial Preparation"
        },
        {
            "location": "/advanced/contributing/#go",
            "text": "For projects using Go, you can follow this procedure.  dcrd will be used as the example.  This assumes you already have go1.6 or newer installed and a working  $GOPATH .",
            "title": "Go"
        },
        {
            "location": "/advanced/contributing/#one-time-setup",
            "text": "Fork dcrd on GitHub  Run the following commands to obtain dcrd, all dependencies, and install it:   $ mkdir -p $GOPATH/src/github.com/decred/\n$ git clone https://github.com/decred/dcrd $GOPATH/src/github.com/decred/dcrd\n$ cd $GOPATH/src/github.com/decred/dcrd\n$ go dep ensure\n$ go install . ./cmd/...   Add a git remote for your fork:   $ git remote add <yourname> https://github.com/<yourname>/dcrd.git",
            "title": "One time setup"
        },
        {
            "location": "/advanced/contributing/#other-projects",
            "text": "For projects not written in Go, the initial setup will depend on the project.  I will use dcrdocs as an example here, but the basic steps are the same for any of the projects.  Specific setup can be seen in the project README.md (for example how to install mkdocs to work on dcrdocs or electron for decrediton).",
            "title": "Other projects"
        },
        {
            "location": "/advanced/contributing/#one-time-setup_1",
            "text": "Fork dcrdocs on GitHub  Run the following commands to obtain dcrd, all dependencies, and install it:   $ mkdir -p code/decred\n$ cd code/decred\n$ git clone https://github.com/decred/dcrdocs\n$ cd dcrdocs   Add a git remote for your fork:   $ git remote add <yourname> https://github.com/<yourname>/dcrdocs.git",
            "title": "One time setup"
        },
        {
            "location": "/advanced/contributing/#other-considerations",
            "text": "There are a few other things to consider when doing a pull request.  In the case of the Go code, there is significant test coverage already.  If you are adding code, you should add tests as well.  If you are fixing something, you need to make sure you do not break any existing tests.  For the Go code, there is a script  goclean.sh  in each repo to run the tests and the any static checkers we have.  NO code will be accepted without passing all the tests.  In the case of the node.js code (decrediton) all code must pass eslint.  You can check this with the command  npm run lint .  If you have any questions for contributing, feel free to ask on irc/slack or GitHub.  Decred team members (and probably community members too) will be happy to help.",
            "title": "Other Considerations"
        },
        {
            "location": "/support-directory/",
            "text": "Support Reference Directory\n\u00b6\n\n\nThe purpose of this page is to provide a directory for support contacts. Everyone currently working with the Decred project has their Slack and/or IRC username listed.\n\n\nJoin Us on Slack\n\u00b6\n\n\nJoin us on Slack for support. You can receive an invite to the Decred Slack by visiting \nhttps://slack.decred.org\n. Once you\u2019ve signed up, you can join using your web browser by visiting \nhttps://decred.slack.com\n or by downloading one of Slack\u2019s desktop or mobile applications.\n\n\nIRC Information:\n\u00b6\n\n\nMajority of the developers are available on the Freenode IRC #decred channel. Join us on your own IRC client or the Freenode webchat \nhere\n. There is also a bridge between Slack\u2019s #general channel and the #decred channel on IRC.\n\n\nDevelopment Support\n\u00b6\n\n\n@jy-p: Boss Man\n \n\nProject Leader \n\nCEO of Company0\n\n\n@ay-p: Developer\n \n\nDecrediton\n\nWallet Support\n\nPoS Support\n\nGeneral Support  \n\n\n@chappjc: Developer\n \n\nGo Programmer\n\nPoS Support\n\nAnalytics/Data Collection\n\n\n@davecgh: Lead Developer\n \n\nConsensus Expert\n\nGeneral Support\n\n\n@dhill: Developer\n \n\nsysadmin\n\nGo Programmer \n\n\n@jcv: Developer\n \n\nDecrediton\n\nWallet Support\n\nPoW Support\n\ngominer\n\nDocumentation\n\nRelease Management\n\nGeneral Support\n\n\n@jolan: Developer\n \n\nPoW Support\n\ngominer\n \nWebsite Management\n\n\n@jrick: Developer\n \n\nWallet Support\n \nPoS Support\n\n\n@moo31337: Developer\n \n\nConsensus Expert\n\nSupport\n\n\n@dnldd: Developer\n \n\ndcrd/dcrwallet Support\n\ndcrrpcclient Support\n\n\n@go1dfish: Developer\n \n\nDecrediton Support\n\n\n@sndurkin: Developer\n \n\nDecrediton Support\n\n\n@peter_zen: Developer\n \n\nWeb Wallet (Copay) \n\nLedger Integration \n\nTREZOR Integration\n\n\n@raedah: Developer\n \n\nTicket Buyer Support\n\nGeneral Support\n\n\nDocumentation Support\n\u00b6\n\n\n@jholdstock: Documentation Collaborator\n \n\nGeneral Support\n\n\n@praxis: Documentation Collaborator\n \n\nCommunity Management\n\nGeneral Support\n\n\n@shadowlance: Documentation Collaborator\n \n\nStatistics\n\nGeneral Support\n\n\nCommunity Support\n\u00b6\n\n\n@dyrk\n\nBitcointalk\n\nSlack\n\nRussia\n\n\n@emiliomann\n\nBitcointalk\n\nFacebook\n\nSlack\n\nBrazil\n\n\n@haon\n\nFacebook\n\nSlack\n\nNetherlands\n\n\n@ingsoc\n\nDiscord\n\nSlack\n\nBitcointalk\n\nTwitter\n\n\n@jd\n\nFacebook\n\nYouTube\n\n\n@jz\n\nReddit\n\nSlack\n\n\n@praxis\n\nBitcointalk\n\nReddit\n\n\n@pvtwarren\n\nReddit\n\nSlack\n\n\n@thedecreddigest\n\nTwitter\n\n\nDesign Support\n\u00b6\n\n\n@karamble: Web Designer\n \n\nWebsite Management\n\nGeneral Support \n\n\n@kart: Illustrator/Designer\n \n\nIllustrations \n\nGraphic Design\n\n\n@kyle_firethought: Motion Designer\n \n\nAnimation and Motion Design \n\nInteractive Media \n\nVideo Creation\n\n\n@linnutee: Lead Designer\n \n\nIdentity\n\nUI/UX Design\n\nVisual Design\n\nMotion Design\n\n\n@lustosa: Illustrator\n \n\nIllustrations \n\nGraphic Design\n\n\n@pflan: Designer\n \n\nUI/UX Design\n\nFront-End Development\n\nVisual Design\n\n\n@sander: Designer\n \n\nIdentity\n\nUI/UX Design\n\nVisual Design\n\nFront-End Development\n\n\nMarketing Support\n\u00b6\n\n\n@haon\n\nMedia\n\n\n@ingsoc\n\nNetworking\n\n\n@jd\n\nAdvertising\n\n\n@jz\n\nNetworking\n\n\n@thedecreddigest\n\nMedia\n\n\n@zombie5000\n\nMedia",
            "title": "Support Directory"
        },
        {
            "location": "/support-directory/#support-reference-directory",
            "text": "The purpose of this page is to provide a directory for support contacts. Everyone currently working with the Decred project has their Slack and/or IRC username listed.",
            "title": " Support Reference Directory"
        },
        {
            "location": "/support-directory/#join-us-on-slack",
            "text": "Join us on Slack for support. You can receive an invite to the Decred Slack by visiting  https://slack.decred.org . Once you\u2019ve signed up, you can join using your web browser by visiting  https://decred.slack.com  or by downloading one of Slack\u2019s desktop or mobile applications.",
            "title": "Join Us on Slack"
        },
        {
            "location": "/support-directory/#irc-information",
            "text": "Majority of the developers are available on the Freenode IRC #decred channel. Join us on your own IRC client or the Freenode webchat  here . There is also a bridge between Slack\u2019s #general channel and the #decred channel on IRC.",
            "title": "IRC Information:"
        },
        {
            "location": "/support-directory/#development-support",
            "text": "@jy-p: Boss Man   \nProject Leader  \nCEO of Company0  @ay-p: Developer   \nDecrediton \nWallet Support \nPoS Support \nGeneral Support    @chappjc: Developer   \nGo Programmer \nPoS Support \nAnalytics/Data Collection  @davecgh: Lead Developer   \nConsensus Expert \nGeneral Support  @dhill: Developer   \nsysadmin \nGo Programmer   @jcv: Developer   \nDecrediton \nWallet Support \nPoW Support \ngominer \nDocumentation \nRelease Management \nGeneral Support  @jolan: Developer   \nPoW Support \ngominer  \nWebsite Management  @jrick: Developer   \nWallet Support  \nPoS Support  @moo31337: Developer   \nConsensus Expert \nSupport  @dnldd: Developer   \ndcrd/dcrwallet Support \ndcrrpcclient Support  @go1dfish: Developer   \nDecrediton Support  @sndurkin: Developer   \nDecrediton Support  @peter_zen: Developer   \nWeb Wallet (Copay)  \nLedger Integration  \nTREZOR Integration  @raedah: Developer   \nTicket Buyer Support \nGeneral Support",
            "title": "Development Support"
        },
        {
            "location": "/support-directory/#documentation-support",
            "text": "@jholdstock: Documentation Collaborator   \nGeneral Support  @praxis: Documentation Collaborator   \nCommunity Management \nGeneral Support  @shadowlance: Documentation Collaborator   \nStatistics \nGeneral Support",
            "title": "Documentation Support"
        },
        {
            "location": "/support-directory/#community-support",
            "text": "@dyrk \nBitcointalk \nSlack \nRussia  @emiliomann \nBitcointalk \nFacebook \nSlack \nBrazil  @haon \nFacebook \nSlack \nNetherlands  @ingsoc \nDiscord \nSlack \nBitcointalk \nTwitter  @jd \nFacebook \nYouTube  @jz \nReddit \nSlack  @praxis \nBitcointalk \nReddit  @pvtwarren \nReddit \nSlack  @thedecreddigest \nTwitter",
            "title": "Community Support"
        },
        {
            "location": "/support-directory/#design-support",
            "text": "@karamble: Web Designer   \nWebsite Management \nGeneral Support   @kart: Illustrator/Designer   \nIllustrations  \nGraphic Design  @kyle_firethought: Motion Designer   \nAnimation and Motion Design  \nInteractive Media  \nVideo Creation  @linnutee: Lead Designer   \nIdentity \nUI/UX Design \nVisual Design \nMotion Design  @lustosa: Illustrator   \nIllustrations  \nGraphic Design  @pflan: Designer   \nUI/UX Design \nFront-End Development \nVisual Design  @sander: Designer   \nIdentity \nUI/UX Design \nVisual Design \nFront-End Development",
            "title": "Design Support"
        },
        {
            "location": "/support-directory/#marketing-support",
            "text": "@haon \nMedia  @ingsoc \nNetworking  @jd \nAdvertising  @jz \nNetworking  @thedecreddigest \nMedia  @zombie5000 \nMedia",
            "title": "Marketing Support"
        },
        {
            "location": "/about/credits/",
            "text": "Credits\n\u00b6\n\n\n\n\n\n\n\n\n\n\nContributor\n\n\nSource\n\n\n\n\n\n\n\n\n\n\n@anondran\n\n\nBrief Guide: Setting Up Mainnet Wallet \u2013 Airdop Included \u2013 With Basic Commands \u2013 OS Neutral\n\n\n\n\n\n\n@anondran\n\n\nBrief Guide: Setting Up Testnet Wallet, Sending, And Receiving Coins \u2013 OS Neutral\n\n\n\n\n\n\n@Ayush\n\n\nPoS Guide Any OS \u2013 Solo Stake Mining\n\n\n\n\n\n\n@brencelj\n\n\nLinux PoS Helping Scripts\n\n\n\n\n\n\n@ClokworkGremlin\n\n\nTutorial: Getting A Dedicated Chain Server Set Up On Your Raspberry Pi 2\n\n\n\n\n\n\n@davecgh\n\n\nDescription Of The Different Usernames, Passwords, And Passphrases\n\n\n\n\n\n\n@davecgh\n\n\nGuide (With Screenshots) To Claim Airdrop Coins With wallet.decred.org\n\n\n\n\n\n\n@David\n\n\nHow dcrd Works And The Shortage Of Public dcrd Nodes\n\n\n\n\n\n\n@David\n\n\nHow To Track PoS Mining \u2013 Purchases, Votes, And Revokes\n\n\n\n\n\n\n@Dirbaio\n\n\nGuide: Arch Linux \u2013 Headless Amd Opencl Setup & Cgminer From Source\n\n\n\n\n\n\n@drunkenmugsy\n\n\nPoS Mining FAQ\n\n\n\n\n\n\n@Finksy\n\n\nQuestion about Setup\n\n\n\n\n\n\n@norikai\n\n\nHow To Rebuild/Resync Wallet Successfully\n\n\n\n\n\n\n@Reynold\n\n\nDecred Setup On Windows X64 And Mining On Testnet\n\n\n\n\n\n\n@Reynold\n\n\nHow I Finally Got My Airdrop Coins Into My Main Decred Wallet\n\n\n\n\n\n\n@rohit pawar\n\n\nGuide For Solo PoS Mining Using AWS 24x7 \u2013 Windows\n\n\n\n\n\n\n@sambiohazard\n\n\nPrerequisites For Mainnet. Unofficial Airdrop Import & Mining Guide. Use At Your Own Risk!\n\n\n\n\n\n\n@sambiohazard\n\n\nTestnet Only Guide: How I Got My Daemon, Wallet, And Miner Running & Also Started Solo Stake Mining\n\n\n\n\n\n\n@sw1\n\n\nCompile List Of Useful PoS Commands\n\n\n\n\n\n\n@thepotterone\n\n\nHow to Setup and Optimize your CGMiner Config File\n\n\n\n\n\n\n@zero\n\n\nDecred Synopsis Of Basic Commands With Notes And Explanations About Each Of Them",
            "title": "Credits"
        },
        {
            "location": "/about/credits/#credits",
            "text": "Contributor  Source      @anondran  Brief Guide: Setting Up Mainnet Wallet \u2013 Airdop Included \u2013 With Basic Commands \u2013 OS Neutral    @anondran  Brief Guide: Setting Up Testnet Wallet, Sending, And Receiving Coins \u2013 OS Neutral    @Ayush  PoS Guide Any OS \u2013 Solo Stake Mining    @brencelj  Linux PoS Helping Scripts    @ClokworkGremlin  Tutorial: Getting A Dedicated Chain Server Set Up On Your Raspberry Pi 2    @davecgh  Description Of The Different Usernames, Passwords, And Passphrases    @davecgh  Guide (With Screenshots) To Claim Airdrop Coins With wallet.decred.org    @David  How dcrd Works And The Shortage Of Public dcrd Nodes    @David  How To Track PoS Mining \u2013 Purchases, Votes, And Revokes    @Dirbaio  Guide: Arch Linux \u2013 Headless Amd Opencl Setup & Cgminer From Source    @drunkenmugsy  PoS Mining FAQ    @Finksy  Question about Setup    @norikai  How To Rebuild/Resync Wallet Successfully    @Reynold  Decred Setup On Windows X64 And Mining On Testnet    @Reynold  How I Finally Got My Airdrop Coins Into My Main Decred Wallet    @rohit pawar  Guide For Solo PoS Mining Using AWS 24x7 \u2013 Windows    @sambiohazard  Prerequisites For Mainnet. Unofficial Airdrop Import & Mining Guide. Use At Your Own Risk!    @sambiohazard  Testnet Only Guide: How I Got My Daemon, Wallet, And Miner Running & Also Started Solo Stake Mining    @sw1  Compile List Of Useful PoS Commands    @thepotterone  How to Setup and Optimize your CGMiner Config File    @zero  Decred Synopsis Of Basic Commands With Notes And Explanations About Each Of Them",
            "title": " Credits"
        },
        {
            "location": "/about/license/",
            "text": "License\n\u00b6\n\n\ndcrdocs is licensed under the \ncopyfree\n ISC License.\n\n\n\n\nCopyright \u00a9 2013-2015 The btcsuite developers. Copyright \u00a9 2015-2017 The Decred developers.\n\n\nPermission to use, copy, modify, and distribute this software for any purpose with or without fee is hereby granted, provided that the above copyright notice and this permission notice appear in all copies.\n\n\nTHE SOFTWARE IS PROVIDED \u201cAS IS\u201d AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.",
            "title": "License"
        },
        {
            "location": "/about/license/#license",
            "text": "dcrdocs is licensed under the  copyfree  ISC License.   Copyright \u00a9 2013-2015 The btcsuite developers. Copyright \u00a9 2015-2017 The Decred developers.  Permission to use, copy, modify, and distribute this software for any purpose with or without fee is hereby granted, provided that the above copyright notice and this permission notice appear in all copies.  THE SOFTWARE IS PROVIDED \u201cAS IS\u201d AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.",
            "title": " License"
        }
    ]
}